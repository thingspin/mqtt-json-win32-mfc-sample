; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	C:\Users\lonycell\Downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT

PUBLIC	?minInt@Value@Json@@2HB				; Json::Value::minInt
PUBLIC	?maxInt@Value@Json@@2HB				; Json::Value::maxInt
PUBLIC	?maxUInt@Value@Json@@2IB			; Json::Value::maxUInt
CONST	SEGMENT
?minInt@Value@Json@@2HB DD 080000000H			; Json::Value::minInt
?maxInt@Value@Json@@2HB DD 07fffffffH			; Json::Value::maxInt
?maxUInt@Value@Json@@2IB DD 0ffffffffH			; Json::Value::maxUInt
CONST	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?_Deallocate@std@@YAXPAXII@Z			; std::_Deallocate
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	??0runtime_error@std@@QAE@PBD@Z			; std::runtime_error::runtime_error
PUBLIC	??1runtime_error@std@@UAE@XZ			; std::runtime_error::~runtime_error
PUBLIC	??0runtime_error@std@@QAE@ABV01@@Z		; std::runtime_error::runtime_error
PUBLIC	??_Gruntime_error@std@@UAEPAXI@Z		; std::runtime_error::`scalar deleting destructor'
PUBLIC	??0CZString@Value@Json@@QAE@H@Z			; Json::Value::CZString::CZString
PUBLIC	??0CZString@Value@Json@@QAE@PBDW4DuplicationPolicy@012@@Z ; Json::Value::CZString::CZString
PUBLIC	??0CZString@Value@Json@@QAE@ABV012@@Z		; Json::Value::CZString::CZString
PUBLIC	??1CZString@Value@Json@@QAE@XZ			; Json::Value::CZString::~CZString
PUBLIC	??4CZString@Value@Json@@QAEAAV012@ABV012@@Z	; Json::Value::CZString::operator=
PUBLIC	??MCZString@Value@Json@@QBE_NABV012@@Z		; Json::Value::CZString::operator<
PUBLIC	??8CZString@Value@Json@@QBE_NABV012@@Z		; Json::Value::CZString::operator==
PUBLIC	?index@CZString@Value@Json@@QBEHXZ		; Json::Value::CZString::index
PUBLIC	?c_str@CZString@Value@Json@@QBEPBDXZ		; Json::Value::CZString::c_str
PUBLIC	?isStaticString@CZString@Value@Json@@QBE_NXZ	; Json::Value::CZString::isStaticString
PUBLIC	?swap@CZString@Value@Json@@AAEXAAV123@@Z	; Json::Value::CZString::swap
PUBLIC	??0Value@Json@@QAE@W4ValueType@1@@Z		; Json::Value::Value
PUBLIC	??0Value@Json@@QAE@H@Z				; Json::Value::Value
PUBLIC	??0Value@Json@@QAE@I@Z				; Json::Value::Value
PUBLIC	??0Value@Json@@QAE@N@Z				; Json::Value::Value
PUBLIC	??0Value@Json@@QAE@PBD@Z			; Json::Value::Value
PUBLIC	??0Value@Json@@QAE@PBD0@Z			; Json::Value::Value
PUBLIC	??0Value@Json@@QAE@ABVStaticString@1@@Z		; Json::Value::Value
PUBLIC	??0Value@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::Value
PUBLIC	??0Value@Json@@QAE@_N@Z				; Json::Value::Value
PUBLIC	??0Value@Json@@QAE@ABV01@@Z			; Json::Value::Value
PUBLIC	??1Value@Json@@QAE@XZ				; Json::Value::~Value
PUBLIC	??4Value@Json@@QAEAAV01@ABV01@@Z		; Json::Value::operator=
PUBLIC	?swap@Value@Json@@QAEXAAV12@@Z			; Json::Value::swap
PUBLIC	?type@Value@Json@@QBE?AW4ValueType@2@XZ		; Json::Value::type
PUBLIC	??MValue@Json@@QBE_NABV01@@Z			; Json::Value::operator<
PUBLIC	??NValue@Json@@QBE_NABV01@@Z			; Json::Value::operator<=
PUBLIC	??PValue@Json@@QBE_NABV01@@Z			; Json::Value::operator>=
PUBLIC	??OValue@Json@@QBE_NABV01@@Z			; Json::Value::operator>
PUBLIC	??8Value@Json@@QBE_NABV01@@Z			; Json::Value::operator==
PUBLIC	??9Value@Json@@QBE_NABV01@@Z			; Json::Value::operator!=
PUBLIC	?compare@Value@Json@@QAEHABV12@@Z		; Json::Value::compare
PUBLIC	?asCString@Value@Json@@QBEPBDXZ			; Json::Value::asCString
PUBLIC	?asString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; Json::Value::asString
PUBLIC	?asInt@Value@Json@@QBEHXZ			; Json::Value::asInt
PUBLIC	?asUInt@Value@Json@@QBEIXZ			; Json::Value::asUInt
PUBLIC	?asDouble@Value@Json@@QBENXZ			; Json::Value::asDouble
PUBLIC	?asBool@Value@Json@@QBE_NXZ			; Json::Value::asBool
PUBLIC	?isNull@Value@Json@@QBE_NXZ			; Json::Value::isNull
PUBLIC	?isBool@Value@Json@@QBE_NXZ			; Json::Value::isBool
PUBLIC	?isInt@Value@Json@@QBE_NXZ			; Json::Value::isInt
PUBLIC	?isUInt@Value@Json@@QBE_NXZ			; Json::Value::isUInt
PUBLIC	?isIntegral@Value@Json@@QBE_NXZ			; Json::Value::isIntegral
PUBLIC	?isDouble@Value@Json@@QBE_NXZ			; Json::Value::isDouble
PUBLIC	?isNumeric@Value@Json@@QBE_NXZ			; Json::Value::isNumeric
PUBLIC	?isString@Value@Json@@QBE_NXZ			; Json::Value::isString
PUBLIC	?isArray@Value@Json@@QBE_NXZ			; Json::Value::isArray
PUBLIC	?isObject@Value@Json@@QBE_NXZ			; Json::Value::isObject
PUBLIC	?isConvertibleTo@Value@Json@@QBE_NW4ValueType@2@@Z ; Json::Value::isConvertibleTo
PUBLIC	?size@Value@Json@@QBEIXZ			; Json::Value::size
PUBLIC	?empty@Value@Json@@QBE_NXZ			; Json::Value::empty
PUBLIC	??7Value@Json@@QBE_NXZ				; Json::Value::operator!
PUBLIC	?clear@Value@Json@@QAEXXZ			; Json::Value::clear
PUBLIC	?resize@Value@Json@@QAEXI@Z			; Json::Value::resize
PUBLIC	??AValue@Json@@QAEAAV01@I@Z			; Json::Value::operator[]
PUBLIC	??AValue@Json@@QBEABV01@I@Z			; Json::Value::operator[]
PUBLIC	?get@Value@Json@@QBE?AV12@IABV12@@Z		; Json::Value::get
PUBLIC	?isValidIndex@Value@Json@@QBE_NI@Z		; Json::Value::isValidIndex
PUBLIC	?append@Value@Json@@QAEAAV12@ABV12@@Z		; Json::Value::append
PUBLIC	??AValue@Json@@QAEAAV01@PBD@Z			; Json::Value::operator[]
PUBLIC	??AValue@Json@@QBEABV01@PBD@Z			; Json::Value::operator[]
PUBLIC	??AValue@Json@@QAEAAV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::operator[]
PUBLIC	??AValue@Json@@QBEABV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::operator[]
PUBLIC	??AValue@Json@@QAEAAV01@ABVStaticString@1@@Z	; Json::Value::operator[]
PUBLIC	?get@Value@Json@@QBE?AV12@PBDABV12@@Z		; Json::Value::get
PUBLIC	?get@Value@Json@@QBE?AV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ; Json::Value::get
PUBLIC	?removeMember@Value@Json@@QAE?AV12@PBD@Z	; Json::Value::removeMember
PUBLIC	?removeMember@Value@Json@@QAE?AV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::removeMember
PUBLIC	?isMember@Value@Json@@QBE_NPBD@Z		; Json::Value::isMember
PUBLIC	?isMember@Value@Json@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::Value::isMember
PUBLIC	?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ ; Json::Value::getMemberNames
PUBLIC	?setComment@Value@Json@@QAEXPBDW4CommentPlacement@2@@Z ; Json::Value::setComment
PUBLIC	?setComment@Value@Json@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ; Json::Value::setComment
PUBLIC	?hasComment@Value@Json@@QBE_NW4CommentPlacement@2@@Z ; Json::Value::hasComment
PUBLIC	?getComment@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ; Json::Value::getComment
PUBLIC	?toStyledString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; Json::Value::toStyledString
PUBLIC	?begin@Value@Json@@QBE?AVValueConstIterator@2@XZ ; Json::Value::begin
PUBLIC	?end@Value@Json@@QBE?AVValueConstIterator@2@XZ	; Json::Value::end
PUBLIC	?begin@Value@Json@@QAE?AVValueIterator@2@XZ	; Json::Value::begin
PUBLIC	?end@Value@Json@@QAE?AVValueIterator@2@XZ	; Json::Value::end
PUBLIC	?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z	; Json::Value::resolveReference
PUBLIC	??0CommentInfo@Value@Json@@QAE@XZ		; Json::Value::CommentInfo::CommentInfo
PUBLIC	??1CommentInfo@Value@Json@@QAE@XZ		; Json::Value::CommentInfo::~CommentInfo
PUBLIC	?setComment@CommentInfo@Value@Json@@QAEXPBD@Z	; Json::Value::CommentInfo::setComment
PUBLIC	??_ECommentInfo@Value@Json@@QAEPAXI@Z		; Json::Value::CommentInfo::`vector deleting destructor'
PUBLIC	??0PathArgument@Json@@QAE@XZ			; Json::PathArgument::PathArgument
PUBLIC	??0PathArgument@Json@@QAE@I@Z			; Json::PathArgument::PathArgument
PUBLIC	??0PathArgument@Json@@QAE@PBD@Z			; Json::PathArgument::PathArgument
PUBLIC	??0PathArgument@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::PathArgument::PathArgument
PUBLIC	??1PathArgument@Json@@QAE@XZ			; Json::PathArgument::~PathArgument
PUBLIC	??0Path@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVPathArgument@1@1111@Z ; Json::Path::Path
PUBLIC	?resolve@Path@Json@@QBEABVValue@2@ABV32@@Z	; Json::Path::resolve
PUBLIC	?resolve@Path@Json@@QBE?AVValue@2@ABV32@0@Z	; Json::Path::resolve
PUBLIC	?make@Path@Json@@QBEAAVValue@2@AAV32@@Z		; Json::Path::make
PUBLIC	?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z ; Json::Path::makePath
PUBLIC	?allocate@?$allocator@PBVPathArgument@Json@@@std@@QAEPAPBVPathArgument@Json@@I@Z ; std::allocator<Json::PathArgument const *>::allocate
PUBLIC	??1?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@XZ ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::~vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >
PUBLIC	?_Reallocate@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Reallocate
PUBLIC	?_Reserve@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Reserve
PUBLIC	?addPathInArg@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@AAV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@std@@@4@W4Kind@PathArgument@2@@Z ; Json::Path::addPathInArg
PUBLIC	?invalidPath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; Json::Path::invalidPath
PUBLIC	?allocate@?$allocator@VPathArgument@Json@@@std@@QAEPAVPathArgument@Json@@I@Z ; std::allocator<Json::PathArgument>::allocate
PUBLIC	?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEX$$QAVPathArgument@Json@@@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::push_back
PUBLIC	??1?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@XZ ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::~vector<Json::PathArgument,std::allocator<Json::PathArgument> >
PUBLIC	?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXABVPathArgument@Json@@@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::push_back
PUBLIC	?_Reallocate@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Reallocate
PUBLIC	?_Reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Reserve
PUBLIC	??1ValueAllocator@Json@@UAE@XZ			; Json::ValueAllocator::~ValueAllocator
PUBLIC	??_GValueAllocator@Json@@UAEPAXI@Z		; Json::ValueAllocator::`scalar deleting destructor'
PUBLIC	??0ValueIteratorBase@Json@@QAE@XZ		; Json::ValueIteratorBase::ValueIteratorBase
PUBLIC	??1?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
PUBLIC	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buyheadnode
PUBLIC	?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode0
PUBLIC	??R?$less@VCZString@Value@Json@@@std@@QBE_NABVCZString@Value@Json@@0@Z ; std::less<Json::Value::CZString>::operator()
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
PUBLIC	?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Destroy_if_not_nil
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rrotate
PUBLIC	??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
PUBLIC	??0ValueIteratorBase@Json@@QAE@ABV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@Z ; Json::ValueIteratorBase::ValueIteratorBase
PUBLIC	?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ	; Json::ValueIteratorBase::key
PUBLIC	?index@ValueIteratorBase@Json@@QBEIXZ		; Json::ValueIteratorBase::index
PUBLIC	?memberName@ValueIteratorBase@Json@@QBEPBDXZ	; Json::ValueIteratorBase::memberName
PUBLIC	?deref@ValueIteratorBase@Json@@IBEAAVValue@2@XZ	; Json::ValueIteratorBase::deref
PUBLIC	?increment@ValueIteratorBase@Json@@IAEXXZ	; Json::ValueIteratorBase::increment
PUBLIC	?decrement@ValueIteratorBase@Json@@IAEXXZ	; Json::ValueIteratorBase::decrement
PUBLIC	?computeDistance@ValueIteratorBase@Json@@IBEHABV12@@Z ; Json::ValueIteratorBase::computeDistance
PUBLIC	?isEqual@ValueIteratorBase@Json@@IBE_NABV12@@Z	; Json::ValueIteratorBase::isEqual
PUBLIC	?copy@ValueIteratorBase@Json@@IAEXABV12@@Z	; Json::ValueIteratorBase::copy
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator++
PUBLIC	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator--
PUBLIC	??0ValueConstIterator@Json@@QAE@XZ		; Json::ValueConstIterator::ValueConstIterator
PUBLIC	??0ValueConstIterator@Json@@AAE@ABV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@Z ; Json::ValueConstIterator::ValueConstIterator
PUBLIC	??4ValueConstIterator@Json@@QAEAAV01@ABVValueIteratorBase@1@@Z ; Json::ValueConstIterator::operator=
PUBLIC	??0ValueIterator@Json@@QAE@XZ			; Json::ValueIterator::ValueIterator
PUBLIC	??0ValueIterator@Json@@QAE@ABVValueConstIterator@1@@Z ; Json::ValueIterator::ValueIterator
PUBLIC	??0ValueIterator@Json@@QAE@ABV01@@Z		; Json::ValueIterator::ValueIterator
PUBLIC	??0ValueIterator@Json@@AAE@ABV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@Z ; Json::ValueIterator::ValueIterator
PUBLIC	??4ValueIterator@Json@@QAEAAV01@ABV01@@Z	; Json::ValueIterator::operator=
PUBLIC	??1StyledWriter@Json@@UAE@XZ			; Json::StyledWriter::~StyledWriter
PUBLIC	?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate
PUBLIC	?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
PUBLIC	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_Reallocate@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocate
PUBLIC	?_Reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reserve
PUBLIC	??_GStyledWriter@Json@@UAEPAXI@Z		; Json::StyledWriter::`scalar deleting destructor'
PUBLIC	??1DefaultValueAllocator@Json@@UAE@XZ		; Json::DefaultValueAllocator::~DefaultValueAllocator
PUBLIC	?makeMemberName@DefaultValueAllocator@Json@@UAEPADPBD@Z ; Json::DefaultValueAllocator::makeMemberName
PUBLIC	?releaseMemberName@DefaultValueAllocator@Json@@UAEXPAD@Z ; Json::DefaultValueAllocator::releaseMemberName
PUBLIC	?duplicateStringValue@DefaultValueAllocator@Json@@UAEPADPBDI@Z ; Json::DefaultValueAllocator::duplicateStringValue
PUBLIC	?releaseStringValue@DefaultValueAllocator@Json@@UAEXPAD@Z ; Json::DefaultValueAllocator::releaseStringValue
PUBLIC	??_GDefaultValueAllocator@Json@@UAEPAXI@Z	; Json::DefaultValueAllocator::`scalar deleting destructor'
PUBLIC	??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ ; std::pair<Json::Value::CZString const ,Json::Value>::~pair<Json::Value::CZString const ,Json::Value>
PUBLIC	??$?MV?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@YA_NABV?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@0@Z ; std::operator<<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
PUBLIC	??$?8V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@YA_NABV?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@0@Z ; std::operator==<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
PUBLIC	??$_Lbound@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lbound<Json::Value::CZString>
PUBLIC	??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > > >
PUBLIC	??$_Eqrange@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@@1@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Eqrange<Json::Value::CZString>
PUBLIC	??$_Copy@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXABV01@U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>
PUBLIC	??$_Destroy_range1@V?$allocator@VPathArgument@Json@@@std@@PAVPathArgument@Json@@@std@@YAXPAVPathArgument@Json@@0AAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<Json::PathArgument>,Json::PathArgument *>
PUBLIC	??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
PUBLIC	??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>
PUBLIC	??$_Insert_hint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_hint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
PUBLIC	??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>
PUBLIC	??$_Insert_at@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_at<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
PUBLIC	??$_Insert_nohint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_nohint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
PUBLIC	??$_Uninitialized_move_al_unchecked1@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_move_al_unchecked1<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Uninitialized_move_al_unchecked1@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@@std@@YAPAVPathArgument@Json@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_move_al_unchecked1<Json::PathArgument *,Json::PathArgument *,std::allocator<Json::PathArgument> >
PUBLIC	??$_Lex_compare_unchecked1@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$less@X@2@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@000AAU?$less@X@0@U?$_Lex_compare_optimize@X@0@@Z ; std::_Lex_compare_unchecked1<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::less<void> >
PUBLIC	??$?M$$CBVCZString@Value@Json@@V12@@std@@YA_NABU?$pair@$$CBVCZString@Value@Json@@V23@@0@0@Z ; std::operator<<Json::Value::CZString const ,Json::Value>
PUBLIC	??$_Equal_unchecked1@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$equal_to@X@2@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@00AAU?$equal_to@X@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Equal_unchecked1<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::equal_to<void> >
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception?$AA@	; `string'
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	__TI2?AVruntime_error@std@@
PUBLIC	__CTA2?AVruntime_error@std@@
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_05LAPONLG@false?$AA@			; `string'
PUBLIC	??_C@_04LOAJBDKD@true?$AA@			; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?null@Value@Json@@2V12@B			; Json::Value::null
PUBLIC	??_7ValueAllocator@Json@@6B@			; Json::ValueAllocator::`vftable'
PUBLIC	??_7StyledWriter@Json@@6B@			; Json::StyledWriter::`vftable'
PUBLIC	??_7DefaultValueAllocator@Json@@6B@		; Json::DefaultValueAllocator::`vftable'
PUBLIC	??_C@_0BL@DKGNIMPN@Comments?5must?5start?5with?5?1?$AA@ ; `string'
PUBLIC	??_C@_0CC@BNBMBIGA@Type?5is?5not?5convertible?5to?5strin@ ; `string'
PUBLIC	??_C@_0CE@MKMAPPKF@integer?5out?5of?5signed?5integer?5ra@ ; `string'
PUBLIC	??_C@_0CB@PBEICPFN@Real?5out?5of?5signed?5integer?5range@ ; `string'
PUBLIC	??_C@_0BP@KDDCHLKA@Type?5is?5not?5convertible?5to?5int?$AA@ ; `string'
PUBLIC	??_C@_0DK@NAHIGMFE@Negative?5integer?5can?5not?5be?5conv@ ; `string'
PUBLIC	??_C@_0CD@PGCLDEBG@Real?5out?5of?5unsigned?5integer?5ran@ ; `string'
PUBLIC	??_C@_0CA@LEFAEJPN@Type?5is?5not?5convertible?5to?5uint?$AA@ ; `string'
PUBLIC	??_C@_0CC@ICOHKFIF@Type?5is?5not?5convertible?5to?5doubl@ ; `string'
PUBLIC	??_C@_02GLFAOOJA@?$FL?4?$AA@			; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@Writer@Json@@8			; Json::Writer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVWriter@Json@@@8				; Json::Writer `RTTI Type Descriptor'
PUBLIC	??_R3Writer@Json@@8				; Json::Writer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Writer@Json@@8				; Json::Writer::`RTTI Base Class Array'
PUBLIC	??_R4StyledWriter@Json@@6B@			; Json::StyledWriter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVStyledWriter@Json@@@8			; Json::StyledWriter `RTTI Type Descriptor'
PUBLIC	??_R3StyledWriter@Json@@8			; Json::StyledWriter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StyledWriter@Json@@8			; Json::StyledWriter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StyledWriter@Json@@8		; Json::StyledWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ValueAllocator@Json@@6B@			; Json::ValueAllocator::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVValueAllocator@Json@@@8			; Json::ValueAllocator `RTTI Type Descriptor'
PUBLIC	??_R3ValueAllocator@Json@@8			; Json::ValueAllocator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ValueAllocator@Json@@8			; Json::ValueAllocator::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ValueAllocator@Json@@8		; Json::ValueAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DefaultValueAllocator@Json@@6B@		; Json::DefaultValueAllocator::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDefaultValueAllocator@Json@@@8		; Json::DefaultValueAllocator `RTTI Type Descriptor'
PUBLIC	??_R3DefaultValueAllocator@Json@@8		; Json::DefaultValueAllocator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DefaultValueAllocator@Json@@8		; Json::DefaultValueAllocator::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DefaultValueAllocator@Json@@8	; Json::DefaultValueAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@41dfffffffc00000
PUBLIC	__real@41efffffffe00000
PUBLIC	__real@c1e0000000000000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	___std_terminate:PROC
EXTRN	__imp___invalid_parameter_noinfo_noreturn:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp__memmove:PROC
EXTRN	__imp__strchr:PROC
EXTRN	__imp____std_exception_copy:PROC
EXTRN	__imp____std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	__imp_?_Xbad_alloc@std@@YAXXZ:PROC
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
EXTRN	__imp_?_Xout_of_range@std@@YAXPBD@Z:PROC
EXTRN	??_Eruntime_error@std@@UAEPAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
EXTRN	??_EValueAllocator@Json@@UAEPAXI@Z:PROC		; Json::ValueAllocator::`vector deleting destructor'
EXTRN	??1Writer@Json@@UAE@XZ:PROC			; Json::Writer::~Writer
EXTRN	??0StyledWriter@Json@@QAE@XZ:PROC		; Json::StyledWriter::StyledWriter
EXTRN	?write@StyledWriter@Json@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVValue@2@@Z:PROC ; Json::StyledWriter::write
EXTRN	??_EStyledWriter@Json@@UAEPAXI@Z:PROC		; Json::StyledWriter::`vector deleting destructor'
EXTRN	??_EDefaultValueAllocator@Json@@UAEPAXI@Z:PROC	; Json::DefaultValueAllocator::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__dtoui3:PROC
EXTRN	_memcpy:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
_BSS	SEGMENT
?null@Value@Json@@2V12@B DB 010H DUP (?)		; Json::Value::null
_BSS	ENDS
;	COMDAT ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA
_BSS	SEGMENT
?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA DD 01H DUP (?) ; TSS0<`template-parameter-2',Json::alueAllocator,Json::AAAPAVValueAllocator,void,int, ?? &>
_BSS	ENDS
_BSS	SEGMENT
?dummyValueAllocatorInitializer@Json@@3UDummyValueAllocatorInitializer@1@A DB 01H DUP (?) ; Json::dummyValueAllocatorInitializer
_BSS	ENDS
CRT$XCU	SEGMENT
??null$initializer$@Value@Json@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?null@Value@Json@@2V12@B@@YAXXZ ; ??null$initializer$@Value@Json@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@c1e0000000000000
CONST	SEGMENT
__real@c1e0000000000000 DQ 0c1e0000000000000r	; -2.14748e+09
CONST	ENDS
;	COMDAT __real@41efffffffe00000
CONST	SEGMENT
__real@41efffffffe00000 DQ 041efffffffe00000r	; 4.29497e+09
CONST	ENDS
;	COMDAT __real@41dfffffffc00000
CONST	SEGMENT
__real@41dfffffffc00000 DQ 041dfffffffc00000r	; 2.14748e+09
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@DefaultValueAllocator@Json@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DefaultValueAllocator@Json@@8 DD FLAT:??_R0?AVDefaultValueAllocator@Json@@@8 ; Json::DefaultValueAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DefaultValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT ??_R2DefaultValueAllocator@Json@@8
rdata$r	SEGMENT
??_R2DefaultValueAllocator@Json@@8 DD FLAT:??_R1A@?0A@EA@DefaultValueAllocator@Json@@8 ; Json::DefaultValueAllocator::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT ??_R3DefaultValueAllocator@Json@@8
rdata$r	SEGMENT
??_R3DefaultValueAllocator@Json@@8 DD 00H		; Json::DefaultValueAllocator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2DefaultValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDefaultValueAllocator@Json@@@8
data$r	SEGMENT
??_R0?AVDefaultValueAllocator@Json@@@8 DD FLAT:??_7type_info@@6B@ ; Json::DefaultValueAllocator `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDefaultValueAllocator@Json@@', 00H
data$r	ENDS
;	COMDAT ??_R4DefaultValueAllocator@Json@@6B@
rdata$r	SEGMENT
??_R4DefaultValueAllocator@Json@@6B@ DD 00H		; Json::DefaultValueAllocator::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDefaultValueAllocator@Json@@@8
	DD	FLAT:??_R3DefaultValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ValueAllocator@Json@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ValueAllocator@Json@@8 DD FLAT:??_R0?AVValueAllocator@Json@@@8 ; Json::ValueAllocator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT ??_R2ValueAllocator@Json@@8
rdata$r	SEGMENT
??_R2ValueAllocator@Json@@8 DD FLAT:??_R1A@?0A@EA@ValueAllocator@Json@@8 ; Json::ValueAllocator::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ValueAllocator@Json@@8
rdata$r	SEGMENT
??_R3ValueAllocator@Json@@8 DD 00H			; Json::ValueAllocator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVValueAllocator@Json@@@8
data$r	SEGMENT
??_R0?AVValueAllocator@Json@@@8 DD FLAT:??_7type_info@@6B@ ; Json::ValueAllocator `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVValueAllocator@Json@@', 00H
data$r	ENDS
;	COMDAT ??_R4ValueAllocator@Json@@6B@
rdata$r	SEGMENT
??_R4ValueAllocator@Json@@6B@ DD 00H			; Json::ValueAllocator::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVValueAllocator@Json@@@8
	DD	FLAT:??_R3ValueAllocator@Json@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@StyledWriter@Json@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StyledWriter@Json@@8 DD FLAT:??_R0?AVStyledWriter@Json@@@8 ; Json::StyledWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StyledWriter@Json@@8
rdata$r	ENDS
;	COMDAT ??_R2StyledWriter@Json@@8
rdata$r	SEGMENT
??_R2StyledWriter@Json@@8 DD FLAT:??_R1A@?0A@EA@StyledWriter@Json@@8 ; Json::StyledWriter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Writer@Json@@8
rdata$r	ENDS
;	COMDAT ??_R3StyledWriter@Json@@8
rdata$r	SEGMENT
??_R3StyledWriter@Json@@8 DD 00H			; Json::StyledWriter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2StyledWriter@Json@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStyledWriter@Json@@@8
data$r	SEGMENT
??_R0?AVStyledWriter@Json@@@8 DD FLAT:??_7type_info@@6B@ ; Json::StyledWriter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStyledWriter@Json@@', 00H
data$r	ENDS
;	COMDAT ??_R4StyledWriter@Json@@6B@
rdata$r	SEGMENT
??_R4StyledWriter@Json@@6B@ DD 00H			; Json::StyledWriter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVStyledWriter@Json@@@8
	DD	FLAT:??_R3StyledWriter@Json@@8
rdata$r	ENDS
;	COMDAT ??_R2Writer@Json@@8
rdata$r	SEGMENT
??_R2Writer@Json@@8 DD FLAT:??_R1A@?0A@EA@Writer@Json@@8 ; Json::Writer::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Writer@Json@@8
rdata$r	SEGMENT
??_R3Writer@Json@@8 DD 00H				; Json::Writer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Writer@Json@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVWriter@Json@@@8
data$r	SEGMENT
??_R0?AVWriter@Json@@@8 DD FLAT:??_7type_info@@6B@	; Json::Writer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVWriter@Json@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Writer@Json@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Writer@Json@@8 DD FLAT:??_R0?AVWriter@Json@@@8 ; Json::Writer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Writer@Json@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD FLAT:??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD FLAT:??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 00H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_02GLFAOOJA@?$FL?4?$AA@
CONST	SEGMENT
??_C@_02GLFAOOJA@?$FL?4?$AA@ DB '[.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@ICOHKFIF@Type?5is?5not?5convertible?5to?5doubl@
CONST	SEGMENT
??_C@_0CC@ICOHKFIF@Type?5is?5not?5convertible?5to?5doubl@ DB 'Type is not'
	DB	' convertible to double', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LEFAEJPN@Type?5is?5not?5convertible?5to?5uint?$AA@
CONST	SEGMENT
??_C@_0CA@LEFAEJPN@Type?5is?5not?5convertible?5to?5uint?$AA@ DB 'Type is '
	DB	'not convertible to uint', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@PGCLDEBG@Real?5out?5of?5unsigned?5integer?5ran@
CONST	SEGMENT
??_C@_0CD@PGCLDEBG@Real?5out?5of?5unsigned?5integer?5ran@ DB 'Real out of'
	DB	' unsigned integer range', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@NAHIGMFE@Negative?5integer?5can?5not?5be?5conv@
CONST	SEGMENT
??_C@_0DK@NAHIGMFE@Negative?5integer?5can?5not?5be?5conv@ DB 'Negative in'
	DB	'teger can not be converted to unsigned integer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KDDCHLKA@Type?5is?5not?5convertible?5to?5int?$AA@
CONST	SEGMENT
??_C@_0BP@KDDCHLKA@Type?5is?5not?5convertible?5to?5int?$AA@ DB 'Type is n'
	DB	'ot convertible to int', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@PBEICPFN@Real?5out?5of?5signed?5integer?5range@
CONST	SEGMENT
??_C@_0CB@PBEICPFN@Real?5out?5of?5signed?5integer?5range@ DB 'Real out of'
	DB	' signed integer range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MKMAPPKF@integer?5out?5of?5signed?5integer?5ra@
CONST	SEGMENT
??_C@_0CE@MKMAPPKF@integer?5out?5of?5signed?5integer?5ra@ DB 'integer out'
	DB	' of signed integer range', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BNBMBIGA@Type?5is?5not?5convertible?5to?5strin@
CONST	SEGMENT
??_C@_0CC@BNBMBIGA@Type?5is?5not?5convertible?5to?5strin@ DB 'Type is not'
	DB	' convertible to string', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DKGNIMPN@Comments?5must?5start?5with?5?1?$AA@
CONST	SEGMENT
??_C@_0BL@DKGNIMPN@Comments?5must?5start?5with?5?1?$AA@ DB 'Comments must'
	DB	' start with /', 00H				; `string'
CONST	ENDS
;	COMDAT ?valueAllocator@?1??0Json@@YAAAPAVValueAllocator@1@XZ@4PAV21@A
_DATA	SEGMENT
?valueAllocator@?1??0Json@@YAAAPAVValueAllocator@1@XZ@4PAV21@A DD FLAT:?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A ; `Json::valueAllocator'::`2'::valueAllocator
_DATA	ENDS
;	COMDAT ?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A
_DATA	SEGMENT
?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A DD FLAT:??_7DefaultValueAllocator@Json@@6B@ ; `Json::valueAllocator'::`2'::defaultAllocator
_DATA	ENDS
;	COMDAT ??_7DefaultValueAllocator@Json@@6B@
CONST	SEGMENT
??_7DefaultValueAllocator@Json@@6B@ DD FLAT:??_R4DefaultValueAllocator@Json@@6B@ ; Json::DefaultValueAllocator::`vftable'
	DD	FLAT:??_EDefaultValueAllocator@Json@@UAEPAXI@Z
	DD	FLAT:?makeMemberName@DefaultValueAllocator@Json@@UAEPADPBD@Z
	DD	FLAT:?releaseMemberName@DefaultValueAllocator@Json@@UAEXPAD@Z
	DD	FLAT:?duplicateStringValue@DefaultValueAllocator@Json@@UAEPADPBDI@Z
	DD	FLAT:?releaseStringValue@DefaultValueAllocator@Json@@UAEXPAD@Z
CONST	ENDS
;	COMDAT ??_7StyledWriter@Json@@6B@
CONST	SEGMENT
??_7StyledWriter@Json@@6B@ DD FLAT:??_R4StyledWriter@Json@@6B@ ; Json::StyledWriter::`vftable'
	DD	FLAT:??_EStyledWriter@Json@@UAEPAXI@Z
	DD	FLAT:?write@StyledWriter@Json@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVValue@2@@Z
CONST	ENDS
;	COMDAT ??_7ValueAllocator@Json@@6B@
CONST	SEGMENT
??_7ValueAllocator@Json@@6B@ DD FLAT:??_R4ValueAllocator@Json@@6B@ ; Json::ValueAllocator::`vftable'
	DD	FLAT:??_EValueAllocator@Json@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT
??_C@_04LOAJBDKD@true?$AA@ DB 'true', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT
??_C@_05LAPONLG@false?$AA@ DB 'false', 00H		; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0runtime_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
data$r	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVruntime_error@std@@
xdata$x	SEGMENT
__CTA2?AVruntime_error@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVruntime_error@std@@
xdata$x	SEGMENT
__TI2?AVruntime_error@std@@ DD 00H
	DD	FLAT:??1runtime_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVruntime_error@std@@
xdata$x	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DD FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DD	FLAT:??_Eruntime_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception?$AA@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception?$AA@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z$2
__ehfuncinfo$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU31@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU31@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU31@@Z$3
__ehfuncinfo$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU31@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU31@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_nohint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z$42 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_nohint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z$0
__unwindtable$??$_Insert_nohint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert_nohint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_nohint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z$42
__ehfuncinfo$??$_Insert_nohint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert_nohint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_nohint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Insert_at@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Insert_at@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z$17
__ehfuncinfo$??$_Insert_at@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Insert_at@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z$4
__ehfuncinfo$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z$0
__unwindtable$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z$6
__ehfuncinfo$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@VPathArgument@Json@@ABV12@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@ABV23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@VPathArgument@Json@@ABV12@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@ABV23@@Z$0
__ehfuncinfo$??$construct@VPathArgument@Json@@ABV12@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@ABV23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@VPathArgument@Json@@ABV12@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@ABV23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@VPathArgument@Json@@AAV12@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@VPathArgument@Json@@AAV12@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z$0
__ehfuncinfo$??$construct@VPathArgument@Json@@AAV12@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@VPathArgument@Json@@AAV12@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z$33
__ehfuncinfo$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_hint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z$113 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_hint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z$0
__unwindtable$??$_Insert_hint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert_hint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_hint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z$113
__ehfuncinfo$??$_Insert_hint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert_hint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_hint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z$30 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z$0
__tryblocktable$??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 00H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z$30
__unwindtable$??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z$9
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z$11
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@VPathArgument@Json@@ABV12@@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@VPathArgument@Json@@@1@PAVPathArgument@Json@@ABV34@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@VPathArgument@Json@@ABV12@@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@VPathArgument@Json@@@1@PAVPathArgument@Json@@ABV34@@Z$1
__ehfuncinfo$??$construct@VPathArgument@Json@@ABV12@@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@VPathArgument@Json@@@1@PAVPathArgument@Json@@ABV34@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@VPathArgument@Json@@ABV12@@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@VPathArgument@Json@@@1@PAVPathArgument@Json@@ABV34@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@VPathArgument@Json@@AAV12@@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@VPathArgument@Json@@@1@PAVPathArgument@Json@@AAV34@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@VPathArgument@Json@@AAV12@@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@VPathArgument@Json@@@1@PAVPathArgument@Json@@AAV34@@Z$1
__ehfuncinfo$??$construct@VPathArgument@Json@@AAV12@@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@VPathArgument@Json@@@1@PAVPathArgument@Json@@AAV34@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@VPathArgument@Json@@AAV12@@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@VPathArgument@Json@@@1@PAVPathArgument@Json@@AAV34@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z$33
__ehfuncinfo$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z$29 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z$0
__tryblocktable$??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z$29
__unwindtable$??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@VPathArgument@Json@@ABV12@@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@ABV23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@VPathArgument@Json@@ABV12@@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@ABV23@@Z$2
__ehfuncinfo$??$construct@VPathArgument@Json@@ABV12@@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@ABV23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@VPathArgument@Json@@ABV12@@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@ABV23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@VPathArgument@Json@@AAV12@@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@VPathArgument@Json@@AAV12@@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z$2
__ehfuncinfo$??$construct@VPathArgument@Json@@AAV12@@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@VPathArgument@Json@@AAV12@@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z$33
__ehfuncinfo$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0AAVCZString@Value@Json@@ABV12@X$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAVCZString@Value@Json@@ABV34@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0AAVCZString@Value@Json@@ABV12@X$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAVCZString@Value@Json@@ABV34@@Z$0
__ehfuncinfo$??$?0AAVCZString@Value@Json@@ABV12@X$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAVCZString@Value@Json@@ABV34@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0AAVCZString@Value@Json@@ABV12@X$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAVCZString@Value@Json@@ABV34@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAEPAXI@Z$32
__ehfuncinfo$??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ$31
__ehfuncinfo$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@ABU01@@Z$0
__ehfuncinfo$??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@ABU01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z$53 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z$53
__ehfuncinfo$?_Reallocate@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?index@ValueIteratorBase@Json@@QBEIXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?index@ValueIteratorBase@Json@@QBEIXZ$1
__ehfuncinfo$?index@ValueIteratorBase@Json@@QBEIXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?index@ValueIteratorBase@Json@@QBEIXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ$4
__ehfuncinfo$?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAEPAXI@Z$1
__ehfuncinfo$??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ$0
__ehfuncinfo$??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z$17
__ehfuncinfo$?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z$17
__ehfuncinfo$?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z$16
__ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z$57
__ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z$53 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z$53
__ehfuncinfo$?_Reallocate@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXABVPathArgument@Json@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXABVPathArgument@Json@@@Z$33
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXABVPathArgument@Json@@@Z$89
__ehfuncinfo$?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXABVPathArgument@Json@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXABVPathArgument@Json@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z$2
__ehfuncinfo$?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?resolve@Path@Json@@QBEABVValue@2@ABV32@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?resolve@Path@Json@@QBEABVValue@2@ABV32@@Z$42
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?resolve@Path@Json@@QBEABVValue@2@ABV32@@Z$43
__ehfuncinfo$?resolve@Path@Json@@QBEABVValue@2@ABV32@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?resolve@Path@Json@@QBEABVValue@2@ABV32@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Path@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVPathArgument@1@1111@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Path@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVPathArgument@1@1111@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0Path@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVPathArgument@1@1111@Z$1
__ehfuncinfo$??0Path@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVPathArgument@1@1111@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0Path@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVPathArgument@1@1111@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_ECommentInfo@Value@Json@@QAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_ECommentInfo@Value@Json@@QAEPAXI@Z$0
__ehfuncinfo$??_ECommentInfo@Value@Json@@QAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_ECommentInfo@Value@Json@@QAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CommentInfo@Value@Json@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z$15
	DD	02H
	DD	FLAT:__unwindfunclet$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z$22
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z$23
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?toStyledString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?toStyledString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0
__ehfuncinfo$?toStyledString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?toStyledString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?setComment@Value@Json@@QAEXPBDW4CommentPlacement@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?setComment@Value@Json@@QAEXPBDW4CommentPlacement@2@@Z$0
__ehfuncinfo$?setComment@Value@Json@@QAEXPBDW4CommentPlacement@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?setComment@Value@Json@@QAEXPBDW4CommentPlacement@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ$2
__ehfuncinfo$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?removeMember@Value@Json@@QAE?AV12@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?removeMember@Value@Json@@QAE?AV12@PBD@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?removeMember@Value@Json@@QAE?AV12@PBD@Z$32
	DD	00H
	DD	FLAT:__unwindfunclet$?removeMember@Value@Json@@QAE?AV12@PBD@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?removeMember@Value@Json@@QAE?AV12@PBD@Z$34
__ehfuncinfo$?removeMember@Value@Json@@QAE?AV12@PBD@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?removeMember@Value@Json@@QAE?AV12@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??AValue@Json@@QBEABV01@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??AValue@Json@@QBEABV01@PBD@Z$30
__ehfuncinfo$??AValue@Json@@QBEABV01@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??AValue@Json@@QBEABV01@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??AValue@Json@@QBEABV01@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??AValue@Json@@QBEABV01@I@Z$30
__ehfuncinfo$??AValue@Json@@QBEABV01@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??AValue@Json@@QBEABV01@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??AValue@Json@@QAEAAV01@I@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??AValue@Json@@QAEAAV01@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??AValue@Json@@QAEAAV01@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??AValue@Json@@QAEAAV01@I@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??AValue@Json@@QAEAAV01@I@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??AValue@Json@@QAEAAV01@I@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$??AValue@Json@@QAEAAV01@I@Z$15
	DD	02H
	DD	FLAT:__unwindfunclet$??AValue@Json@@QAEAAV01@I@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??AValue@Json@@QAEAAV01@I@Z$22
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??AValue@Json@@QAEAAV01@I@Z$23
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?resize@Value@Json@@QAEXI@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?resize@Value@Json@@QAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?resize@Value@Json@@QAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?resize@Value@Json@@QAEXI@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?resize@Value@Json@@QAEXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?resize@Value@Json@@QAEXI@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?resize@Value@Json@@QAEXI@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?resize@Value@Json@@QAEXI@Z$45
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?clear@Value@Json@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@Value@Json@@QAEXXZ$0
__ehfuncinfo$?clear@Value@Json@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?clear@Value@Json@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Value@Json@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Value@Json@@QAE@XZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1Value@Json@@QAE@XZ$39
	DD	01H
	DD	00H
__ehfuncinfo$??1Value@Json@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1Value@Json@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Value@Json@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Value@Json@@QAE@ABV01@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0Value@Json@@QAE@ABV01@@Z$1
__ehfuncinfo$??0Value@Json@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0Value@Json@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Value@Json@@QAE@W4ValueType@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Value@Json@@QAE@W4ValueType@1@@Z$0
__ehfuncinfo$??0Value@Json@@QAE@W4ValueType@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Value@Json@@QAE@W4ValueType@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4CZString@Value@Json@@QAEAAV012@ABV012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4CZString@Value@Json@@QAEAAV012@ABV012@@Z$9
__ehfuncinfo$??4CZString@Value@Json@@QAEAAV012@ABV012@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4CZString@Value@Json@@QAEAAV012@ABV012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CZString@Value@Json@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$111 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$110 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$110
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$111
xdata$x	ENDS
CRT$XCU	SEGMENT
?dummyValueAllocatorInitializer$initializer$@Json@@3P6AXXZA DD FLAT:??__EdummyValueAllocatorInitializer@Json@@YAXXZ ; Json::dummyValueAllocatorInitializer$initializer$
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$?RABU?$pair@$$CBVCZString@Value@Json@@V23@@std@@ABU01@@?$equal_to@X@std@@QBE_NABU?$pair@$$CBVCZString@Value@Json@@V23@@1@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?RABU?$pair@$$CBVCZString@Value@Json@@V23@@std@@ABU01@@?$equal_to@X@std@@QBE_NABU?$pair@$$CBVCZString@Value@Json@@V23@@1@0@Z PROC ; std::equal_to<void>::operator()<std::pair<Json::Value::CZString const ,Json::Value> const &,std::pair<Json::Value::CZString const ,Json::Value> const &>, COMDAT
; _this$ = ecx

; 305  : 		{	// transparently apply operator== to operands

	push	ebp
	mov	ebp, esp

; 306  : 		return (static_cast<_Ty1&&>(_Left)

	push	DWORD PTR __Right$[ebp]
	push	DWORD PTR __Left$[ebp]
	call	??$?8$$CBVCZString@Value@Json@@V12@@std@@YA_NABU?$pair@$$CBVCZString@Value@Json@@V23@@0@0@Z ; std::operator==<Json::Value::CZString const ,Json::Value>
	add	esp, 8

; 307  : 			== static_cast<_Ty2&&>(_Right));
; 308  : 		}

	pop	ebp
	ret	8
??$?RABU?$pair@$$CBVCZString@Value@Json@@V23@@std@@ABU01@@?$equal_to@X@std@@QBE_NABU?$pair@$$CBVCZString@Value@Json@@V23@@1@0@Z ENDP ; std::equal_to<void>::operator()<std::pair<Json::Value::CZString const ,Json::Value> const &,std::pair<Json::Value::CZString const ,Json::Value> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?8$$CBVCZString@Value@Json@@V12@@std@@YA_NABU?$pair@$$CBVCZString@Value@Json@@V23@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8$$CBVCZString@Value@Json@@V12@@std@@YA_NABU?$pair@$$CBVCZString@Value@Json@@V23@@0@0@Z PROC ; std::operator==<Json::Value::CZString const ,Json::Value>, COMDAT

; 272  : 	{	// test for pair equality

	push	ebp
	mov	ebp, esp
	push	esi
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 228  :    if ( cstr_ )

	mov	esi, DWORD PTR __Left$[ebp]
	push	edi

; 229  :       return strcmp( cstr_, other.cstr_ ) == 0;

	mov	edi, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN6@operator
	mov	ecx, DWORD PTR [edi]
$LL233@operator:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN234@operator
	test	dl, dl
	je	SHORT $LN235@operator
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN234@operator
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL233@operator
$LN235@operator:
	xor	eax, eax
	test	eax, eax
	jmp	SHORT $LN237@operator
$LN234@operator:
	sbb	eax, eax
	or	eax, 1
	test	eax, eax
	jmp	SHORT $LN237@operator
$LN6@operator:

; 230  :    return index_ == other.index_;

	mov	eax, DWORD PTR [esi+4]
	cmp	eax, DWORD PTR [edi+4]
$LN237@operator:
	sete	al
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 273  : 	return (_Left.first == _Right.first && _Left.second == _Right.second);

	test	al, al
	je	SHORT $LN3@operator
	lea	eax, DWORD PTR [edi+8]
	push	eax
	lea	ecx, DWORD PTR [esi+8]
	call	??8Value@Json@@QBE_NABV01@@Z		; Json::Value::operator==
	test	al, al
	je	SHORT $LN3@operator
	pop	edi
	mov	al, 1
	pop	esi

; 274  : 	}

	pop	ebp
	ret	0
$LN3@operator:
	pop	edi

; 273  : 	return (_Left.first == _Right.first && _Left.second == _Right.second);

	xor	al, al
	pop	esi

; 274  : 	}

	pop	ebp
	ret	0
??$?8$$CBVCZString@Value@Json@@V12@@std@@YA_NABU?$pair@$$CBVCZString@Value@Json@@V23@@0@0@Z ENDP ; std::operator==<Json::Value::CZString const ,Json::Value>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Equal_unchecked1@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$equal_to@X@2@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@00AAU?$equal_to@X@0@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
__Pred$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Equal_unchecked1@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$equal_to@X@2@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@00AAU?$equal_to@X@0@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Equal_unchecked1<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::equal_to<void> >, COMDAT

; 2917 : 	{	// compare [_First1, _Last1) to [_First2, ...) using _Pred, no special optimization

	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 113  : 		return (_Ptr == _Right._Ptr);

	mov	eax, DWORD PTR __First1$[ebp]
	push	ebx
	push	esi
	cmp	eax, DWORD PTR __Last1$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2918 : 	for (; _First1 != _Last1; ++_First1, (void)++_First2)

	je	$LN3@Equal_unch
	mov	ecx, DWORD PTR __First2$[ebp]
$LL45@Equal_unch:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 228  :    if ( cstr_ )

	mov	edx, DWORD PTR [eax+16]
	test	edx, edx
	je	SHORT $LN90@Equal_unch

; 229  :       return strcmp( cstr_, other.cstr_ ) == 0;

	mov	esi, DWORD PTR [ecx+16]
	npad	2
$LL256@Equal_unch:
	mov	bl, BYTE PTR [edx]
	cmp	bl, BYTE PTR [esi]
	jne	SHORT $LN257@Equal_unch
	test	bl, bl
	je	SHORT $LN258@Equal_unch
	mov	bl, BYTE PTR [edx+1]
	cmp	bl, BYTE PTR [esi+1]
	jne	SHORT $LN257@Equal_unch
	add	edx, 2
	add	esi, 2
	test	bl, bl
	jne	SHORT $LL256@Equal_unch
$LN258@Equal_unch:
	xor	edx, edx
	test	edx, edx
	jmp	SHORT $LN262@Equal_unch
$LN257@Equal_unch:
	sbb	edx, edx
	or	edx, 1
	test	edx, edx
	jmp	SHORT $LN262@Equal_unch
$LN90@Equal_unch:

; 230  :    return index_ == other.index_;

	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+20]
$LN262@Equal_unch:
	sete	dl
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 273  : 	return (_Left.first == _Right.first && _Left.second == _Right.second);

	test	dl, dl
	je	$LN238@Equal_unch
	add	ecx, 24					; 00000018H
	push	ecx
	lea	ecx, DWORD PTR [eax+24]
	call	??8Value@Json@@QBE_NABV01@@Z		; Json::Value::operator==
	test	al, al
	je	$LN238@Equal_unch
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 60   : 		if (_Mytree::_Isnil(_Ptr))

	mov	eax, DWORD PTR __First1$[ebp]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN13@Equal_unch

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	ecx, DWORD PTR [eax+8]

; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

	cmp	BYTE PTR [ecx+13], 0
	jne	SHORT $LN235@Equal_unch

; 63   : 			_Ptr = _Mytree::_Min(

	mov	eax, ecx

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	ecx, DWORD PTR [eax]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [ecx+13], 0
	jne	SHORT $LN25@Equal_unch
	npad	4
$LL24@Equal_unch:

; 616  : 			_Pnode = _Left(_Pnode);

	mov	eax, ecx

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	ecx, DWORD PTR [eax]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [ecx+13], 0
	je	SHORT $LL24@Equal_unch

; 65   : 		else

	jmp	SHORT $LN25@Equal_unch
$LN235@Equal_unch:

; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

	mov	ecx, DWORD PTR [eax+4]
	cmp	BYTE PTR [ecx+13], 0
	jne	SHORT $LN260@Equal_unch
$LL8@Equal_unch:
	cmp	eax, DWORD PTR [ecx+8]
	jne	SHORT $LN260@Equal_unch

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

	mov	eax, ecx
	mov	DWORD PTR __First1$[ebp], eax
	mov	ecx, DWORD PTR [ecx+4]
	cmp	BYTE PTR [ecx+13], 0
	je	SHORT $LL8@Equal_unch
$LN260@Equal_unch:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

	mov	eax, ecx
$LN25@Equal_unch:
	mov	DWORD PTR __First1$[ebp], eax
$LN13@Equal_unch:

; 60   : 		if (_Mytree::_Isnil(_Ptr))

	mov	ecx, DWORD PTR __First2$[ebp]
	cmp	BYTE PTR [ecx+13], 0
	jne	SHORT $LN243@Equal_unch

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	edx, DWORD PTR [ecx+8]

; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

	cmp	BYTE PTR [edx+13], 0
	jne	SHORT $LN237@Equal_unch

; 63   : 			_Ptr = _Mytree::_Min(

	mov	ecx, edx

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	edx, DWORD PTR [ecx]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [edx+13], 0
	jne	SHORT $LN57@Equal_unch
	npad	7
$LL56@Equal_unch:

; 616  : 			_Pnode = _Left(_Pnode);

	mov	ecx, edx

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	edx, DWORD PTR [ecx]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [edx+13], 0
	je	SHORT $LL56@Equal_unch

; 65   : 		else

	jmp	SHORT $LN57@Equal_unch
$LN237@Equal_unch:

; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

	mov	edx, DWORD PTR [ecx+4]
	cmp	BYTE PTR [edx+13], 0
	jne	SHORT $LN261@Equal_unch
$LL40@Equal_unch:
	cmp	ecx, DWORD PTR [edx+8]
	jne	SHORT $LN261@Equal_unch

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

	mov	ecx, edx
	mov	DWORD PTR __First2$[ebp], ecx
	mov	edx, DWORD PTR [edx+4]
	cmp	BYTE PTR [edx+13], 0
	je	SHORT $LL40@Equal_unch
$LN261@Equal_unch:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

	mov	ecx, edx
$LN57@Equal_unch:
	mov	DWORD PTR __First2$[ebp], ecx
$LN243@Equal_unch:

; 113  : 		return (_Ptr == _Right._Ptr);

	cmp	eax, DWORD PTR __Last1$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2918 : 	for (; _First1 != _Last1; ++_First1, (void)++_First2)

	jne	$LL45@Equal_unch
$LN3@Equal_unch:
	pop	esi

; 2921 : 	return (true);

	mov	al, 1
	pop	ebx

; 2922 : 	}

	pop	ebp
	ret	0
$LN238@Equal_unch:
	pop	esi

; 2919 : 		if (!_Pred(*_First1, *_First2))
; 2920 : 			return (false);

	xor	al, al
	pop	ebx

; 2922 : 	}

	pop	ebp
	ret	0
??$_Equal_unchecked1@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$equal_to@X@2@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@00AAU?$equal_to@X@0@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Equal_unchecked1<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::equal_to<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Equal_memcmp_is_safe@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$equal_to@X@2@@std@@YA?AU?$integral_constant@_N$0A@@0@ABV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@0ABU?$equal_to@X@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Equal_memcmp_is_safe@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$equal_to@X@2@@std@@YA?AU?$integral_constant@_N$0A@@0@ABV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@0ABU?$equal_to@X@0@@Z PROC ; std::_Equal_memcmp_is_safe<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::equal_to<void> >, COMDAT

; 2897 : 	return {};

	xor	al, al

; 2898 : 	}

	ret	0
??$_Equal_memcmp_is_safe@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$equal_to@X@2@@std@@YA?AU?$integral_constant@_N$0A@@0@ABV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@0ABU?$equal_to@X@0@@Z ENDP ; std::_Equal_memcmp_is_safe<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::equal_to<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@_N@std@@YA$$QA_NAA_N@Z PROC			; std::forward<bool>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

	pop	ebp
	ret	0
??$forward@_N@std@@YA$$QA_NAA_N@Z ENDP			; std::forward<bool>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

	pop	ebp
	ret	0
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z PROC ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::construct<std::pair<Json::Value::CZString const ,Json::Value>,std::pair<Json::Value::CZString const ,Json::Value> &>, COMDAT
; _this$ = ecx

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	edi, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR $T2[ebp], edi
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	edi, edi
	je	SHORT $LN3@construct
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 188  : : cstr_( other.index_ != noDuplication &&  other.cstr_ != 0

	mov	esi, DWORD PTR _<_Args_0>$[ebp]
	cmp	DWORD PTR [esi+4], 0
	je	SHORT $LN17@construct
	cmp	DWORD PTR [esi], 0
	je	SHORT $LN17@construct
	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+4]
	jmp	SHORT $LN18@construct
$LN17@construct:
	mov	eax, DWORD PTR [esi]
$LN18@construct:
	mov	DWORD PTR [edi], eax

; 189  :                 ?  valueAllocator()->makeMemberName( other.cstr_ )
; 190  :                 : other.cstr_ )
; 191  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	DWORD PTR [esi], 0
	je	SHORT $LN19@construct
	xor	eax, eax
	cmp	DWORD PTR [esi+4], eax
	setne	al
	jmp	SHORT $LN20@construct
$LN19@construct:
	mov	eax, DWORD PTR [esi+4]
$LN20@construct:
	mov	DWORD PTR [edi+4], eax

	lea	eax, DWORD PTR [esi+8]
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	push	eax
	lea	ecx, DWORD PTR [edi+8]
	call	??0Value@Json@@QAE@ABV01@@Z		; Json::Value::Value
$LN3@construct:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 738  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z$2:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1CZString@Value@Json@@QAE@XZ		; Json::Value::CZString::~CZString
__ehhandler$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::construct<std::pair<Json::Value::CZString const ,Json::Value>,std::pair<Json::Value::CZString const ,Json::Value> &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Equal_unchecked@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$equal_to@X@2@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@00AAU?$equal_to@X@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$_Equal_unchecked@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$equal_to@X@2@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@00AAU?$equal_to@X@0@@Z PROC ; std::_Equal_unchecked<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::equal_to<void> >, COMDAT

; 2941 : 	{	// compare [_First1, _Last1) to [_First2, ...) using _Pred, choose optimization

	push	ebp
	mov	ebp, esp
	push	ecx

; 2897 : 	return {};

	mov	BYTE PTR $T1[ebp], 0

; 2942 : 	return (_Equal_unchecked1(_First1, _Last1, _First2, _Pred,

	push	DWORD PTR $T1[ebp]
	push	DWORD PTR __Pred$[ebp]
	push	DWORD PTR __First2$[ebp]
	push	DWORD PTR __Last1$[ebp]
	push	DWORD PTR __First1$[ebp]
	call	??$_Equal_unchecked1@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$equal_to@X@2@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@00AAU?$equal_to@X@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Equal_unchecked1<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::equal_to<void> >
	add	esp, 20					; 00000014H

; 2943 : 		_Equal_memcmp_is_safe(_First1, _First2, _Pred)));
; 2944 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Equal_unchecked@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$equal_to@X@2@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@00AAU?$equal_to@X@0@@Z ENDP ; std::_Equal_unchecked<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::equal_to<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked_idl0@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YA?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Src$ = 12						; size = 4
??$_Unchecked_idl0@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YA?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@@Z PROC ; std::_Unchecked_idl0<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > >, COMDAT

; 439  : 	{	// uncheck _Src in IDL == 0 only

	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	DWORD PTR [eax], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 441  : 	}

	pop	ebp
	ret	0
??$_Unchecked_idl0@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YA?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@@Z ENDP ; std::_Unchecked_idl0<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$?RABU?$pair@$$CBVCZString@Value@Json@@V23@@std@@ABU01@@?$less@X@std@@QBE_NABU?$pair@$$CBVCZString@Value@Json@@V23@@1@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?RABU?$pair@$$CBVCZString@Value@Json@@V23@@std@@ABU01@@?$less@X@std@@QBE_NABU?$pair@$$CBVCZString@Value@Json@@V23@@1@0@Z PROC ; std::less<void>::operator()<std::pair<Json::Value::CZString const ,Json::Value> const &,std::pair<Json::Value::CZString const ,Json::Value> const &>, COMDAT
; _this$ = ecx

; 322  : 		{	// transparently apply operator< to operands

	push	ebp
	mov	ebp, esp

; 323  : 		return (static_cast<_Ty1&&>(_Left)

	push	DWORD PTR __Right$[ebp]
	push	DWORD PTR __Left$[ebp]
	call	??$?M$$CBVCZString@Value@Json@@V12@@std@@YA_NABU?$pair@$$CBVCZString@Value@Json@@V23@@0@0@Z ; std::operator<<Json::Value::CZString const ,Json::Value>
	add	esp, 8

; 324  : 			< static_cast<_Ty2&&>(_Right));
; 325  : 		}

	pop	ebp
	ret	8
??$?RABU?$pair@$$CBVCZString@Value@Json@@V23@@std@@ABU01@@?$less@X@std@@QBE_NABU?$pair@$$CBVCZString@Value@Json@@V23@@1@0@Z ENDP ; std::less<void>::operator()<std::pair<Json::Value::CZString const ,Json::Value> const &,std::pair<Json::Value::CZString const ,Json::Value> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?M$$CBVCZString@Value@Json@@V12@@std@@YA_NABU?$pair@$$CBVCZString@Value@Json@@V23@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?M$$CBVCZString@Value@Json@@V12@@std@@YA_NABU?$pair@$$CBVCZString@Value@Json@@V23@@0@0@Z PROC ; std::operator<<Json::Value::CZString const ,Json::Value>, COMDAT

; 288  : 	{	// test if _Left < _Right for pairs

	push	ebp
	mov	ebp, esp
	push	esi
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    if ( cstr_ )

	mov	esi, DWORD PTR __Left$[ebp]
	push	edi

; 221  :       return strcmp( cstr_, other.cstr_ ) < 0;

	mov	edi, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN7@operator
	mov	ecx, DWORD PTR [edi]
$LL195@operator:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN196@operator
	test	dl, dl
	je	SHORT $LN197@operator
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN196@operator
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL195@operator
$LN197@operator:
	xor	eax, eax
	test	eax, eax
	sets	al
	jmp	SHORT $LN6@operator
$LN196@operator:
	sbb	eax, eax
	or	eax, 1
	test	eax, eax
	sets	al
	jmp	SHORT $LN6@operator
$LN7@operator:

; 222  :    return index_ < other.index_;

	mov	eax, DWORD PTR [esi+4]
	cmp	eax, DWORD PTR [edi+4]
	setl	al
$LN6@operator:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 289  : 	return (_Left.first < _Right.first ||

	test	al, al
	jne	SHORT $LN4@operator
	push	esi
	mov	ecx, edi
	call	??MCZString@Value@Json@@QBE_NABV012@@Z	; Json::Value::CZString::operator<
	test	al, al
	jne	SHORT $LN3@operator
	lea	eax, DWORD PTR [edi+8]
	push	eax
	lea	ecx, DWORD PTR [esi+8]
	call	??MValue@Json@@QBE_NABV01@@Z		; Json::Value::operator<
	test	al, al
	jne	SHORT $LN4@operator
$LN3@operator:
	pop	edi
	xor	al, al
	pop	esi

; 290  : 		(!(_Right.first < _Left.first) && _Left.second < _Right.second));
; 291  : 	}

	pop	ebp
	ret	0
$LN4@operator:
	pop	edi

; 289  : 	return (_Left.first < _Right.first ||

	mov	al, 1
	pop	esi

; 290  : 		(!(_Right.first < _Left.first) && _Left.second < _Right.second));
; 291  : 	}

	pop	ebp
	ret	0
??$?M$$CBVCZString@Value@Json@@V12@@std@@YA_NABU?$pair@$$CBVCZString@Value@Json@@V23@@0@0@Z ENDP ; std::operator<<Json::Value::CZString const ,Json::Value>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@0@AAU10@@Z PROC ; std::move<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > > &>, COMDAT

; 1291 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1292 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1293 : 	}

	pop	ebp
	ret	0
??$move@AAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@0@AAU10@@Z ENDP ; std::move<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 743  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 734  : 		return (_Get_data()._Myres);

	mov	esi, DWORD PTR __Ptr$[ebp]

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN13@destroy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN13@destroy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 15			; 0000000fH

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], 0

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN105@destroy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 745  : 		}

	pop	ebp
	ret	4
$LN105@destroy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [esi], 0
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 745  : 		}

	pop	ebp
	ret	4
??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Copy_memmove@PAPBVPathArgument@Json@@PAPBV12@@std@@YAPAPBVPathArgument@Json@@PAPBV12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPBVPathArgument@Json@@PAPBV12@@std@@YAPAPBVPathArgument@Json@@PAPBV12@00@Z PROC ; std::_Copy_memmove<Json::PathArgument const * *,Json::PathArgument const * *>, COMDAT

; 2301 : 	{	// implement copy-like function as memmove

	push	ebp
	mov	ebp, esp

; 2302 : 	const char * const _First_ch = reinterpret_cast<const char *>(_First);
; 2303 : 	const char * const _Last_ch = reinterpret_cast<const char *>(_Last);
; 2304 : 	char * const _Dest_ch = reinterpret_cast<char *>(_Dest);
; 2305 : 	const size_t _Count = _Last_ch - _First_ch;

	mov	eax, DWORD PTR __First$[ebp]
	push	esi

; 2306 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	esi, DWORD PTR __Dest$[ebp]
	push	edi
	mov	edi, DWORD PTR __Last$[ebp]
	sub	edi, eax
	push	edi
	push	eax
	push	esi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH

; 2307 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

	lea	eax, DWORD PTR [edi+esi]
	pop	edi
	pop	esi

; 2308 : 	}

	pop	ebp
	ret	0
??$_Copy_memmove@PAPBVPathArgument@Json@@PAPBV12@@std@@YAPAPBVPathArgument@Json@@PAPBV12@00@Z ENDP ; std::_Copy_memmove<Json::PathArgument const * *,Json::PathArgument const * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@VPathArgument@Json@@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@VPathArgument@Json@@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@@Z PROC ; std::allocator<Json::PathArgument>::destroy<Json::PathArgument>, COMDAT
; _this$ = ecx

; 743  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 734  : 		return (_Get_data()._Myres);

	mov	esi, DWORD PTR __Ptr$[ebp]

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN16@destroy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN16@destroy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 15			; 0000000fH

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], 0

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN108@destroy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 745  : 		}

	pop	ebp
	ret	4
$LN108@destroy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [esi], 0
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 745  : 		}

	pop	ebp
	ret	4
??$destroy@VPathArgument@Json@@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@@Z ENDP ; std::allocator<Json::PathArgument>::destroy<Json::PathArgument>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_NX$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_NX$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > &,bool,void,0>, COMDAT
; _this$ = ecx

; 172  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp

; 170  : 		: first(_STD forward<_Other1>(_Val1)),

	mov	eax, DWORD PTR __Val1$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax

; 171  : 				second(_STD forward<_Other2>(_Val2))

	mov	eax, DWORD PTR __Val2$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx+4], al

; 173  : 		}

	mov	eax, ecx
	pop	ebp
	ret	8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_NX$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > &,bool,void,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_NX$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_NX$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,bool,void,0>, COMDAT
; _this$ = ecx

; 172  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp

; 170  : 		: first(_STD forward<_Other1>(_Val1)),

	mov	eax, DWORD PTR __Val1$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax

; 171  : 				second(_STD forward<_Other2>(_Val2))

	mov	eax, DWORD PTR __Val2$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [ecx+4], al

; 173  : 		}

	mov	eax, ecx
	pop	ebp
	ret	8
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_NX$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,bool,void,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Buynode_if_nil@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PAU21@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
_TEXT	SEGMENT
__Node$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Buynode_if_nil@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PAU21@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode_if_nil<std::pair<Json::Value::CZString const ,Json::Value> &>, COMDAT
; _this$ = ecx

; 1629 : 		{	// node exists, just return it

	push	ebp
	mov	ebp, esp

; 1630 : 		return (_Node);

	mov	eax, DWORD PTR __Node$[ebp]

; 1631 : 		}

	pop	ebp
	ret	8
??$_Buynode_if_nil@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PAU21@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode_if_nil<std::pair<Json::Value::CZString const ,Json::Value> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU31@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::construct<std::pair<Json::Value::CZString const ,Json::Value>,std::pair<Json::Value::CZString const ,Json::Value> &>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU31@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	edi, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR $T2[ebp], edi
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	edi, edi
	je	SHORT $LN8@construct
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 188  : : cstr_( other.index_ != noDuplication &&  other.cstr_ != 0

	mov	esi, DWORD PTR _<_Args_0>$[ebp]
	cmp	DWORD PTR [esi+4], 0
	je	SHORT $LN22@construct
	cmp	DWORD PTR [esi], 0
	je	SHORT $LN22@construct
	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+4]
	jmp	SHORT $LN23@construct
$LN22@construct:
	mov	eax, DWORD PTR [esi]
$LN23@construct:
	mov	DWORD PTR [edi], eax

; 189  :                 ?  valueAllocator()->makeMemberName( other.cstr_ )
; 190  :                 : other.cstr_ )
; 191  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	DWORD PTR [esi], 0
	je	SHORT $LN24@construct
	xor	eax, eax
	cmp	DWORD PTR [esi+4], eax
	setne	al
	jmp	SHORT $LN25@construct
$LN24@construct:
	mov	eax, DWORD PTR [esi+4]
$LN25@construct:
	mov	DWORD PTR [edi+4], eax

	lea	eax, DWORD PTR [esi+8]
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	push	eax
	lea	ecx, DWORD PTR [edi+8]
	call	??0Value@Json@@QAE@ABV01@@Z		; Json::Value::Value
$LN8@construct:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 858  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU31@@Z$1:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU31@@Z$3:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1CZString@Value@Json@@QAE@XZ		; Json::Value::CZString::~CZString
__ehhandler$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU31@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU31@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::construct<std::pair<Json::Value::CZString const ,Json::Value>,std::pair<Json::Value::CZString const ,Json::Value> &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Equal_no_deprecate1@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@U?$equal_to@X@2@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@AAU?$equal_to@X@0@Uinput_iterator_tag@0@3@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
__Pred$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Equal_no_deprecate1@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@U?$equal_to@X@2@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@AAU?$equal_to@X@0@Uinput_iterator_tag@0@3@Z PROC ; std::_Equal_no_deprecate1<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::equal_to<void> >, COMDAT

; 2951 : 	{	// compare [_First1, _Last1) to [_First2, ...) using _Pred, arbitrary iterators

	push	ebp
	mov	ebp, esp
	push	ecx

; 2897 : 	return {};

	mov	BYTE PTR $T1[ebp], 0

; 2942 : 	return (_Equal_unchecked1(_First1, _Last1, _First2, _Pred,

	push	DWORD PTR $T1[ebp]
	push	DWORD PTR __Pred$[ebp]
	push	DWORD PTR __First2$[ebp]
	push	DWORD PTR __Last1$[ebp]
	push	DWORD PTR __First1$[ebp]
	call	??$_Equal_unchecked1@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$equal_to@X@2@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@00AAU?$equal_to@X@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Equal_unchecked1<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::equal_to<void> >
	add	esp, 20					; 00000014H

; 2952 : 	return (_Equal_unchecked(_First1, _Last1, _Unchecked_idl0(_First2), _Pred));
; 2953 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Equal_no_deprecate1@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@U?$equal_to@X@2@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@AAU?$equal_to@X@0@Uinput_iterator_tag@0@3@Z ENDP ; std::_Equal_no_deprecate1<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::equal_to<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Lex_compare_unchecked1@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$less@X@2@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@000AAU?$less@X@0@U?$_Lex_compare_optimize@X@0@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
__Last2$ = 20						; size = 4
__Pred$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Lex_compare_unchecked1@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$less@X@2@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@000AAU?$less@X@0@U?$_Lex_compare_optimize@X@0@@Z PROC ; std::_Lex_compare_unchecked1<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::less<void> >, COMDAT

; 3138 : 	{	// order [_First1, _Last1) vs. [_First2, _Last2) using _Pred, no special optimization

	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 113  : 		return (_Ptr == _Right._Ptr);

	mov	ecx, DWORD PTR __First1$[ebp]
	mov	edx, DWORD PTR __Last1$[ebp]
	cmp	ecx, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 3139 : 	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)

	je	SHORT $LN52@Lex_compar
	npad	3
$LL4@Lex_compar:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 113  : 		return (_Ptr == _Right._Ptr);

	mov	eax, DWORD PTR __First2$[ebp]
	cmp	eax, DWORD PTR __Last2$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 3139 : 	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)

	je	SHORT $LN3@Lex_compar
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 603  : 		return ((reference)_Pnode->_Myval);

	add	eax, 16					; 00000010H
	add	ecx, 16					; 00000010H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 323  : 		return (static_cast<_Ty1&&>(_Left)

	push	eax
	push	ecx
	call	??$?M$$CBVCZString@Value@Json@@V12@@std@@YA_NABU?$pair@$$CBVCZString@Value@Json@@V23@@0@0@Z ; std::operator<<Json::Value::CZString const ,Json::Value>
	add	esp, 8
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 3141 : 		if (_DEBUG_LT_PRED(_Pred, *_First1, *_First2))

	test	al, al
	jne	SHORT $LN46@Lex_compar
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 603  : 		return ((reference)_Pnode->_Myval);

	mov	ecx, DWORD PTR __First1$[ebp]
	mov	eax, DWORD PTR __First2$[ebp]
	add	ecx, 16					; 00000010H
	add	eax, 16					; 00000010H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 323  : 		return (static_cast<_Ty1&&>(_Left)

	push	ecx
	push	eax
	call	??$?M$$CBVCZString@Value@Json@@V12@@std@@YA_NABU?$pair@$$CBVCZString@Value@Json@@V23@@0@0@Z ; std::operator<<Json::Value::CZString const ,Json::Value>
	add	esp, 8
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 3143 : 		else if (_Pred(*_First2, *_First1))

	test	al, al
	jne	SHORT $LN47@Lex_compar

; 3139 : 	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)

	lea	ecx, DWORD PTR __First1$[ebp]
	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator++
	lea	ecx, DWORD PTR __First2$[ebp]
	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator++
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 113  : 		return (_Ptr == _Right._Ptr);

	mov	ecx, DWORD PTR __First1$[ebp]
	mov	edx, DWORD PTR __Last1$[ebp]
	cmp	ecx, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 3139 : 	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)

	jne	SHORT $LL4@Lex_compar
$LN52@Lex_compar:

; 3147 : 	return (_First1 == _Last1 && _First2 != _Last2);

	mov	eax, DWORD PTR __First2$[ebp]
$LN51@Lex_compar:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 113  : 		return (_Ptr == _Right._Ptr);

	cmp	eax, DWORD PTR __Last2$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 3147 : 	return (_First1 == _Last1 && _First2 != _Last2);

	je	SHORT $LN9@Lex_compar
	mov	eax, 1

; 3148 : 	}

	pop	ebp
	ret	0
$LN47@Lex_compar:

; 3144 : 			return (false);

	xor	al, al

; 3148 : 	}

	pop	ebp
	ret	0
$LN46@Lex_compar:

; 3142 : 			return (true);

	mov	al, 1

; 3148 : 	}

	pop	ebp
	ret	0
$LN3@Lex_compar:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 113  : 		return (_Ptr == _Right._Ptr);

	cmp	ecx, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 3147 : 	return (_First1 == _Last1 && _First2 != _Last2);

	je	SHORT $LN51@Lex_compar
$LN9@Lex_compar:
	xor	eax, eax

; 3148 : 	}

	pop	ebp
	ret	0
??$_Lex_compare_unchecked1@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$less@X@2@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@000AAU?$less@X@0@U?$_Lex_compare_optimize@X@0@@Z ENDP ; std::_Lex_compare_unchecked1<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Lex_compare_memcmp_classify@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$less@X@2@@std@@YA?AU?$_Lex_compare_optimize@X@0@ABV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@0ABU?$less@X@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Lex_compare_memcmp_classify@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$less@X@2@@std@@YA?AU?$_Lex_compare_optimize@X@0@ABV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@0ABU?$less@X@0@@Z PROC ; std::_Lex_compare_memcmp_classify<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::less<void> >, COMDAT

; 3120 : 		// note that overload selecting greater<_FTy> is in <xfunctional>
; 3121 : 	return {};

	xor	al, al

; 3122 : 	}

	ret	0
??$_Lex_compare_memcmp_classify@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$less@X@2@@std@@YA?AU?$_Lex_compare_optimize@X@0@ABV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@0ABU?$less@X@0@@Z ENDP ; std::_Lex_compare_memcmp_classify<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 863  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 734  : 		return (_Get_data()._Myres);

	mov	esi, DWORD PTR __Ptr$[ebp]

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN15@destroy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN15@destroy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 15			; 0000000fH

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], 0

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN107@destroy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 865  : 		}

	pop	ebp
	ret	0
$LN107@destroy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [esi], 0
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 865  : 		}

	pop	ebp
	ret	0
??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked1@PBVPathArgument@Json@@PBV12@V?$allocator@PBVPathArgument@Json@@@std@@@std@@YAPAPBVPathArgument@Json@@PAPBV12@00AAU?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninitialized_move_al_unchecked1@PBVPathArgument@Json@@PBV12@V?$allocator@PBVPathArgument@Json@@@std@@@std@@YAPAPBVPathArgument@Json@@PAPBV12@00AAU?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_move_al_unchecked1<Json::PathArgument const *,Json::PathArgument const *,std::allocator<Json::PathArgument const *> >, COMDAT

; 292  : 	{	// move [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2305 : 	const size_t _Count = _Last_ch - _First_ch;

	mov	eax, DWORD PTR __First$[ebp]
	push	esi

; 2306 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	esi, DWORD PTR __Dest$[ebp]
	push	edi

; 2305 : 	const size_t _Count = _Last_ch - _First_ch;

	mov	edi, DWORD PTR __Last$[ebp]
	sub	edi, eax

; 2306 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	push	edi
	push	eax
	push	esi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH

; 2307 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

	lea	eax, DWORD PTR [edi+esi]
	pop	edi
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 294  : 	}

	pop	ebp
	ret	0
??$_Uninitialized_move_al_unchecked1@PBVPathArgument@Json@@PBV12@V?$allocator@PBVPathArgument@Json@@@std@@@std@@YAPAPBVPathArgument@Json@@PAPBV12@00AAU?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked1<Json::PathArgument const *,Json::PathArgument const *,std::allocator<Json::PathArgument const *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_move_cat@PBVPathArgument@Json@@PBV12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPBVPathArgument@Json@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Ptr_move_cat@PBVPathArgument@Json@@PBV12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPBVPathArgument@Json@@0@Z PROC ; std::_Ptr_move_cat<Json::PathArgument const *,Json::PathArgument const *>, COMDAT

; 809  : 	{	// return pointer move optimization category for pointers

	push	ebp
	mov	ebp, esp

; 810  : 	return {};

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 811  : 	}

	pop	ebp
	ret	0
??$_Ptr_move_cat@PBVPathArgument@Json@@PBV12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPBVPathArgument@Json@@0@Z ENDP ; std::_Ptr_move_cat<Json::PathArgument const *,Json::PathArgument const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@VPathArgument@Json@@@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@VPathArgument@Json@@@1@PAVPathArgument@Json@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@VPathArgument@Json@@@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@VPathArgument@Json@@@1@PAVPathArgument@Json@@@Z PROC ; std::allocator_traits<std::allocator<Json::PathArgument> >::destroy<Json::PathArgument>, COMDAT

; 863  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 734  : 		return (_Get_data()._Myres);

	mov	esi, DWORD PTR __Ptr$[ebp]

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN18@destroy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN18@destroy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 15			; 0000000fH

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], 0

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN110@destroy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 865  : 		}

	pop	ebp
	ret	0
$LN110@destroy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [esi], 0
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 865  : 		}

	pop	ebp
	ret	0
??$destroy@VPathArgument@Json@@@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@VPathArgument@Json@@@1@PAVPathArgument@Json@@@Z ENDP ; std::allocator_traits<std::allocator<Json::PathArgument> >::destroy<Json::PathArgument>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked1@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@@std@@YAPAVPathArgument@Json@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninitialized_move_al_unchecked1@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@@std@@YAPAVPathArgument@Json@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z PROC ; std::_Uninitialized_move_al_unchecked1<Json::PathArgument *,Json::PathArgument *,std::allocator<Json::PathArgument> >, COMDAT

; 273  : 	{	// move [_First, _Last) to raw _Dest, using _Al, no special optimization

	push	ebp
	mov	ebp, esp
	push	ebx

; 277  : 	for (; _First != _Last; ++_Dest, (void)++_First)

	mov	ebx, DWORD PTR __Last$[ebp]
	push	esi
	mov	esi, DWORD PTR __First$[ebp]
	cmp	esi, ebx
	je	$LN410@Uninitiali
	push	edi
	mov	edi, DWORD PTR __Dest$[ebp]
	add	esi, 20					; 00000014H
	npad	6
$LL4@Uninitiali:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	edi, edi
	je	SHORT $LN2@Uninitiali
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [edi+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [edi+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 962  : 		if (_Right._Myres() < this->_BUF_SIZE)

	cmp	DWORD PTR [esi], 16			; 00000010H
	jae	SHORT $LN168@Uninitiali

; 963  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,

	mov	eax, DWORD PTR [esi-4]
	add	eax, 1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 553  : 		return (_Count == 0 ? _First1

	je	SHORT $LN169@Uninitiali
	push	eax
	lea	eax, DWORD PTR [esi-20]
	push	eax
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 965  : 		else

	jmp	SHORT $LN169@Uninitiali
$LN168@Uninitiali:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR [esi-20]
	mov	DWORD PTR [edi], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 968  : 			_Right._Bx()._Ptr = pointer();

	mov	DWORD PTR [esi-20], 0
$LN169@Uninitiali:

; 969  : 			}
; 970  : 		this->_Mysize() = _Right._Mysize();

	mov	eax, DWORD PTR [esi-4]
	mov	DWORD PTR [edi+16], eax

; 971  : 		this->_Myres() = _Right._Myres();

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edi+20], eax

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi], 15			; 0000000fH

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi], 16			; 00000010H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi-4], 0

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN397@Uninitiali
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi-20]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jmp	SHORT $LN398@Uninitiali
$LN397@Uninitiali:
	lea	eax, DWORD PTR [esi-20]
$LN398@Uninitiali:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+24], eax
	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+28], eax
$LN2@Uninitiali:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 277  : 	for (; _First != _Last; ++_Dest, (void)++_First)

	add	esi, 32					; 00000020H
	add	edi, 32					; 00000020H
	lea	ecx, DWORD PTR [esi-20]
	cmp	ecx, ebx
	jne	SHORT $LL4@Uninitiali

; 278  : 		_Al.construct(_Unfancy(_Dest), _STD move(*_First));
; 279  : 	_CATCH_ALL
; 280  : 	_Destroy_range(_Next, _Dest, _Al);
; 281  : 	_RERAISE;
; 282  : 	_CATCH_END
; 283  : 
; 284  : 	return (_Dest);

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx

; 285  : 	}

	pop	ebp
	ret	0
$LN410@Uninitiali:

; 278  : 		_Al.construct(_Unfancy(_Dest), _STD move(*_First));
; 279  : 	_CATCH_ALL
; 280  : 	_Destroy_range(_Next, _Dest, _Al);
; 281  : 	_RERAISE;
; 282  : 	_CATCH_END
; 283  : 
; 284  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
	pop	esi
	pop	ebx

; 285  : 	}

	pop	ebp
	ret	0
??$_Uninitialized_move_al_unchecked1@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@@std@@YAPAVPathArgument@Json@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked1<Json::PathArgument *,Json::PathArgument *,std::allocator<Json::PathArgument> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_move_cat@VPathArgument@Json@@V12@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAVPathArgument@Json@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_move_cat@VPathArgument@Json@@V12@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAVPathArgument@Json@@0@Z PROC ; std::_Ptr_move_cat<Json::PathArgument,Json::PathArgument>, COMDAT

; 810  : 	return {};

	xor	al, al

; 811  : 	}

	ret	0
??$_Ptr_move_cat@VPathArgument@Json@@V12@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAVPathArgument@Json@@0@Z ENDP ; std::_Ptr_move_cat<Json::PathArgument,Json::PathArgument>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAVPathArgument@Json@@@std@@YA$$QAVPathArgument@Json@@AAV12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAVPathArgument@Json@@@std@@YA$$QAVPathArgument@Json@@AAV12@@Z PROC ; std::move<Json::PathArgument &>, COMDAT

; 1291 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1292 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1293 : 	}

	pop	ebp
	ret	0
??$move@AAVPathArgument@Json@@@std@@YA$$QAVPathArgument@Json@@AAV12@@Z ENDP ; std::move<Json::PathArgument &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0U?$integral_constant@_N$00@std@@@_Any_tag@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$integral_constant@_N$00@std@@@_Any_tag@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z PROC ; std::_Any_tag::_Any_tag<std::integral_constant<bool,1> >, COMDAT
; _this$ = ecx

; 554  : 		constexpr _Any_tag(_Ty&&) _NOEXCEPT {}

	mov	eax, ecx
	ret	4
??$?0U?$integral_constant@_N$00@std@@@_Any_tag@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z ENDP ; std::_Any_tag::_Any_tag<std::integral_constant<bool,1> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked1@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninitialized_move_al_unchecked1@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z PROC ; std::_Uninitialized_move_al_unchecked1<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 273  : 	{	// move [_First, _Last) to raw _Dest, using _Al, no special optimization

	push	ebp
	mov	ebp, esp
	push	ebx

; 277  : 	for (; _First != _Last; ++_Dest, (void)++_First)

	mov	ebx, DWORD PTR __Last$[ebp]
	push	esi
	mov	esi, DWORD PTR __First$[ebp]
	cmp	esi, ebx
	je	$LN407@Uninitiali
	push	edi
	mov	edi, DWORD PTR __Dest$[ebp]
	add	esi, 20					; 00000014H
	npad	6
$LL4@Uninitiali:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	edi, edi
	je	SHORT $LN2@Uninitiali
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [edi+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [edi+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 962  : 		if (_Right._Myres() < this->_BUF_SIZE)

	cmp	DWORD PTR [esi], 16			; 00000010H
	jae	SHORT $LN165@Uninitiali

; 963  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,

	mov	eax, DWORD PTR [esi-4]
	add	eax, 1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 553  : 		return (_Count == 0 ? _First1

	je	SHORT $LN166@Uninitiali
	push	eax
	lea	eax, DWORD PTR [esi-20]
	push	eax
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 965  : 		else

	jmp	SHORT $LN166@Uninitiali
$LN165@Uninitiali:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR [esi-20]
	mov	DWORD PTR [edi], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 968  : 			_Right._Bx()._Ptr = pointer();

	mov	DWORD PTR [esi-20], 0
$LN166@Uninitiali:

; 969  : 			}
; 970  : 		this->_Mysize() = _Right._Mysize();

	mov	eax, DWORD PTR [esi-4]
	mov	DWORD PTR [edi+16], eax

; 971  : 		this->_Myres() = _Right._Myres();

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edi+20], eax

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi], 15			; 0000000fH

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi], 16			; 00000010H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi-4], 0

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN394@Uninitiali
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi-20]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jmp	SHORT $LN395@Uninitiali
$LN394@Uninitiali:
	lea	eax, DWORD PTR [esi-20]
$LN395@Uninitiali:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
$LN2@Uninitiali:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 277  : 	for (; _First != _Last; ++_Dest, (void)++_First)

	add	esi, 24					; 00000018H
	add	edi, 24					; 00000018H
	lea	ecx, DWORD PTR [esi-20]
	cmp	ecx, ebx
	jne	SHORT $LL4@Uninitiali

; 278  : 		_Al.construct(_Unfancy(_Dest), _STD move(*_First));
; 279  : 	_CATCH_ALL
; 280  : 	_Destroy_range(_Next, _Dest, _Al);
; 281  : 	_RERAISE;
; 282  : 	_CATCH_END
; 283  : 
; 284  : 	return (_Dest);

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx

; 285  : 	}

	pop	ebp
	ret	0
$LN407@Uninitiali:

; 278  : 		_Al.construct(_Unfancy(_Dest), _STD move(*_First));
; 279  : 	_CATCH_ALL
; 280  : 	_Destroy_range(_Next, _Dest, _Al);
; 281  : 	_RERAISE;
; 282  : 	_CATCH_END
; 283  : 
; 284  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
	pop	esi
	pop	ebx

; 285  : 	}

	pop	ebp
	ret	0
??$_Uninitialized_move_al_unchecked1@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked1<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_move_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_move_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::_Ptr_move_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 810  : 	return {};

	xor	al, al

; 811  : 	}

	ret	0
??$_Ptr_move_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::_Ptr_move_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>, COMDAT

; 1291 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1292 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1293 : 	}

	pop	ebp
	ret	0
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Copy_or_move@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
___formal$ = 16						; size = 1
??$_Copy_or_move@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_or_move<std::pair<Json::Value::CZString const ,Json::Value>,std::integral_constant<bool,0> >, COMDAT
; _this$ = ecx

; 1938 : 		{	// copy to new node

	push	ebp
	mov	ebp, esp

; 1939 : 		return (this->_Buynode(_Val));

	push	DWORD PTR __Val$[ebp]
	call	??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>

; 1940 : 		}

	pop	ebp
	ret	12					; 0000000cH
??$_Copy_or_move@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_or_move<std::pair<Json::Value::CZString const ,Json::Value>,std::integral_constant<bool,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1><std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		: _Myhead(),

	mov	DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 290  : 		}

	mov	eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 568  : 		_Mysize(0)

	mov	DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 290  : 		}

	ret	8
??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1><std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QAU_One_then_variadic_args_t@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QAU_One_then_variadic_args_t@0@AAU10@@Z PROC ; std::forward<std::_One_then_variadic_args_t>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

	pop	ebp
	ret	0
??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QAU_One_then_variadic_args_t@0@AAU10@@Z ENDP ; std::forward<std::_One_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0ABV?$allocator@D@std@@@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0ABV?$allocator@D@std@@@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> ><std::allocator<char> const &>, COMDAT
; _this$ = ecx

; 953  : 		}

	mov	eax, ecx
	ret	4
??$?0ABV?$allocator@D@std@@@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> ><std::allocator<char> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Insert_nohint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z
_TEXT	SEGMENT
tv618 = -28						; size = 4
__Addleft$2 = -24					; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
$T3 = 12						; size = 4
__Where$4 = 12						; size = 4
__Leftish$ = 12						; size = 1
__Val$ = 16						; size = 4
__Newnode$ = 20						; size = 4
??$_Insert_nohint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_nohint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>, COMDAT
; _this$ = ecx

; 1771 : 		{	// try to insert node, on left if _Leftish

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Insert_nohint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	edx, DWORD PTR [ecx]

; 1775 : 		bool _Addleft = true;	// add to left of head if tree empty

	mov	al, 1
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 222  :    return index_ < other.index_;

	mov	edi, DWORD PTR __Val$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1774 : 		_Nodeptr _Wherenode = this->_Myhead();

	mov	ebx, edx
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	DWORD PTR tv618[ebp], edx

; 1772 : 		_TRY_BEGIN
; 1773 : 		_Nodeptr _Trynode = _Root();

	mov	esi, DWORD PTR [edx+4]

; 1775 : 		bool _Addleft = true;	// add to left of head if tree empty

	mov	BYTE PTR __Addleft$2[ebp], al

; 1776 : 
; 1777 : 		while (!this->_Isnil(_Trynode))

	cmp	BYTE PTR [esi+13], 0
	jne	$LN3@Insert_noh
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 222  :    return index_ < other.index_;

	mov	dh, BYTE PTR __Leftish$[ebp]
$LL2@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1779 : 			_Wherenode = _Trynode;

	mov	ebx, esi

; 1780 : 			if (_Leftish)

	test	dh, dh
	je	SHORT $LN5@Insert_noh
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    if ( cstr_ )

	mov	eax, DWORD PTR [esi+16]
	test	eax, eax
	je	SHORT $LN79@Insert_noh

; 221  :       return strcmp( cstr_, other.cstr_ ) < 0;

	mov	ecx, DWORD PTR [edi]
$LL246@Insert_noh:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN247@Insert_noh
	test	dl, dl
	je	SHORT $LN248@Insert_noh
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN247@Insert_noh
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL246@Insert_noh
$LN248@Insert_noh:
	xor	eax, eax
	test	eax, eax
	sets	al
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1781 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),

	xor	al, 1

; 1782 : 					this->_Key(_Trynode),
; 1783 : 					this->_Kfn(_Val));	// favor left end
; 1784 : 			else

	jmp	SHORT $LN103@Insert_noh
$LN247@Insert_noh:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 221  :       return strcmp( cstr_, other.cstr_ ) < 0;

	sbb	eax, eax
	or	eax, 1
	test	eax, eax
	sets	al
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1781 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),

	xor	al, 1

; 1782 : 					this->_Key(_Trynode),
; 1783 : 					this->_Kfn(_Val));	// favor left end
; 1784 : 			else

	jmp	SHORT $LN103@Insert_noh
$LN79@Insert_noh:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 222  :    return index_ < other.index_;

	mov	eax, DWORD PTR [esi+20]
	cmp	eax, DWORD PTR [edi+4]
	setl	al
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1781 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),

	xor	al, 1

; 1782 : 					this->_Key(_Trynode),
; 1783 : 					this->_Kfn(_Val));	// favor left end
; 1784 : 			else

	jmp	SHORT $LN103@Insert_noh
$LN5@Insert_noh:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    if ( cstr_ )

	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN104@Insert_noh

; 221  :       return strcmp( cstr_, other.cstr_ ) < 0;

	mov	ecx, DWORD PTR [esi+16]
	npad	2
$LL250@Insert_noh:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN251@Insert_noh
	test	dl, dl
	je	SHORT $LN252@Insert_noh
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN251@Insert_noh
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL250@Insert_noh
$LN252@Insert_noh:
	xor	eax, eax
	test	eax, eax
	sets	al
	jmp	SHORT $LN103@Insert_noh
$LN251@Insert_noh:
	sbb	eax, eax
	or	eax, 1
	test	eax, eax
	sets	al
	jmp	SHORT $LN103@Insert_noh
$LN104@Insert_noh:

; 222  :    return index_ < other.index_;

	mov	eax, DWORD PTR [edi+4]
	cmp	eax, DWORD PTR [esi+20]
	setl	al
$LN103@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1785 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),

	mov	BYTE PTR __Addleft$2[ebp], al

; 1786 : 					this->_Kfn(_Val),
; 1787 : 					this->_Key(_Trynode));	// favor right end
; 1788 : 			_Trynode = _Addleft ? this->_Left(_Trynode)

	test	al, al
	je	SHORT $LN16@Insert_noh
	mov	esi, DWORD PTR [esi]
	jmp	SHORT $LN17@Insert_noh
$LN16@Insert_noh:
	mov	esi, DWORD PTR [esi+8]
$LN17@Insert_noh:

; 1776 : 
; 1777 : 		while (!this->_Isnil(_Trynode))

	cmp	BYTE PTR [esi+13], 0
	je	$LL2@Insert_noh
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv618[ebp]
$LN3@Insert_noh:

; 43   : 		: _Ptr(_Pnode)

	mov	esi, ebx
	mov	DWORD PTR __Where$4[ebp], esi

; 1789 : 				: this->_Right(_Trynode);
; 1790 : 			}
; 1791 : 
; 1792 : 		if (this->_Multi)
; 1793 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1794 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1795 : 		else
; 1796 : 			{	// insert only if unique
; 1797 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1798 : 			if (!_Addleft)

	test	al, al
	je	SHORT $LN12@Insert_noh

; 336  : 		return (this->_Ptr == _Right._Ptr);

	cmp	ebx, DWORD PTR [edx]

; 1799 : 				;	// need to test if insert after is okay
; 1800 : 			else if (_Where == begin())

	jne	SHORT $LN11@Insert_noh

; 1801 : 				return (_Pairib(_Insert_at(true, _Wherenode,

	push	DWORD PTR __Newnode$[ebp]
	push	edi
	push	ebx
	push	1
$LN257@Insert_noh:

; 1807 : 				this->_Key(_Where._Mynode()),
; 1808 : 				this->_Kfn(_Val)))
; 1809 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??$_Insert_at@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_at<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 170  : 		: first(_STD forward<_Other1>(_Val1)),

	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx

; 171  : 				second(_STD forward<_Other2>(_Val2))

	mov	BYTE PTR [eax+4], 1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1821 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN11@Insert_noh:

; 310  : 		--static_cast<_Mybase&>(*this);

	lea	ecx, DWORD PTR __Where$4[ebp]
	call	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator--
	mov	esi, DWORD PTR __Where$4[ebp]
$LN12@Insert_noh:

; 1806 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),

	mov	ecx, DWORD PTR _this$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 62   : 		return (_Val.first);

	lea	eax, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1806 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),

	push	edi
	push	eax
	call	??R?$less@VCZString@Value@Json@@@std@@QBE_NABVCZString@Value@Json@@0@Z ; std::less<Json::Value::CZString>::operator()

; 1807 : 				this->_Key(_Where._Mynode()),
; 1808 : 				this->_Kfn(_Val)))
; 1809 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

	mov	ecx, DWORD PTR _this$[ebp]
	push	DWORD PTR __Newnode$[ebp]
	test	al, al
	je	SHORT $LN13@Insert_noh
	push	edi
	push	ebx
	push	DWORD PTR __Addleft$2[ebp]
	jmp	SHORT $LN257@Insert_noh
$LN13@Insert_noh:

; 1810 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1811 : 			else
; 1812 : 				{	// duplicate, don't insert
; 1813 : 				_Destroy_if_not_nil(_Newnode);

	call	?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Destroy_if_not_nil
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 170  : 		: first(_STD forward<_Other1>(_Val1)),

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], esi

; 171  : 				second(_STD forward<_Other2>(_Val2))

	mov	BYTE PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1821 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
__catch$??$_Insert_nohint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z$0:

; 1814 : 				return (_Pairib(_Where, false));
; 1815 : 				}
; 1816 : 			}
; 1817 : 		_CATCH_ALL
; 1818 : 		_Destroy_if_not_nil(_Newnode);

	push	DWORD PTR __Newnode$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Destroy_if_not_nil

; 1819 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN258@Insert_noh:
$LN256@Insert_noh:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert_nohint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Insert_nohint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Insert_nohint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_nohint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Insert_at@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Val$ = 20						; size = 4
__Node$ = 24						; size = 4
??$_Insert_at@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_at<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>, COMDAT
; _this$ = ecx

; 1827 : 		{	// add node with value next to _Wherenode, to left if _Addleft

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Insert_at@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	edi, ecx

; 1828 : 		if (max_size() - 1 <= this->_Mysize())

	cmp	DWORD PTR [edi+4], 107374181		; 06666665H
	jb	SHORT $LN5@Insert_at

; 603  : 		return ((reference)_Pnode->_Myval);

	mov	esi, DWORD PTR __Node$[ebp]
	lea	ecx, DWORD PTR [esi+24]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 198  :    if ( cstr_  &&  index_ == duplicate )

	cmp	DWORD PTR [esi+16], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	je	SHORT $LN86@Insert_at
	cmp	DWORD PTR [esi+20], 1
	jne	SHORT $LN86@Insert_at

; 199  :       valueAllocator()->releaseMemberName( const_cast<char *>( cstr_ ) );

	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	DWORD PTR [esi+16]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+8]
$LN86@Insert_at:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	40					; 00000028H
	push	1
	push	esi
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 200  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1831 : 			_Xlength_error("map/set<T> too long");

	push	OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN733@Insert_at:
$LN5@Insert_at:

; 1832 : 			}
; 1833 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1834 : 			_STD forward<_Valty>(_Val));
; 1835 : 
; 1836 : 		++this->_Mysize();
; 1837 : 		_Newnode->_Parent = _Wherenode;

	mov	ebx, DWORD PTR __Node$[ebp]
	inc	DWORD PTR [edi+4]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [ebx+4], eax

; 1838 : 
; 1839 : 		if (_Wherenode == this->_Myhead())

	mov	ecx, DWORD PTR [edi]
	cmp	eax, ecx
	jne	SHORT $LN6@Insert_at

; 1840 : 			{	// first node in tree, just set head values
; 1841 : 			_Root() = _Newnode;

	mov	DWORD PTR [ecx+4], ebx

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	eax, DWORD PTR [edi]

; 1842 : 			_Lmost() = _Newnode;

	mov	DWORD PTR [eax], ebx

; 1843 : 			_Rmost() = _Newnode;

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [eax+8], ebx
	jmp	SHORT $LN11@Insert_at
$LN6@Insert_at:

; 1844 : 			}
; 1845 : 		else if (_Addleft)

	cmp	BYTE PTR __Addleft$[ebp], 0
	je	SHORT $LN8@Insert_at

; 1846 : 			{	// add to left of _Wherenode
; 1847 : 			this->_Left(_Wherenode) = _Newnode;

	mov	DWORD PTR [eax], ebx

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	ecx, DWORD PTR [edi]

; 1848 : 			if (_Wherenode == _Lmost())

	cmp	eax, DWORD PTR [ecx]
	jne	SHORT $LN11@Insert_at

; 1849 : 				_Lmost() = _Newnode;

	mov	DWORD PTR [ecx], ebx

; 1850 : 			}
; 1851 : 		else

	jmp	SHORT $LN11@Insert_at
$LN8@Insert_at:

; 1852 : 			{	// add to right of _Wherenode
; 1853 : 			this->_Right(_Wherenode) = _Newnode;

	mov	DWORD PTR [eax+8], ebx

; 598  : 		return ((_Nodepref)_Pnode->_Right);

	mov	ecx, DWORD PTR [edi]

; 1854 : 			if (_Wherenode == _Rmost())

	cmp	eax, DWORD PTR [ecx+8]
	jne	SHORT $LN11@Insert_at

; 1855 : 				_Rmost() = _Newnode;

	mov	DWORD PTR [ecx+8], ebx
$LN11@Insert_at:

; 1856 : 			}
; 1857 : 
; 1858 : 		for (_Nodeptr _Pnode = _Newnode;
; 1859 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

	mov	eax, DWORD PTR [ebx+4]
	mov	esi, ebx
	cmp	BYTE PTR [eax+12], 0
	jne	$LN3@Insert_at
	npad	6
$LL2@Insert_at:

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	eax, DWORD PTR [esi+4]

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	edx, DWORD PTR [eax+4]

; 1860 : 			if (this->_Parent(_Pnode)
; 1861 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))

	mov	ecx, DWORD PTR [edx]
	cmp	eax, ecx
	jne	SHORT $LN12@Insert_at

; 1862 : 				{	// fixup red-red in left subtree
; 1863 : 				_Wherenode =

	mov	ecx, DWORD PTR [edx+8]

; 1864 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1865 : 				if (this->_Color(_Wherenode) == this->_Red)

	cmp	BYTE PTR [ecx+12], 0
	je	SHORT $LN732@Insert_at

; 1866 : 					{	// parent has two red children, blacken both
; 1867 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1868 : 					this->_Color(_Wherenode) = this->_Black;
; 1869 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1870 : 						= this->_Red;
; 1871 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1872 : 					}
; 1873 : 				else
; 1874 : 					{	// parent has red and black children
; 1875 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))

	cmp	esi, DWORD PTR [eax+8]
	jne	SHORT $LN16@Insert_at

; 1876 : 						{	// rotate right child to left
; 1877 : 						_Pnode = this->_Parent(_Pnode);

	mov	esi, eax

; 1878 : 						_Lrotate(_Pnode);

	mov	ecx, edi
	push	esi
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lrotate
$LN16@Insert_at:

; 1879 : 						}
; 1880 : 					this->_Color(this->_Parent(_Pnode)) =

	mov	eax, DWORD PTR [esi+4]
	mov	BYTE PTR [eax+12], 1

; 1881 : 						this->_Black;	// propagate red up
; 1882 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

	mov	eax, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [eax+4]
	mov	BYTE PTR [eax+12], 0

; 1883 : 						this->_Red;
; 1884 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [eax+4]

; 2112 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

	mov	edx, DWORD PTR [ecx]

; 2113 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx], eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [edx+8]

; 2115 : 		if (!this->_Isnil(this->_Right(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN378@Insert_at

; 2116 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

	mov	DWORD PTR [eax+4], ecx
$LN378@Insert_at:

; 2117 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	eax, DWORD PTR [edi]

; 2119 : 		if (_Wherenode == _Root())

	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN379@Insert_at

; 2120 : 			_Root() = _Pnode;

	mov	DWORD PTR [eax+4], edx

; 2125 : 
; 2126 : 		this->_Right(_Pnode) = _Wherenode;

	mov	DWORD PTR [edx+8], ecx

; 1885 : 					}
; 1886 : 				}
; 1887 : 			else

	jmp	$LN731@Insert_at
$LN379@Insert_at:

; 598  : 		return ((_Nodepref)_Pnode->_Right);

	mov	eax, DWORD PTR [ecx+4]

; 2121 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN381@Insert_at

; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

	mov	DWORD PTR [eax+8], edx

; 2125 : 
; 2126 : 		this->_Right(_Pnode) = _Wherenode;

	mov	DWORD PTR [edx+8], ecx

; 1885 : 					}
; 1886 : 				}
; 1887 : 			else

	jmp	$LN731@Insert_at
$LN381@Insert_at:

; 2124 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

	mov	DWORD PTR [eax], edx

; 2125 : 
; 2126 : 		this->_Right(_Pnode) = _Wherenode;

	mov	DWORD PTR [edx+8], ecx

; 1885 : 					}
; 1886 : 				}
; 1887 : 			else

	jmp	SHORT $LN731@Insert_at
$LN12@Insert_at:

; 1888 : 				{	// fixup red-red in right subtree
; 1889 : 				_Wherenode =
; 1890 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1891 : 				if (this->_Color(_Wherenode) == this->_Red)

	cmp	BYTE PTR [ecx+12], 0
	jne	SHORT $LN17@Insert_at
$LN732@Insert_at:

; 1892 : 					{	// parent has two red children, blacken both
; 1893 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

	mov	BYTE PTR [eax+12], 1

; 1894 : 					this->_Color(_Wherenode) = this->_Black;

	mov	BYTE PTR [ecx+12], 1

; 1895 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

	mov	eax, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [eax+4]
	mov	BYTE PTR [eax+12], 0

; 1896 : 						this->_Red;
; 1897 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

	mov	eax, DWORD PTR [esi+4]
	mov	esi, DWORD PTR [eax+4]

; 1898 : 					}
; 1899 : 				else

	jmp	SHORT $LN18@Insert_at
$LN17@Insert_at:

; 1900 : 					{	// parent has red and black children
; 1901 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))

	cmp	esi, DWORD PTR [eax]
	jne	SHORT $LN19@Insert_at

; 1902 : 						{	// rotate left child to right
; 1903 : 						_Pnode = this->_Parent(_Pnode);

	mov	esi, eax

; 1904 : 						_Rrotate(_Pnode);

	mov	ecx, edi
	push	esi
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rrotate
$LN19@Insert_at:

; 1905 : 						}
; 1906 : 					this->_Color(this->_Parent(_Pnode)) =

	mov	eax, DWORD PTR [esi+4]
	mov	BYTE PTR [eax+12], 1

; 1907 : 						this->_Black;	// propagate red up
; 1908 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

	mov	eax, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [eax+4]
	mov	BYTE PTR [eax+12], 0

; 1909 : 						this->_Red;
; 1910 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [eax+4]

; 2082 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

	mov	edx, DWORD PTR [ecx+8]

; 2083 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+8], eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [edx]

; 2085 : 		if (!this->_Isnil(this->_Left(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN577@Insert_at

; 2086 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

	mov	DWORD PTR [eax+4], ecx
$LN577@Insert_at:

; 2087 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	eax, DWORD PTR [edi]

; 2089 : 		if (_Wherenode == _Root())

	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN578@Insert_at

; 2090 : 			_Root() = _Pnode;

	mov	DWORD PTR [eax+4], edx

; 2091 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

	jmp	SHORT $LN581@Insert_at
$LN578@Insert_at:

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	eax, DWORD PTR [ecx+4]

; 2091 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN580@Insert_at

; 2092 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

	mov	DWORD PTR [eax], edx

; 2093 : 		else

	jmp	SHORT $LN581@Insert_at
$LN580@Insert_at:

; 2094 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

	mov	DWORD PTR [eax+8], edx
$LN581@Insert_at:

; 2095 : 
; 2096 : 		this->_Left(_Pnode) = _Wherenode;

	mov	DWORD PTR [edx], ecx
$LN731@Insert_at:

; 2097 : 		this->_Parent(_Wherenode) = _Pnode;

	mov	DWORD PTR [ecx+4], edx
$LN18@Insert_at:

; 1856 : 			}
; 1857 : 
; 1858 : 		for (_Nodeptr _Pnode = _Newnode;
; 1859 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

	mov	eax, DWORD PTR [esi+4]
	cmp	BYTE PTR [eax+12], 0
	je	$LL2@Insert_at
$LN3@Insert_at:

; 1911 : 					}
; 1912 : 				}
; 1913 : 
; 1914 : 		this->_Color(_Root()) = this->_Black;	// root is always black

	mov	eax, DWORD PTR [edi]
	mov	eax, DWORD PTR [eax+4]
	mov	BYTE PTR [eax+12], 1

; 43   : 		: _Ptr(_Pnode)

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ebx

; 1915 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1916 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN730@Insert_at:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insert_at@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z$17:
	call	___std_terminate
	ret	0
__ehhandler$??$_Insert_at@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Insert_at@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Insert_at@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_at<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::construct<std::pair<Json::Value::CZString const ,Json::Value>,std::pair<Json::Value::CZString const ,Json::Value> &>, COMDAT
; _this$ = ecx

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	edi, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR $T2[ebp], edi
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	edi, edi
	je	SHORT $LN13@construct
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 188  : : cstr_( other.index_ != noDuplication &&  other.cstr_ != 0

	mov	esi, DWORD PTR _<_Args_0>$[ebp]
	cmp	DWORD PTR [esi+4], 0
	je	SHORT $LN27@construct
	cmp	DWORD PTR [esi], 0
	je	SHORT $LN27@construct
	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+4]
	jmp	SHORT $LN28@construct
$LN27@construct:
	mov	eax, DWORD PTR [esi]
$LN28@construct:
	mov	DWORD PTR [edi], eax

; 189  :                 ?  valueAllocator()->makeMemberName( other.cstr_ )
; 190  :                 : other.cstr_ )
; 191  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	DWORD PTR [esi], 0
	je	SHORT $LN29@construct
	xor	eax, eax
	cmp	DWORD PTR [esi+4], eax
	setne	al
	jmp	SHORT $LN30@construct
$LN29@construct:
	mov	eax, DWORD PTR [esi+4]
$LN30@construct:
	mov	DWORD PTR [edi+4], eax

	lea	eax, DWORD PTR [esi+8]
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	push	eax
	lea	ecx, DWORD PTR [edi+8]
	call	??0Value@Json@@QAE@ABV01@@Z		; Json::Value::Value
$LN13@construct:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 997  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z$2:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z$4:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1CZString@Value@Json@@QAE@XZ		; Json::Value::CZString::~CZString
__ehhandler$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@AAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@AAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::construct<std::pair<Json::Value::CZString const ,Json::Value>,std::pair<Json::Value::CZString const ,Json::Value> &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Equal_no_deprecate@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@U?$equal_to@X@2@@std@@YA_NV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@00AAU?$equal_to@X@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
__Pred$ = 20						; size = 4
??$_Equal_no_deprecate@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@U?$equal_to@X@2@@std@@YA_NV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@00AAU?$equal_to@X@0@@Z PROC ; std::_Equal_no_deprecate<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::equal_to<void> >, COMDAT

; 2970 : 	{	// compare [_First1, _Last1) to [_First2, ...) using _Pred, no _SCL_INSECURE_DEPRECATE_FN warnings

	push	ebp
	mov	ebp, esp
	push	ecx

; 2897 : 	return {};

	mov	BYTE PTR $T1[ebp], 0

; 2942 : 	return (_Equal_unchecked1(_First1, _Last1, _First2, _Pred,

	push	DWORD PTR $T1[ebp]
	push	DWORD PTR __Pred$[ebp]
	push	DWORD PTR __First2$[ebp]
	push	DWORD PTR __Last1$[ebp]
	push	DWORD PTR __First1$[ebp]
	call	??$_Equal_unchecked1@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$equal_to@X@2@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@00AAU?$equal_to@X@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Equal_unchecked1<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::equal_to<void> >
	add	esp, 20					; 00000014H

; 2971 : 	_DEBUG_RANGE_PTR(_First1, _Last1, _First2);
; 2972 : 	_DEBUG_POINTER_IF(_First1 != _Last1, _Pred);
; 2973 : 	return (_Equal_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
; 2974 : 		_First2, _Pred, _Iter_cat_t<_InIt1>(), _Iter_cat_t<_InIt2>()));
; 2975 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Equal_no_deprecate@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@U?$equal_to@X@2@@std@@YA_NV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@00AAU?$equal_to@X@0@@Z ENDP ; std::_Equal_no_deprecate<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::equal_to<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Is_checked@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YA?AU?$integral_constant@_N$00@0@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Is_checked@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YA?AU?$integral_constant@_N$00@0@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@@Z PROC ; std::_Is_checked<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > >, COMDAT

; 421  : 	return {};

	xor	al, al

; 422  : 	}

	ret	0
??$_Is_checked@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YA?AU?$integral_constant@_N$00@0@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@@Z ENDP ; std::_Is_checked<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Deprecate@_Unchecked_iterators@?1???$equal@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@U?$equal_to@X@2@@std@@YA_NV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@00U?$equal_to@X@2@@Z@SAXU?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?_Deprecate@_Unchecked_iterators@?1???$equal@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@U?$equal_to@X@2@@std@@YA_NV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@00U?$equal_to@X@2@@Z@SAXU?$integral_constant@_N$00@2@@Z PROC ; `std::equal<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::equal_to<void> >'::`2'::_Unchecked_iterators::_Deprecate, COMDAT

; 2983 : 	_DEPRECATE_UNCHECKED(equal, _First2);

	ret	0
?_Deprecate@_Unchecked_iterators@?1???$equal@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@U?$equal_to@X@2@@std@@YA_NV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@00U?$equal_to@X@2@@Z@SAXU?$integral_constant@_N$00@2@@Z ENDP ; `std::equal<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::equal_to<void> >'::`2'::_Unchecked_iterators::_Deprecate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Lex_compare_unchecked@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$less@X@2@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@000AAU?$less@X@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
__Last2$ = 20						; size = 4
__Pred$ = 24						; size = 4
??$_Lex_compare_unchecked@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$less@X@2@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@000AAU?$less@X@0@@Z PROC ; std::_Lex_compare_unchecked<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::less<void> >, COMDAT

; 3168 : 	{	// order [_First1, _Last1) vs. [_First2, _Last2) using _Pred, choose optimization

	push	ebp
	mov	ebp, esp
	push	ecx

; 3121 : 	return {};

	mov	BYTE PTR $T1[ebp], 0

; 3169 : 	return (_Lex_compare_unchecked1(_First1, _Last1, _First2, _Last2, _Pred,

	push	DWORD PTR $T1[ebp]
	push	DWORD PTR __Pred$[ebp]
	push	DWORD PTR __Last2$[ebp]
	push	DWORD PTR __First2$[ebp]
	push	DWORD PTR __Last1$[ebp]
	push	DWORD PTR __First1$[ebp]
	call	??$_Lex_compare_unchecked1@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$less@X@2@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@000AAU?$less@X@0@U?$_Lex_compare_optimize@X@0@@Z ; std::_Lex_compare_unchecked1<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::less<void> >
	add	esp, 24					; 00000018H

; 3170 : 		_Lex_compare_memcmp_classify(_First1, _First2, _Pred)));
; 3171 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Lex_compare_unchecked@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$less@X@2@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@000AAU?$less@X@0@@Z ENDP ; std::_Lex_compare_unchecked<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Unchecked@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@YA?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Iter$ = 12						; size = 4
??$_Unchecked@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@YA?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >, COMDAT

; 348  : 	{	// convert to unchecked

	push	ebp
	mov	ebp, esp

; 43   : 		: _Ptr(_Pnode)

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Iter$[ebp]
	mov	DWORD PTR [eax], ecx

; 349  : 	return (_Iter._Unchecked());
; 350  : 	}

	pop	ebp
	ret	0
??$_Unchecked@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@YA?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > &>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

	pop	ebp
	ret	0
??$forward@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAPAU21@@Z PROC ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::construct<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * &>, COMDAT
; _this$ = ecx

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@construct
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN3@construct:

; 738  : 		}

	pop	ebp
	ret	8
??$construct@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAPAU21@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::construct<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1002 : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 734  : 		return (_Get_data()._Myres);

	mov	esi, DWORD PTR __Ptr$[ebp]

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN17@destroy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN17@destroy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 15			; 0000000fH

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], 0

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN109@destroy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1004 : 		}

	pop	ebp
	ret	4
$LN109@destroy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [esi], 0
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1004 : 		}

	pop	ebp
	ret	4
??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAPBVPathArgument@Json@@PAPBV12@@std@@YAAAPAPBVPathArgument@Json@@AAPAPBV12@PAPBV12@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAPBVPathArgument@Json@@PAPBV12@@std@@YAAAPAPBVPathArgument@Json@@AAPAPBV12@PAPBV12@@Z PROC ; std::_Rechecked<Json::PathArgument const * *,Json::PathArgument const * *>, COMDAT

; 457  : 	{	// reset checked from unchecked, generic

	push	ebp
	mov	ebp, esp

; 458  : 	_Dest = _Src;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	DWORD PTR [eax], ecx

; 459  : 	return (_Dest);
; 460  : 	}

	pop	ebp
	ret	0
??$_Rechecked@PAPBVPathArgument@Json@@PAPBV12@@std@@YAAAPAPBVPathArgument@Json@@AAPAPBV12@PAPBV12@@Z ENDP ; std::_Rechecked<Json::PathArgument const * *,Json::PathArgument const * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked@PAPBVPathArgument@Json@@PAPBV12@V?$allocator@PBVPathArgument@Json@@@std@@@std@@YAPAPBVPathArgument@Json@@PAPBV12@00AAU?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move_al_unchecked@PAPBVPathArgument@Json@@PAPBV12@V?$allocator@PBVPathArgument@Json@@@std@@@std@@YAPAPBVPathArgument@Json@@PAPBV12@00AAU?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@0@@Z PROC ; std::_Uninitialized_move_al_unchecked<Json::PathArgument const * *,Json::PathArgument const * *,std::allocator<Json::PathArgument const *> >, COMDAT

; 301  : 	{	// move [_First, _Last) to raw _Dest, using _Al, choose optimization

	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2305 : 	const size_t _Count = _Last_ch - _First_ch;

	mov	eax, DWORD PTR __First$[ebp]
	push	esi

; 2306 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	esi, DWORD PTR __Dest$[ebp]
	push	edi

; 2305 : 	const size_t _Count = _Last_ch - _First_ch;

	mov	edi, DWORD PTR __Last$[ebp]
	sub	edi, eax

; 2306 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	push	edi
	push	eax
	push	esi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH

; 2307 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

	lea	eax, DWORD PTR [edi+esi]
	pop	edi
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 306  : 	}

	pop	ebp
	ret	0
??$_Uninitialized_move_al_unchecked@PAPBVPathArgument@Json@@PAPBV12@V?$allocator@PBVPathArgument@Json@@@std@@@std@@YAPAPBVPathArgument@Json@@PAPBV12@00AAU?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked<Json::PathArgument const * *,Json::PathArgument const * *,std::allocator<Json::PathArgument const *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAPBVPathArgument@Json@@@std@@YAPAPBVPathArgument@Json@@PAPBV12@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAPBVPathArgument@Json@@@std@@YAPAPBVPathArgument@Json@@PAPBV12@@Z PROC ; std::_Unchecked<Json::PathArgument const * *>, COMDAT

; 427  : 	{	// construct unchecked from checked, generic

	push	ebp
	mov	ebp, esp

; 428  : 	return (_Src);

	mov	eax, DWORD PTR __Src$[ebp]

; 429  : 	}

	pop	ebp
	ret	0
??$_Unchecked@PAPBVPathArgument@Json@@@std@@YAPAPBVPathArgument@Json@@PAPBV12@@Z ENDP ; std::_Unchecked<Json::PathArgument const * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@VPathArgument@Json@@@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@VPathArgument@Json@@@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@@Z PROC ; std::_Wrap_alloc<std::allocator<Json::PathArgument> >::destroy<Json::PathArgument>, COMDAT
; _this$ = ecx

; 1002 : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 734  : 		return (_Get_data()._Myres);

	mov	esi, DWORD PTR __Ptr$[ebp]

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN20@destroy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN20@destroy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 15			; 0000000fH

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], 0

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN112@destroy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1004 : 		}

	pop	ebp
	ret	4
$LN112@destroy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [esi], 0
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1004 : 		}

	pop	ebp
	ret	4
??$destroy@VPathArgument@Json@@@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@@Z ENDP ; std::_Wrap_alloc<std::allocator<Json::PathArgument> >::destroy<Json::PathArgument>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAVPathArgument@Json@@PAV12@@std@@YAAAPAVPathArgument@Json@@AAPAV12@PAV12@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAVPathArgument@Json@@PAV12@@std@@YAAAPAVPathArgument@Json@@AAPAV12@PAV12@@Z PROC ; std::_Rechecked<Json::PathArgument *,Json::PathArgument *>, COMDAT

; 457  : 	{	// reset checked from unchecked, generic

	push	ebp
	mov	ebp, esp

; 458  : 	_Dest = _Src;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	DWORD PTR [eax], ecx

; 459  : 	return (_Dest);
; 460  : 	}

	pop	ebp
	ret	0
??$_Rechecked@PAVPathArgument@Json@@PAV12@@std@@YAAAPAVPathArgument@Json@@AAPAV12@PAV12@@Z ENDP ; std::_Rechecked<Json::PathArgument *,Json::PathArgument *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@@std@@YAPAVPathArgument@Json@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move_al_unchecked@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@@std@@YAPAVPathArgument@Json@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@0@@Z PROC ; std::_Uninitialized_move_al_unchecked<Json::PathArgument *,Json::PathArgument *,std::allocator<Json::PathArgument> >, COMDAT

; 301  : 	{	// move [_First, _Last) to raw _Dest, using _Al, choose optimization

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	push	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 810  : 	return {};

	mov	BYTE PTR $T1[ebp], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	push	DWORD PTR $T1[ebp]
	push	DWORD PTR __Al$[ebp]
	push	DWORD PTR __Dest$[ebp]
	push	DWORD PTR __Last$[ebp]
	push	DWORD PTR __First$[ebp]
	call	??$_Uninitialized_move_al_unchecked1@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@@std@@YAPAVPathArgument@Json@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_move_al_unchecked1<Json::PathArgument *,Json::PathArgument *,std::allocator<Json::PathArgument> >
	add	esp, 24					; 00000018H

; 304  : 		_Ptr_move_cat(_First, _Dest),
; 305  : 		_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_Dest)), _Src_type>()));
; 306  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move_al_unchecked@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@@std@@YAPAVPathArgument@Json@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked<Json::PathArgument *,Json::PathArgument *,std::allocator<Json::PathArgument> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAVPathArgument@Json@@@std@@YAPAVPathArgument@Json@@PAV12@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAVPathArgument@Json@@@std@@YAPAVPathArgument@Json@@PAV12@@Z PROC ; std::_Unchecked<Json::PathArgument *>, COMDAT

; 427  : 	{	// construct unchecked from checked, generic

	push	ebp
	mov	ebp, esp

; 428  : 	return (_Src);

	mov	eax, DWORD PTR __Src$[ebp]

; 429  : 	}

	pop	ebp
	ret	0
??$_Unchecked@PAVPathArgument@Json@@@std@@YAPAVPathArgument@Json@@PAV12@@Z ENDP ; std::_Unchecked<Json::PathArgument *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::destroy<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>, COMDAT
; _this$ = ecx

; 744  : 		_Ptr->~_Uty();
; 745  : 		}

	ret	4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::destroy<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@construct
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN3@construct:

; 738  : 		}

	pop	ebp
	ret	8
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 744  : 		_Ptr->~_Uty();
; 745  : 		}

	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAPAV10@PAV10@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAPAV10@PAV10@@Z PROC ; std::_Rechecked<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT

; 457  : 	{	// reset checked from unchecked, generic

	push	ebp
	mov	ebp, esp

; 458  : 	_Dest = _Src;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	DWORD PTR [eax], ecx

; 459  : 	return (_Dest);
; 460  : 	}

	pop	ebp
	ret	0
??$_Rechecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAPAV10@PAV10@@Z ENDP ; std::_Rechecked<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move_al_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@@Z PROC ; std::_Uninitialized_move_al_unchecked<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 301  : 	{	// move [_First, _Last) to raw _Dest, using _Al, choose optimization

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	push	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 810  : 	return {};

	mov	BYTE PTR $T1[ebp], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	push	DWORD PTR $T1[ebp]
	push	DWORD PTR __Al$[ebp]
	push	DWORD PTR __Dest$[ebp]
	push	DWORD PTR __Last$[ebp]
	push	DWORD PTR __First$[ebp]
	call	??$_Uninitialized_move_al_unchecked1@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_move_al_unchecked1<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
	add	esp, 24					; 00000018H

; 304  : 		_Ptr_move_cat(_First, _Dest),
; 305  : 		_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_Dest)), _Src_type>()));
; 306  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move_al_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z PROC ; std::_Unchecked<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT

; 427  : 	{	// construct unchecked from checked, generic

	push	ebp
	mov	ebp, esp

; 428  : 	return (_Src);

	mov	eax, DWORD PTR __Src$[ebp]

; 429  : 	}

	pop	ebp
	ret	0
??$_Unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ENDP ; std::_Unchecked<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > &>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

	pop	ebp
	ret	0
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@construct
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	push	DWORD PTR _<_Args_0>$[ebp]

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	call	?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
$LN3@construct:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 738  : 		}

	pop	ebp
	ret	8
??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Rootnode$ = 8						; size = 4
__Newroot$ = 12						; size = 4
__Wherenode$ = 12					; size = 4
__Movefl$ = 16						; size = 1
??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>, COMDAT
; _this$ = ecx

; 1959 : 		{	// copy entire subtree, recursively

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi

; 1960 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1961 : 
; 1962 : 		if (!this->_Isnil(_Rootnode))

	mov	eax, DWORD PTR __Rootnode$[ebp]
	mov	edi, DWORD PTR [esi]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN8@Copy_nodes

; 603  : 		return ((reference)_Pnode->_Myval);

	add	eax, 16					; 00000010H

; 1939 : 		return (this->_Buynode(_Val));

	push	eax
	call	??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>

; 1963 : 			{	// copy or move a node, then any subtrees
; 1964 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1965 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1966 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1967 : 			_Pnode->_Parent = _Wherenode;
; 1968 : 			_Pnode->_Color = this->_Color(_Rootnode);

	mov	ecx, DWORD PTR __Rootnode$[ebp]
	mov	ebx, eax
	mov	eax, DWORD PTR __Wherenode$[ebp]

; 1969 : 			if (this->_Isnil(_Newroot))
; 1970 : 				_Newroot = _Pnode;	// memorize new root
; 1971 : 
; 1972 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	DWORD PTR [ebx+4], eax
	mov	al, BYTE PTR [ecx+12]
	mov	BYTE PTR [ebx+12], al

; 1973 : 			this->_Left(_Pnode) =

	push	DWORD PTR __Movefl$[ebp]
	cmp	BYTE PTR [edi+13], 0
	push	ebx
	push	DWORD PTR [ecx]
	cmovne	edi, ebx
	mov	ecx, esi
	mov	DWORD PTR __Newroot$[ebp], edi
	call	??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>
	mov	DWORD PTR [ebx], eax

; 1974 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 1975 : 			this->_Right(_Pnode) =

	mov	ecx, esi
	push	DWORD PTR __Movefl$[ebp]
	mov	eax, DWORD PTR __Rootnode$[ebp]
	push	ebx
	push	DWORD PTR [eax+8]
	call	??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>
	mov	DWORD PTR [ebx+8], eax
$LN8@Copy_nodes:

; 1980 : 			_CATCH_END
; 1981 : 			}
; 1982 : 
; 1983 : 		return (_Newroot);	// return newly constructed tree

	mov	eax, edi

; 1984 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
__catch$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z$0:

; 1976 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 1977 : 			_CATCH_ALL
; 1978 : 			_Erase(_Newroot);	// subtree copy failed, bail out

	push	DWORD PTR __Newroot$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase

; 1979 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN58@Copy_nodes:
$LN57@Copy_nodes:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABU?$less@VCZString@Value@Json@@@std@@U_One_then_variadic_args_t@1@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@VCZString@Value@Json@@@1@$$QAU21@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
_<_Val2_0>$ = 16					; size = 4
_<_Val2_1>$ = 20					; size = 4
??$?0ABU?$less@VCZString@Value@Json@@@std@@U_One_then_variadic_args_t@1@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@VCZString@Value@Json@@@1@$$QAU21@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z PROC ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1><std::less<Json::Value::CZString> const &,std::_One_then_variadic_args_t,std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		: _Myhead(),

	mov	DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 290  : 		}

	mov	eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 568  : 		_Mysize(0)

	mov	DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 290  : 		}

	ret	16					; 00000010H
??$?0ABU?$less@VCZString@Value@Json@@@std@@U_One_then_variadic_args_t@1@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@VCZString@Value@Json@@@1@$$QAU21@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z ENDP ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1><std::less<Json::Value::CZString> const &,std::_One_then_variadic_args_t,std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PBVPathArgument@Json@@PBV12@@?$allocator@PBVPathArgument@Json@@@std@@QAEXPAPBVPathArgument@Json@@$$QAPBV23@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PBVPathArgument@Json@@PBV12@@?$allocator@PBVPathArgument@Json@@@std@@QAEXPAPBVPathArgument@Json@@$$QAPBV23@@Z PROC ; std::allocator<Json::PathArgument const *>::construct<Json::PathArgument const *,Json::PathArgument const *>, COMDAT
; _this$ = ecx

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@construct
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN3@construct:

; 738  : 		}

	pop	ebp
	ret	8
??$construct@PBVPathArgument@Json@@PBV12@@?$allocator@PBVPathArgument@Json@@@std@@QAEXPAPBVPathArgument@Json@@$$QAPBV23@@Z ENDP ; std::allocator<Json::PathArgument const *>::construct<Json::PathArgument const *,Json::PathArgument const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@VPathArgument@Json@@V12@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@$$QAV23@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@VPathArgument@Json@@V12@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@$$QAV23@@Z PROC ; std::allocator<Json::PathArgument>::construct<Json::PathArgument,Json::PathArgument>, COMDAT
; _this$ = ecx

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	edi

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	edi, DWORD PTR __Ptr$[ebp]
	test	edi, edi
	je	SHORT $LN3@construct
	push	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	mov	esi, DWORD PTR _<_Args_0>$[ebp]
	mov	ecx, edi

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [edi+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [edi+16], 0

; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	push	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	call	?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
	mov	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
	mov	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], eax
	pop	esi
$LN3@construct:
	pop	edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 738  : 		}

	pop	ebp
	ret	8
??$construct@VPathArgument@Json@@V12@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@$$QAV23@@Z ENDP ; std::allocator<Json::PathArgument>::construct<Json::PathArgument,Json::PathArgument>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@VPathArgument@Json@@ABV12@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@ABV23@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@VPathArgument@Json@@ABV12@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@ABV23@@Z PROC ; std::allocator<Json::PathArgument>::construct<Json::PathArgument,Json::PathArgument const &>, COMDAT
; _this$ = ecx

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@VPathArgument@Json@@ABV12@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@ABV23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	edi, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR $T2[ebp], edi
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	edi, edi
	je	SHORT $LN3@construct
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 782  : 		assign(_Right, 0, npos);

	mov	esi, DWORD PTR _<_Args_0>$[ebp]
	mov	ecx, edi
	push	-1
	push	0

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [edi+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [edi+16], 0

; 782  : 		assign(_Right, 0, npos);

	push	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 782  : 		assign(_Right, 0, npos);

	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
	mov	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], eax
$LN3@construct:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 738  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@VPathArgument@Json@@ABV12@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@ABV23@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@VPathArgument@Json@@ABV12@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@ABV23@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@VPathArgument@Json@@ABV12@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@ABV23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@VPathArgument@Json@@ABV12@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@ABV23@@Z ENDP ; std::allocator<Json::PathArgument>::construct<Json::PathArgument,Json::PathArgument const &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@VPathArgument@Json@@AAV12@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@VPathArgument@Json@@AAV12@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z PROC ; std::allocator<Json::PathArgument>::construct<Json::PathArgument,Json::PathArgument &>, COMDAT
; _this$ = ecx

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@VPathArgument@Json@@AAV12@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	edi, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR $T2[ebp], edi
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	edi, edi
	je	SHORT $LN3@construct
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 782  : 		assign(_Right, 0, npos);

	mov	esi, DWORD PTR _<_Args_0>$[ebp]
	mov	ecx, edi
	push	-1
	push	0

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [edi+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [edi+16], 0

; 782  : 		assign(_Right, 0, npos);

	push	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 782  : 		assign(_Right, 0, npos);

	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
	mov	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], eax
$LN3@construct:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 738  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@VPathArgument@Json@@AAV12@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@VPathArgument@Json@@AAV12@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@VPathArgument@Json@@AAV12@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@VPathArgument@Json@@AAV12@@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z ENDP ; std::allocator<Json::PathArgument>::construct<Json::PathArgument,Json::PathArgument &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::destroy<std::pair<Json::Value::CZString const ,Json::Value> >, COMDAT
; _this$ = ecx

; 743  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, DWORD PTR __Ptr$[ebp]
	lea	ecx, DWORD PTR [esi+8]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 198  :    if ( cstr_  &&  index_ == duplicate )

	cmp	DWORD PTR [esi], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	je	SHORT $LN165@destroy
	cmp	DWORD PTR [esi+4], 1
	jne	SHORT $LN165@destroy

; 199  :       valueAllocator()->releaseMemberName( const_cast<char *>( cstr_ ) );

	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+8]
$LN165@destroy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 745  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z$33:
	call	___std_terminate
	ret	0
__ehhandler$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::destroy<std::pair<Json::Value::CZString const ,Json::Value> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 496  : 		_Mysize(0),

	mov	DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 290  : 		}

	mov	eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 497  : 		_Myres(0)

	mov	DWORD PTR [ecx+20], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 290  : 		}

	ret	8
??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z PROC ; std::forward<std::allocator<char> const &>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

	pop	ebp
	ret	0
??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z ENDP ; std::forward<std::allocator<char> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Insert_hint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 8
__Next$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
__Newnode$ = 20						; size = 4
??$_Insert_hint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_hint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>, COMDAT
; _this$ = ecx

; 1655 : 		{	// try to insert node using _Where as a hint

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Insert_hint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	ebx, ecx
	mov	DWORD PTR _this$[ebp], ebx

; 1656 : 		const_iterator _Next;
; 1657 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1658 : 
; 1659 : 		_TRY_BEGIN
; 1660 : 
; 1661 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1662 : 		if (_Where._Getcont() != &this->_Get_data())
; 1663 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1664 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1665 : 
; 1666 : 		if (size() == 0)

	cmp	DWORD PTR [ebx+4], 0
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jne	SHORT $LN3@Insert_hin

; 1667 : 			return (_Insert_at(true, this->_Myhead(),

	push	DWORD PTR __Newnode$[ebp]
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	DWORD PTR __Val$[ebp]
	push	DWORD PTR [ebx]
	push	1
	push	esi
	call	??$_Insert_at@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_at<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
	mov	eax, esi

; 1764 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1765 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN3@Insert_hin:

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	edi, DWORD PTR [ebx]

; 336  : 		return (this->_Ptr == _Right._Ptr);

	mov	esi, DWORD PTR __Where$[ebp]
	cmp	esi, DWORD PTR [edi]

; 1668 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1669 : 		else if (this->_Multi)
; 1670 : 			{	// insert even if duplicate
; 1671 : 			if (_Where == begin())
; 1672 : 				{	// insert at beginning if before first element
; 1673 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1674 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1675 : 					return (_Insert_at(true, _Where._Mynode(),
; 1676 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1677 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1678 : 				}
; 1679 : 			else if (_Where == end())
; 1680 : 				{	// insert at end if after last element
; 1681 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1682 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1683 : 					return (_Insert_at(false, _Rmost(),
; 1684 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1685 : 				}
; 1686 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1687 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1688 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1689 : 					this->_Kfn(_Val),
; 1690 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1691 : 				{	// insert before _Where
; 1692 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1693 : 					return (_Insert_at(false, _Next._Mynode(),
; 1694 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1695 : 				else
; 1696 : 					return (_Insert_at(true, _Where._Mynode(),
; 1697 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1698 : 				}
; 1699 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1700 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1701 : 				&& (++(_Next = _Where) == end()
; 1702 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1703 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1704 : 				{	// insert after _Where
; 1705 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1706 : 					return (_Insert_at(false, _Where._Mynode(),
; 1707 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1708 : 				else
; 1709 : 					return (_Insert_at(true, _Next._Mynode(),
; 1710 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1711 : 				}
; 1712 : 			else
; 1713 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1714 : 			}
; 1715 : 		else
; 1716 : 			{	// insert only if unique
; 1717 : 			if (_Where == begin())

	jne	SHORT $LN22@Insert_hin

; 1719 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),

	mov	edi, DWORD PTR __Val$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 62   : 		return (_Val.first);

	lea	eax, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1719 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),

	push	eax
	push	edi
	call	??R?$less@VCZString@Value@Json@@@std@@QBE_NABVCZString@Value@Json@@0@Z ; std::less<Json::Value::CZString>::operator()
	test	al, al
	je	$LN35@Insert_hin

; 1720 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1721 : 					return (_Insert_at(true, _Where._Mynode(),

	push	DWORD PTR __Newnode$[ebp]
	mov	ecx, ebx
	push	edi
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	1
	push	esi
	call	??$_Insert_at@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_at<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
	mov	eax, esi

; 1764 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1765 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN22@Insert_hin:

; 336  : 		return (this->_Ptr == _Right._Ptr);

	cmp	esi, edi

; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				}
; 1724 : 			else if (_Where == end())

	jne	SHORT $LN25@Insert_hin
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 62   : 		return (_Val.first);

	mov	edi, DWORD PTR [edi+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1726 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),

	mov	esi, DWORD PTR __Val$[ebp]
	push	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 62   : 		return (_Val.first);

	lea	eax, DWORD PTR [edi+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1726 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),

	push	eax
	call	??R?$less@VCZString@Value@Json@@@std@@QBE_NABVCZString@Value@Json@@0@Z ; std::less<Json::Value::CZString>::operator()
	test	al, al
	je	$LN35@Insert_hin

; 1727 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1728 : 					return (_Insert_at(false, _Rmost(),

	push	DWORD PTR __Newnode$[ebp]
	mov	ecx, ebx
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	edi
	push	0
	push	esi
	call	??$_Insert_at@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_at<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
	mov	eax, esi

; 1764 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1765 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN25@Insert_hin:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 62   : 		return (_Val.first);

	lea	eax, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1733 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),

	push	eax
	push	DWORD PTR __Val$[ebp]
	call	??R?$less@VCZString@Value@Json@@@std@@QBE_NABVCZString@Value@Json@@0@Z ; std::less<Json::Value::CZString>::operator()
	test	al, al
	je	SHORT $LN28@Insert_hin

; 310  : 		--static_cast<_Mybase&>(*this);

	lea	ecx, DWORD PTR __Next$[ebp]

; 1733 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),

	mov	DWORD PTR __Next$[ebp], esi

; 310  : 		--static_cast<_Mybase&>(*this);

	call	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator--
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 62   : 		return (_Val.first);

	mov	ebx, DWORD PTR __Next$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1733 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),

	push	DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 62   : 		return (_Val.first);

	lea	eax, DWORD PTR [ebx+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1733 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),

	push	eax
	call	??R?$less@VCZString@Value@Json@@@std@@QBE_NABVCZString@Value@Json@@0@Z ; std::less<Json::Value::CZString>::operator()
	test	al, al
	je	SHORT $LN732@Insert_hin

; 1734 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1735 : 					this->_Kfn(_Val)))
; 1736 : 				{	// insert before _Where
; 1737 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))

	mov	eax, DWORD PTR [ebx+8]

; 1738 : 					return (_Insert_at(false, _Next._Mynode(),

	push	DWORD PTR __Newnode$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	DWORD PTR __Val$[ebp]
	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LN30@Insert_hin
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	ebx
	push	0
	push	esi
	call	??$_Insert_at@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_at<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
	mov	eax, esi

; 1764 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1765 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN30@Insert_hin:

; 1739 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1740 : 				else
; 1741 : 					return (_Insert_at(true, _Where._Mynode(),

	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	1
	push	esi
	call	??$_Insert_at@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_at<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
	mov	eax, esi

; 1764 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1765 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN732@Insert_hin:
	mov	ebx, DWORD PTR _this$[ebp]
$LN28@Insert_hin:

; 1746 : 				&& (++(_Next = _Where) == end()

	push	DWORD PTR __Val$[ebp]
	lea	eax, DWORD PTR [esi+16]
	mov	ecx, ebx
	push	eax
	call	??R?$less@VCZString@Value@Json@@@std@@QBE_NABVCZString@Value@Json@@0@Z ; std::less<Json::Value::CZString>::operator()
	test	al, al
	je	$LN35@Insert_hin

; 273  : 		++static_cast<_Mybase&>(*this);

	lea	ecx, DWORD PTR __Next$[ebp]

; 1746 : 				&& (++(_Next = _Where) == end()

	mov	DWORD PTR __Next$[ebp], esi

; 273  : 		++static_cast<_Mybase&>(*this);

	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator++

; 336  : 		return (this->_Ptr == _Right._Ptr);

	mov	ebx, DWORD PTR __Next$[ebp]
	cmp	ebx, edi

; 1746 : 				&& (++(_Next = _Where) == end()

	mov	edi, DWORD PTR _this$[ebp]
	je	SHORT $LN33@Insert_hin
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 62   : 		return (_Val.first);

	lea	eax, DWORD PTR [ebx+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1746 : 				&& (++(_Next = _Where) == end()

	mov	ecx, edi
	push	eax
	push	DWORD PTR __Val$[ebp]
	call	??R?$less@VCZString@Value@Json@@@std@@QBE_NABVCZString@Value@Json@@0@Z ; std::less<Json::Value::CZString>::operator()
	test	al, al
	je	SHORT $LN731@Insert_hin
$LN33@Insert_hin:

; 1747 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1749 : 				{	// insert after _Where
; 1750 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))

	mov	eax, DWORD PTR [esi+8]

; 1751 : 					return (_Insert_at(false, _Where._Mynode(),

	mov	ecx, edi
	push	DWORD PTR __Newnode$[ebp]
	push	DWORD PTR __Val$[ebp]
	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LN34@Insert_hin
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	0
	push	esi
	call	??$_Insert_at@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_at<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
	mov	eax, esi

; 1764 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1765 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN34@Insert_hin:

; 1752 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1753 : 				else
; 1754 : 					return (_Insert_at(true, _Next._Mynode(),

	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	ebx
	push	1
	push	esi
	call	??$_Insert_at@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@1@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_at<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
	mov	eax, esi

; 1764 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1765 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
__catch$??$_Insert_hint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z$0:

; 1755 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1756 : 				}
; 1757 : 			}
; 1758 : 		_CATCH_ALL
; 1759 : 		_Destroy_if_not_nil(_Newnode);

	push	DWORD PTR __Newnode$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Destroy_if_not_nil

; 1760 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN735@Insert_hin:
$LN731@Insert_hin:
	mov	ebx, edi
$LN35@Insert_hin:

; 1761 : 		_CATCH_END
; 1762 : 
; 1763 : 		return (_Insert_nohint(_Leftish,

	push	DWORD PTR __Newnode$[ebp]
	lea	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	push	DWORD PTR __Val$[ebp]
	mov	ecx, ebx
	push	0
	push	eax
	call	??$_Insert_nohint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_nohint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx

; 1764 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1765 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN734@Insert_hin:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert_hint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Insert_hint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Insert_hint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_hint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
$T3 = -24						; size = 4
__Pnode$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_<_Val_0>$ = 8						; size = 4
??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>, COMDAT
; _this$ = ecx

; 880  : 		{	// allocate a node with defaults and set links and value

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 881  : 		_Nodeptr _Pnode = _Buynode0();

	call	?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode0
	mov	ebx, eax

; 884  : 		this->_Isnil(_Pnode) = false;
; 885  : 
; 886  : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	DWORD PTR __Pnode$[ebp], ebx

; 603  : 		return ((reference)_Pnode->_Myval);

	lea	edi, DWORD PTR [ebx+16]

; 882  : 
; 883  : 		this->_Color(_Pnode) = _Red;

	mov	WORD PTR [ebx+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 725  : 	return (__builtin_addressof(_Val));

	mov	DWORD PTR $T3[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR $T2[ebp], edi
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	test	edi, edi
	je	SHORT $LN47@Buynode
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 188  : : cstr_( other.index_ != noDuplication &&  other.cstr_ != 0

	mov	esi, DWORD PTR _<_Val_0>$[ebp]
	cmp	DWORD PTR [esi+4], 0
	je	SHORT $LN61@Buynode
	cmp	DWORD PTR [esi], 0
	je	SHORT $LN61@Buynode
	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+4]
	jmp	SHORT $LN62@Buynode
$LN61@Buynode:
	mov	eax, DWORD PTR [esi]
$LN62@Buynode:
	mov	DWORD PTR [edi], eax

; 189  :                 ?  valueAllocator()->makeMemberName( other.cstr_ )
; 190  :                 : other.cstr_ )
; 191  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	DWORD PTR [esi], 0
	je	SHORT $LN63@Buynode
	xor	eax, eax
	cmp	DWORD PTR [esi+4], eax
	setne	al
	jmp	SHORT $LN64@Buynode
$LN63@Buynode:
	mov	eax, DWORD PTR [esi+4]
$LN64@Buynode:
	mov	DWORD PTR [edi+4], eax

	lea	eax, DWORD PTR [esi+8]
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	push	eax
	lea	ecx, DWORD PTR [edi+8]
	call	??0Value@Json@@QAE@ABV01@@Z		; Json::Value::Value
$LN47@Buynode:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 895  : 		return (_Pnode);

	mov	eax, ebx

; 896  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
__catch$??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z$0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	40					; 00000028H
	push	1
	push	DWORD PTR __Pnode$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 892  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN151@Buynode:
$LN150@Buynode:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z$9:
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z$11:
	mov	ecx, DWORD PTR $T2[ebp]
	jmp	??1CZString@Value@Json@@QAE@XZ		; Json::Value::CZString::~CZString
__ehhandler$??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$equal@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@U?$equal_to@X@2@@std@@YA_NV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@00U?$equal_to@X@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$equal@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@U?$equal_to@X@2@@std@@YA_NV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@00U?$equal_to@X@0@@Z PROC ; std::equal<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::equal_to<void> >, COMDAT

; 2982 : 	{	// compare [_First1, _Last1) to [_First2, ...) using _Pred

	push	ebp
	mov	ebp, esp
	push	ecx

; 2897 : 	return {};

	mov	BYTE PTR $T1[ebp], 0

; 2942 : 	return (_Equal_unchecked1(_First1, _Last1, _First2, _Pred,

	lea	eax, DWORD PTR __Pred$[ebp]
	push	DWORD PTR $T1[ebp]
	push	eax
	push	DWORD PTR __First2$[ebp]
	push	DWORD PTR __Last1$[ebp]
	push	DWORD PTR __First1$[ebp]
	call	??$_Equal_unchecked1@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$equal_to@X@2@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@00AAU?$equal_to@X@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Equal_unchecked1<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::equal_to<void> >
	add	esp, 20					; 00000014H

; 2983 : 	_DEPRECATE_UNCHECKED(equal, _First2);
; 2984 : 	return (_Equal_no_deprecate(_First1, _Last1, _First2, _Pred));
; 2985 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$equal@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@U?$equal_to@X@2@@std@@YA_NV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@00U?$equal_to@X@0@@Z ENDP ; std::equal<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::equal_to<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$lexicographical_compare@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@U?$less@X@2@@std@@YA_NV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@000U?$less@X@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
__Last2$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$lexicographical_compare@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@U?$less@X@2@@std@@YA_NV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@000U?$less@X@0@@Z PROC ; std::lexicographical_compare<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::less<void> >, COMDAT

; 3178 : 	{	// order [_First1, _Last1) vs. [_First2, _Last2) using _Pred

	push	ebp
	mov	ebp, esp
	push	ecx

; 3121 : 	return {};

	mov	BYTE PTR $T1[ebp], 0

; 3169 : 	return (_Lex_compare_unchecked1(_First1, _Last1, _First2, _Last2, _Pred,

	lea	eax, DWORD PTR __Pred$[ebp]
	push	DWORD PTR $T1[ebp]
	push	eax
	push	DWORD PTR __Last2$[ebp]
	push	DWORD PTR __First2$[ebp]
	push	DWORD PTR __Last1$[ebp]
	push	DWORD PTR __First1$[ebp]
	call	??$_Lex_compare_unchecked1@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$less@X@2@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@000AAU?$less@X@0@U?$_Lex_compare_optimize@X@0@@Z ; std::_Lex_compare_unchecked1<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::less<void> >
	add	esp, 24					; 00000018H

; 3179 : 	_DEBUG_RANGE(_First1, _Last1);
; 3180 : 	_DEBUG_RANGE(_First2, _Last2);
; 3181 : 	_DEBUG_POINTER_IF(_First1 != _Last1 && _First2 != _Last2, _Pred);
; 3182 : 	return (_Lex_compare_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
; 3183 : 		_Unchecked(_First2), _Unchecked(_Last2), _Pred));
; 3184 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$lexicographical_compare@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@U?$less@X@2@@std@@YA_NV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@000U?$less@X@0@@Z ENDP ; std::lexicographical_compare<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@AAV01@X$0A@@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@AAV01@X$0A@@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@0@Z PROC ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > >::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > ><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > &,std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > &,void,0>, COMDAT
; _this$ = ecx

; 172  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp

; 170  : 		: first(_STD forward<_Other1>(_Val1)),

	mov	eax, DWORD PTR __Val1$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax

; 171  : 				second(_STD forward<_Other2>(_Val2))

	mov	eax, DWORD PTR __Val2$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax

; 173  : 		}

	mov	eax, ecx
	pop	ebp
	ret	8
??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@AAV01@X$0A@@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@0@Z ENDP ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > >::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > ><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > &,std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > &,void,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAPAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::construct<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * &>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN8@construct
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN8@construct:

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 858  : 		}

	pop	ebp
	ret	0
??$construct@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAPAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::construct<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * &>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

	pop	ebp
	ret	0
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Destroy_range1<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT

; 1099 : 	{	// destroy [_First, _Last), no special optimization

	push	ebp
	mov	ebp, esp
	push	esi

; 1100 : 	for (; _First != _Last; ++_First)

	mov	esi, DWORD PTR __First$[ebp]
	push	edi
	mov	edi, DWORD PTR __Last$[ebp]
	cmp	esi, edi
	je	SHORT $LN149@Destroy_ra
	add	esi, 20					; 00000014H
$LL4@Destroy_ra:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

	mov	eax, DWORD PTR [esi]
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN104@Destroy_ra
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	mov	ecx, DWORD PTR [esi-20]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 96   : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN99@Destroy_ra

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

	test	cl, 31					; 0000001fH
	jne	SHORT $LN145@Destroy_ra

; 100  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 101  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 102  : 		const uintptr_t _Ptr_container =
; 103  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

	mov	eax, DWORD PTR [ecx-4]

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

	cmp	eax, ecx
	jae	SHORT $LN145@Destroy_ra

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

	sub	ecx, eax
	cmp	ecx, 4
	jb	SHORT $LN145@Destroy_ra

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

	cmp	ecx, 35					; 00000023H
	ja	SHORT $LN145@Destroy_ra

; 126  : 			<= _NON_USER_SIZE);
; 127  : 
; 128  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

	mov	ecx, eax
$LN99@Destroy_ra:

; 129  : 		}
; 130  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 131  : 
; 132  : 	::operator delete(_Ptr);

	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN104@Destroy_ra:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi], 15			; 0000000fH

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi], 16			; 00000010H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi-4], 0

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN127@Destroy_ra
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi-20]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jmp	SHORT $LN128@Destroy_ra
$LN127@Destroy_ra:
	lea	eax, DWORD PTR [esi-20]
$LN128@Destroy_ra:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1100 : 	for (; _First != _Last; ++_First)

	add	esi, 24					; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1100 : 	for (; _First != _Last; ++_First)

	lea	eax, DWORD PTR [esi-20]
	cmp	eax, edi
	jne	SHORT $LL4@Destroy_ra
$LN149@Destroy_ra:
	pop	edi
	pop	esi

; 1101 : 		_Al.destroy(_Unfancy(_First));
; 1102 : 	}

	pop	ebp
	ret	0
$LN145@Destroy_ra:

; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN152@Destroy_ra:
$LN151@Destroy_ra:
	int	3
??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Destroy_range1<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@PBVPathArgument@Json@@@std@@PAPBVPathArgument@Json@@@std@@YAXPAPBVPathArgument@Json@@0AAU?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range1@V?$allocator@PBVPathArgument@Json@@@std@@PAPBVPathArgument@Json@@@std@@YAXPAPBVPathArgument@Json@@0AAU?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Destroy_range1<std::allocator<Json::PathArgument const *>,Json::PathArgument const * *>, COMDAT

; 1108 : 		// nothing to do
; 1109 : 	}

	ret	0
??$_Destroy_range1@V?$allocator@PBVPathArgument@Json@@@std@@PAPBVPathArgument@Json@@@std@@YAXPAPBVPathArgument@Json@@0AAU?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Destroy_range1<std::allocator<Json::PathArgument const *>,Json::PathArgument const * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPBVPathArgument@Json@@PAPBV12@V?$allocator@PBVPathArgument@Json@@@std@@@std@@YAPAPBVPathArgument@Json@@PAPBV12@00AAU?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPBVPathArgument@Json@@PAPBV12@V?$allocator@PBVPathArgument@Json@@@std@@@std@@YAPAPBVPathArgument@Json@@PAPBV12@00AAU?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@0@@Z PROC ; std::_Uninitialized_move<Json::PathArgument const * *,Json::PathArgument const * *,std::allocator<Json::PathArgument const *> >, COMDAT

; 313  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2305 : 	const size_t _Count = _Last_ch - _First_ch;

	mov	eax, DWORD PTR __First$[ebp]
	push	esi

; 2306 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	esi, DWORD PTR __Dest$[ebp]
	push	edi

; 2305 : 	const size_t _Count = _Last_ch - _First_ch;

	mov	edi, DWORD PTR __Last$[ebp]
	sub	edi, eax

; 2306 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	push	edi
	push	eax
	push	esi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH

; 2307 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

	lea	eax, DWORD PTR [edi+esi]
	pop	edi
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 319  : 	}

	pop	ebp
	ret	0
??$_Uninitialized_move@PAPBVPathArgument@Json@@PAPBV12@V?$allocator@PBVPathArgument@Json@@@std@@@std@@YAPAPBVPathArgument@Json@@PAPBV12@00AAU?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<Json::PathArgument const * *,Json::PathArgument const * *,std::allocator<Json::PathArgument const *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@VPathArgument@Json@@@std@@PAVPathArgument@Json@@@std@@YAXPAVPathArgument@Json@@0AAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range1@V?$allocator@VPathArgument@Json@@@std@@PAVPathArgument@Json@@@std@@YAXPAVPathArgument@Json@@0AAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Destroy_range1<std::allocator<Json::PathArgument>,Json::PathArgument *>, COMDAT

; 1099 : 	{	// destroy [_First, _Last), no special optimization

	push	ebp
	mov	ebp, esp
	push	esi

; 1100 : 	for (; _First != _Last; ++_First)

	mov	esi, DWORD PTR __First$[ebp]
	push	edi
	mov	edi, DWORD PTR __Last$[ebp]
	cmp	esi, edi
	je	SHORT $LN153@Destroy_ra
	add	esi, 20					; 00000014H
$LL4@Destroy_ra:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

	mov	eax, DWORD PTR [esi]
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN107@Destroy_ra
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	mov	ecx, DWORD PTR [esi-20]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 96   : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN102@Destroy_ra

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

	test	cl, 31					; 0000001fH
	jne	SHORT $LN149@Destroy_ra

; 100  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 101  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 102  : 		const uintptr_t _Ptr_container =
; 103  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

	mov	eax, DWORD PTR [ecx-4]

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

	cmp	eax, ecx
	jae	SHORT $LN149@Destroy_ra

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

	sub	ecx, eax
	cmp	ecx, 4
	jb	SHORT $LN149@Destroy_ra

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

	cmp	ecx, 35					; 00000023H
	ja	SHORT $LN149@Destroy_ra

; 126  : 			<= _NON_USER_SIZE);
; 127  : 
; 128  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

	mov	ecx, eax
$LN102@Destroy_ra:

; 129  : 		}
; 130  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 131  : 
; 132  : 	::operator delete(_Ptr);

	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN107@Destroy_ra:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi], 15			; 0000000fH

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi], 16			; 00000010H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi-4], 0

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN130@Destroy_ra
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi-20]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jmp	SHORT $LN131@Destroy_ra
$LN130@Destroy_ra:
	lea	eax, DWORD PTR [esi-20]
$LN131@Destroy_ra:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1100 : 	for (; _First != _Last; ++_First)

	add	esi, 32					; 00000020H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1100 : 	for (; _First != _Last; ++_First)

	lea	eax, DWORD PTR [esi-20]
	cmp	eax, edi
	jne	SHORT $LL4@Destroy_ra
$LN153@Destroy_ra:
	pop	edi
	pop	esi

; 1101 : 		_Al.destroy(_Unfancy(_First));
; 1102 : 	}

	pop	ebp
	ret	0
$LN149@Destroy_ra:

; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN156@Destroy_ra:
$LN155@Destroy_ra:
	int	3
??$_Destroy_range1@V?$allocator@VPathArgument@Json@@@std@@PAVPathArgument@Json@@@std@@YAXPAVPathArgument@Json@@0AAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Destroy_range1<std::allocator<Json::PathArgument>,Json::PathArgument *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@@std@@YAPAVPathArgument@Json@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@@std@@YAPAVPathArgument@Json@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@0@@Z PROC ; std::_Uninitialized_move<Json::PathArgument *,Json::PathArgument *,std::allocator<Json::PathArgument> >, COMDAT

; 313  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	push	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 810  : 	return {};

	mov	BYTE PTR $T1[ebp], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	push	DWORD PTR $T1[ebp]
	push	DWORD PTR __Al$[ebp]
	push	DWORD PTR __Dest$[ebp]
	push	DWORD PTR __Last$[ebp]
	push	DWORD PTR __First$[ebp]
	call	??$_Uninitialized_move_al_unchecked1@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@@std@@YAPAVPathArgument@Json@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_move_al_unchecked1<Json::PathArgument *,Json::PathArgument *,std::allocator<Json::PathArgument> >
	add	esp, 24					; 00000018H

; 314  : 		// note: only called internally from elsewhere in the STL, debug checks
; 315  : 		// and deprecation warnings omitted
; 316  : 	return (_Rechecked(_Dest,
; 317  : 		_Uninitialized_move_al_unchecked(_Unchecked(_First), _Unchecked(_Last),
; 318  : 			_Unchecked(_Dest), _Al)));
; 319  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@@std@@YAPAVPathArgument@Json@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<Json::PathArgument *,Json::PathArgument *,std::allocator<Json::PathArgument> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1><>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		: _Myhead(),

	mov	DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 281  : 		}

	mov	eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 568  : 		_Mysize(0)

	mov	DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 281  : 		}

	ret	4
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z PROC ; std::forward<std::_Zero_then_variadic_args_t>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

	pop	ebp
	ret	0
??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z ENDP ; std::forward<std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABU?$less@VCZString@Value@Json@@@std@@@std@@YAABU?$less@VCZString@Value@Json@@@0@ABU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABU?$less@VCZString@Value@Json@@@std@@@std@@YAABU?$less@VCZString@Value@Json@@@0@ABU10@@Z PROC ; std::forward<std::less<Json::Value::CZString> const &>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

	pop	ebp
	ret	0
??$forward@ABU?$less@VCZString@Value@Json@@@std@@@std@@YAABU?$less@VCZString@Value@Json@@@0@ABU10@@Z ENDP ; std::forward<std::less<Json::Value::CZString> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::destroy<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>, COMDAT

; 864  : 		_Al.destroy(_Ptr);
; 865  : 		}

	ret	0
??$destroy@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::destroy<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN8@construct
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN8@construct:

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 858  : 		}

	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 864  : 		_Al.destroy(_Ptr);
; 865  : 		}

	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

	pop	ebp
	ret	0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 313  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	push	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 810  : 	return {};

	mov	BYTE PTR $T1[ebp], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	push	DWORD PTR $T1[ebp]
	push	DWORD PTR __Al$[ebp]
	push	DWORD PTR __Dest$[ebp]
	push	DWORD PTR __Last$[ebp]
	push	DWORD PTR __First$[ebp]
	call	??$_Uninitialized_move_al_unchecked1@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_move_al_unchecked1<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
	add	esp, 24					; 00000018H

; 314  : 		// note: only called internally from elsewhere in the STL, debug checks
; 315  : 		// and deprecation warnings omitted
; 316  : 	return (_Rechecked(_Dest,
; 317  : 		_Uninitialized_move_al_unchecked(_Unchecked(_First), _Unchecked(_Last),
; 318  : 			_Unchecked(_Dest), _Al)));
; 319  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@AAV01@X$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@AAV01@X$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@0@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > >::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > ><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > &,std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > &,void,0>, COMDAT
; _this$ = ecx

; 172  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp

; 170  : 		: first(_STD forward<_Other1>(_Val1)),

	mov	eax, DWORD PTR __Val1$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax

; 171  : 				second(_STD forward<_Other2>(_Val2))

	mov	eax, DWORD PTR __Val2$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], eax

; 173  : 		}

	mov	eax, ecx
	pop	ebp
	ret	8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@AAV01@X$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@0@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > >::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > ><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > &,std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > &,void,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@YA$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@YA$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@0@AAV10@@Z PROC ; std::forward<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

	pop	ebp
	ret	0
??$forward@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@YA$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@0@AAV10@@Z ENDP ; std::forward<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><std::_Wrap_alloc<std::allocator<char> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 496  : 		_Mysize(0),

	mov	DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 290  : 		}

	mov	eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 497  : 		_Myres(0)

	mov	DWORD PTR [ecx+20], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 290  : 		}

	ret	8
??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><std::_Wrap_alloc<std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AAU10@@Z PROC ; std::forward<std::_Wrap_alloc<std::allocator<char> > >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

	pop	ebp
	ret	0
??$forward@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AAU10@@Z ENDP ; std::forward<std::_Wrap_alloc<std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 485  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 290  : 		}

	mov	eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 486  : 		_Mylast(),

	mov	DWORD PTR [ecx+4], 0

; 487  : 		_Myend()

	mov	DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 290  : 		}

	ret	8
??$?0U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@AAU10@@Z PROC ; std::forward<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

	pop	ebp
	ret	0
??$forward@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@AAU10@@Z ENDP ; std::forward<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV31@@Z PROC ; std::allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN8@construct
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	push	DWORD PTR _<_Args_0>$[ebp]

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	call	?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
$LN8@construct:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 858  : 		}

	pop	ebp
	ret	0
??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV31@@Z ENDP ; std::allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Copy@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXABV01@U_Copy_tag@01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Movefl$ = 12						; size = 1
??$_Copy@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXABV01@U_Copy_tag@01@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>, COMDAT
; _this$ = ecx

; 1920 : 		{	// copy or move entire tree from _Right

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	edi, DWORD PTR __Right$[ebp]

; 1920 : 		{	// copy or move entire tree from _Right

	mov	ebx, ecx

; 1921 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);

	push	DWORD PTR __Movefl$[ebp]

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	eax, DWORD PTR [edi]
	mov	esi, DWORD PTR [ebx]

; 1921 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);

	push	esi
	push	DWORD PTR [eax+4]
	call	??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>
	mov	DWORD PTR [esi+4], eax

; 1922 : 		this->_Mysize() = _Right.size();

	mov	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [ebx+4], eax

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	edx, DWORD PTR [ebx]

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	ecx, DWORD PTR [edx+4]

; 1923 : 		if (!this->_Isnil(_Root()))

	cmp	BYTE PTR [ecx+13], 0
	jne	SHORT $LN2@Copy

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN124@Copy
$LL123@Copy:

; 616  : 			_Pnode = _Left(_Pnode);

	mov	ecx, eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL123@Copy
$LN124@Copy:

; 1924 : 			{	// nonempty tree, look for new smallest and largest
; 1925 : 			_Lmost() = this->_Min(_Root());

	mov	DWORD PTR [edx], ecx

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	edx, DWORD PTR [ebx]

; 693  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));

	mov	ecx, DWORD PTR [edx+4]

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx+8]

; 608  : 		while (!_Isnil(_Right(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN172@Copy
$LL171@Copy:

; 609  : 			_Pnode = _Right(_Pnode);

	mov	ecx, eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx+8]

; 608  : 		while (!_Isnil(_Right(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL171@Copy
$LN172@Copy:
	pop	edi
	pop	esi

; 1926 : 			_Rmost() = this->_Max(_Root());

	mov	DWORD PTR [edx+8], ecx
	pop	ebx

; 1932 : 			}
; 1933 : 		}

	pop	ebp
	ret	8
$LN2@Copy:

; 1927 : 			}
; 1928 : 		else
; 1929 : 			{	// empty tree, just tidy head pointers
; 1930 : 			_Lmost() = this->_Myhead();

	mov	DWORD PTR [edx], edx

; 598  : 		return ((_Nodepref)_Pnode->_Right);

	mov	eax, DWORD PTR [ebx]
	pop	edi
	pop	esi
	pop	ebx

; 1931 : 			_Rmost() = this->_Myhead();

	mov	DWORD PTR [eax+8], eax

; 1932 : 			}
; 1933 : 		}

	pop	ebp
	ret	8
??$_Copy@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXABV01@U_Copy_tag@01@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@X@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@X@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,void>, COMDAT
; _this$ = ecx

; 714  : 		{	// construct from comparator, allocator

	push	esi
	mov	esi, ecx

; 567  : 		: _Myhead(),

	mov	DWORD PTR [esi], 0

; 568  : 		_Mysize(0)

	mov	DWORD PTR [esi+4], 0

; 721  : 		_Myhead() = _Buyheadnode();

	call	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buyheadnode
	mov	DWORD PTR [esi], eax

; 715  : 		_Construct();
; 716  : 		}

	mov	eax, esi
	pop	esi
	ret	8
??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@X@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@0@AAU10@@Z PROC ; std::forward<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > > >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

	pop	ebp
	ret	0
??$forward@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@0@AAU10@@Z ENDP ; std::forward<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PBVPathArgument@Json@@PBV12@@?$allocator_traits@V?$allocator@PBVPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@PBVPathArgument@Json@@@1@PAPBVPathArgument@Json@@$$QAPBV34@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PBVPathArgument@Json@@PBV12@@?$allocator_traits@V?$allocator@PBVPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@PBVPathArgument@Json@@@1@PAPBVPathArgument@Json@@$$QAPBV34@@Z PROC ; std::allocator_traits<std::allocator<Json::PathArgument const *> >::construct<Json::PathArgument const *,Json::PathArgument const *>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN8@construct
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN8@construct:

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 858  : 		}

	pop	ebp
	ret	0
??$construct@PBVPathArgument@Json@@PBV12@@?$allocator_traits@V?$allocator@PBVPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@PBVPathArgument@Json@@@1@PAPBVPathArgument@Json@@$$QAPBV34@@Z ENDP ; std::allocator_traits<std::allocator<Json::PathArgument const *> >::construct<Json::PathArgument const *,Json::PathArgument const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@VPathArgument@Json@@V12@@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@VPathArgument@Json@@@1@PAVPathArgument@Json@@$$QAV34@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@VPathArgument@Json@@V12@@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@VPathArgument@Json@@@1@PAVPathArgument@Json@@$$QAV34@@Z PROC ; std::allocator_traits<std::allocator<Json::PathArgument> >::construct<Json::PathArgument,Json::PathArgument>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	edi

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	edi, DWORD PTR __Ptr$[ebp]
	test	edi, edi
	je	SHORT $LN8@construct
	push	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	mov	esi, DWORD PTR _<_Args_0>$[ebp]
	mov	ecx, edi

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [edi+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [edi+16], 0

; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	push	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	call	?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
	mov	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
	mov	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], eax
	pop	esi
$LN8@construct:
	pop	edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 858  : 		}

	pop	ebp
	ret	0
??$construct@VPathArgument@Json@@V12@@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@VPathArgument@Json@@@1@PAVPathArgument@Json@@$$QAV34@@Z ENDP ; std::allocator_traits<std::allocator<Json::PathArgument> >::construct<Json::PathArgument,Json::PathArgument>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@VPathArgument@Json@@ABV12@@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@VPathArgument@Json@@@1@PAVPathArgument@Json@@ABV34@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@VPathArgument@Json@@ABV12@@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@VPathArgument@Json@@@1@PAVPathArgument@Json@@ABV34@@Z PROC ; std::allocator_traits<std::allocator<Json::PathArgument> >::construct<Json::PathArgument,Json::PathArgument const &>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@VPathArgument@Json@@ABV12@@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@VPathArgument@Json@@@1@PAVPathArgument@Json@@ABV34@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	edi, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR $T2[ebp], edi
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	edi, edi
	je	SHORT $LN8@construct
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 782  : 		assign(_Right, 0, npos);

	mov	esi, DWORD PTR _<_Args_0>$[ebp]
	mov	ecx, edi
	push	-1
	push	0

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [edi+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [edi+16], 0

; 782  : 		assign(_Right, 0, npos);

	push	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 782  : 		assign(_Right, 0, npos);

	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
	mov	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], eax
$LN8@construct:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 858  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@VPathArgument@Json@@ABV12@@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@VPathArgument@Json@@@1@PAVPathArgument@Json@@ABV34@@Z$1:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@VPathArgument@Json@@ABV12@@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@VPathArgument@Json@@@1@PAVPathArgument@Json@@ABV34@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@VPathArgument@Json@@ABV12@@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@VPathArgument@Json@@@1@PAVPathArgument@Json@@ABV34@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@VPathArgument@Json@@ABV12@@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@VPathArgument@Json@@@1@PAVPathArgument@Json@@ABV34@@Z ENDP ; std::allocator_traits<std::allocator<Json::PathArgument> >::construct<Json::PathArgument,Json::PathArgument const &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABVPathArgument@Json@@@std@@YAABVPathArgument@Json@@ABV12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABVPathArgument@Json@@@std@@YAABVPathArgument@Json@@ABV12@@Z PROC ; std::forward<Json::PathArgument const &>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

	pop	ebp
	ret	0
??$forward@ABVPathArgument@Json@@@std@@YAABVPathArgument@Json@@ABV12@@Z ENDP ; std::forward<Json::PathArgument const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@VPathArgument@Json@@AAV12@@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@VPathArgument@Json@@@1@PAVPathArgument@Json@@AAV34@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@VPathArgument@Json@@AAV12@@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@VPathArgument@Json@@@1@PAVPathArgument@Json@@AAV34@@Z PROC ; std::allocator_traits<std::allocator<Json::PathArgument> >::construct<Json::PathArgument,Json::PathArgument &>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@VPathArgument@Json@@AAV12@@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@VPathArgument@Json@@@1@PAVPathArgument@Json@@AAV34@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	edi, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR $T2[ebp], edi
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	edi, edi
	je	SHORT $LN8@construct
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 782  : 		assign(_Right, 0, npos);

	mov	esi, DWORD PTR _<_Args_0>$[ebp]
	mov	ecx, edi
	push	-1
	push	0

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [edi+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [edi+16], 0

; 782  : 		assign(_Right, 0, npos);

	push	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 782  : 		assign(_Right, 0, npos);

	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
	mov	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], eax
$LN8@construct:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 858  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@VPathArgument@Json@@AAV12@@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@VPathArgument@Json@@@1@PAVPathArgument@Json@@AAV34@@Z$1:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@VPathArgument@Json@@AAV12@@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@VPathArgument@Json@@@1@PAVPathArgument@Json@@AAV34@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@VPathArgument@Json@@AAV12@@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@VPathArgument@Json@@@1@PAVPathArgument@Json@@AAV34@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@VPathArgument@Json@@AAV12@@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAXAAV?$allocator@VPathArgument@Json@@@1@PAVPathArgument@Json@@AAV34@@Z ENDP ; std::allocator_traits<std::allocator<Json::PathArgument> >::construct<Json::PathArgument,Json::PathArgument &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAVPathArgument@Json@@@std@@YAAAVPathArgument@Json@@AAV12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAVPathArgument@Json@@@std@@YAAAVPathArgument@Json@@AAV12@@Z PROC ; std::forward<Json::PathArgument &>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

	pop	ebp
	ret	0
??$forward@AAVPathArgument@Json@@@std@@YAAAVPathArgument@Json@@AAV12@@Z ENDP ; std::forward<Json::PathArgument &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::destroy<std::pair<Json::Value::CZString const ,Json::Value> >, COMDAT

; 863  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, DWORD PTR __Ptr$[ebp]
	lea	ecx, DWORD PTR [esi+8]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 198  :    if ( cstr_  &&  index_ == duplicate )

	cmp	DWORD PTR [esi], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	je	SHORT $LN167@destroy
	cmp	DWORD PTR [esi+4], 1
	jne	SHORT $LN167@destroy

; 199  :       valueAllocator()->releaseMemberName( const_cast<char *>( cstr_ ) );

	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+8]
$LN167@destroy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 865  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z$33:
	call	___std_terminate
	ret	0
__ehhandler$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@PAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::destroy<std::pair<Json::Value::CZString const ,Json::Value> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAD@std@@YA$$QADAAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAD@std@@YA$$QADAAD@Z PROC			; std::move<char &>, COMDAT

; 1291 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1292 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1293 : 	}

	pop	ebp
	ret	0
??$move@AAD@std@@YA$$QADAAD@Z ENDP			; std::move<char &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Distance1@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YAHV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@0Uinput_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Distance1@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YAHV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@0Uinput_iterator_tag@0@@Z PROC ; std::_Distance1<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > >, COMDAT

; 1099 : 	{	// return distance between iterators; input

	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 336  : 		return (this->_Ptr == _Right._Ptr);

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Last$[ebp]
	push	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 1100 : 	_Iter_diff_t<_InIt> _Off = 0;

	xor	esi, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 336  : 		return (this->_Ptr == _Right._Ptr);

	cmp	eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 1101 : 	for (; _First != _Last; ++_First)

	je	SHORT $LN58@Distance1
$LL16@Distance1:

; 1102 : 		++_Off;

	inc	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 60   : 		if (_Mytree::_Isnil(_Ptr))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN51@Distance1

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	edx, DWORD PTR [eax+8]

; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

	cmp	BYTE PTR [edx+13], 0
	jne	SHORT $LN48@Distance1

; 63   : 			_Ptr = _Mytree::_Min(

	mov	eax, edx

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	edx, DWORD PTR [eax]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [edx+13], 0
	jne	SHORT $LN28@Distance1
	npad	6
$LL27@Distance1:

; 616  : 			_Pnode = _Left(_Pnode);

	mov	eax, edx

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	edx, DWORD PTR [eax]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [edx+13], 0
	je	SHORT $LL27@Distance1

; 65   : 		else

	jmp	SHORT $LN28@Distance1
$LN48@Distance1:

; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

	mov	edx, DWORD PTR [eax+4]
	cmp	BYTE PTR [edx+13], 0
	jne	SHORT $LN59@Distance1
$LL11@Distance1:
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN59@Distance1

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

	mov	eax, edx
	mov	DWORD PTR __First$[ebp], eax
	mov	edx, DWORD PTR [edx+4]
	cmp	BYTE PTR [edx+13], 0
	je	SHORT $LL11@Distance1
$LN59@Distance1:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

	mov	eax, edx
$LN28@Distance1:
	mov	DWORD PTR __First$[ebp], eax
$LN51@Distance1:

; 336  : 		return (this->_Ptr == _Right._Ptr);

	cmp	eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 1101 : 	for (; _First != _Last; ++_First)

	jne	SHORT $LL16@Distance1
$LN58@Distance1:

; 1103 : 
; 1104 : 	return (_Off);

	mov	eax, esi
	pop	esi

; 1105 : 	}

	pop	ebp
	ret	0
??$_Distance1@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YAHV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@0Uinput_iterator_tag@0@@Z ENDP ; std::_Distance1<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PBD@std@@YAPBDPBD@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PBD@std@@YAPBDPBD@Z PROC			; std::_Unchecked<char const *>, COMDAT

; 427  : 	{	// construct unchecked from checked, generic

	push	ebp
	mov	ebp, esp

; 428  : 	return (_Src);

	mov	eax, DWORD PTR __Src$[ebp]

; 429  : 	}

	pop	ebp
	ret	0
??$_Unchecked@PBD@std@@YAPBDPBD@Z ENDP			; std::_Unchecked<char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??$?0ABV?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??$?0ABV?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char> const &,void>, COMDAT
; _this$ = ecx

; 496  : 		_Mysize(0),

	mov	DWORD PTR [ecx+16], 0

; 598  : 		}

	mov	eax, ecx

; 497  : 		_Myres(0)

	mov	DWORD PTR [ecx+20], 0

; 598  : 		}

	ret	4
??$?0ABV?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char> const &,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$emplace_hint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
_<_Val_0>$ = 16						; size = 4
??$emplace_hint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::emplace_hint<std::pair<Json::Value::CZString const ,Json::Value> &>, COMDAT
; _this$ = ecx

; 1083 : 		{	// insert value_type(_Val...) at _Where

	push	ebp
	mov	ebp, esp
	push	edi

; 1084 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

	push	DWORD PTR _<_Val_0>$[ebp]
	mov	edi, ecx
	call	??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>

; 1085 : 		return (_Insert_hint(_Where,

	push	eax

; 603  : 		return ((reference)_Pnode->_Myval);

	add	eax, 16					; 00000010H

; 1085 : 		return (_Insert_hint(_Where,

	mov	ecx, edi
	push	eax
	push	DWORD PTR __Where$[ebp]
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	??$_Insert_hint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_hint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi

; 1086 : 			this->_Myval(_Newnode), _Newnode));
; 1087 : 		}

	pop	ebp
	ret	12					; 0000000cH
??$emplace_hint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::emplace_hint<std::pair<Json::Value::CZString const ,Json::Value> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAAAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAAAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AAU10@@Z PROC ; std::forward<std::pair<Json::Value::CZString const ,Json::Value> &>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

	pop	ebp
	ret	0
??$forward@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAAAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AAU10@@Z ENDP ; std::forward<std::pair<Json::Value::CZString const ,Json::Value> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABVValue@Json@@@std@@YAABVValue@Json@@ABV12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABVValue@Json@@@std@@YAABVValue@Json@@ABV12@@Z PROC ; std::forward<Json::Value const &>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

	pop	ebp
	ret	0
??$forward@ABVValue@Json@@@std@@YAABVValue@Json@@ABV12@@Z ENDP ; std::forward<Json::Value const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAVCZString@Value@Json@@@std@@YAAAVCZString@Value@Json@@AAV123@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAVCZString@Value@Json@@@std@@YAAAVCZString@Value@Json@@AAV123@@Z PROC ; std::forward<Json::Value::CZString &>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

	pop	ebp
	ret	0
??$forward@AAVCZString@Value@Json@@@std@@YAAAVCZString@Value@Json@@AAV123@@Z ENDP ; std::forward<Json::Value::CZString &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$equal@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@@std@@YA_NV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@00@Z
_TEXT	SEGMENT
$T1 = -8						; size = 1
__Pred$ = -4						; size = 1
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
??$equal@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@@std@@YA_NV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@00@Z PROC ; std::equal<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > >, COMDAT

; 3006 : 	{	// compare [_First1, _Last1) to [_First2, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2897 : 	return {};

	mov	BYTE PTR $T1[ebp], 0

; 2942 : 	return (_Equal_unchecked1(_First1, _Last1, _First2, _Pred,

	lea	eax, DWORD PTR __Pred$[ebp]
	push	DWORD PTR $T1[ebp]
	push	eax
	push	DWORD PTR __First2$[ebp]
	push	DWORD PTR __Last1$[ebp]
	push	DWORD PTR __First1$[ebp]
	call	??$_Equal_unchecked1@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$equal_to@X@2@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@00AAU?$equal_to@X@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Equal_unchecked1<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::equal_to<void> >
	add	esp, 20					; 00000014H

; 3007 : 	return (_STD equal(_First1, _Last1, _First2,
; 3008 : 		equal_to<>()));
; 3009 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$equal@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@@std@@YA_NV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@00@Z ENDP ; std::equal<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$lexicographical_compare@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@@std@@YA_NV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@000@Z
_TEXT	SEGMENT
$T1 = -8						; size = 1
__Pred$ = -4						; size = 1
__First1$ = 8						; size = 4
__Last1$ = 12						; size = 4
__First2$ = 16						; size = 4
__Last2$ = 20						; size = 4
??$lexicographical_compare@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@@std@@YA_NV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@000@Z PROC ; std::lexicographical_compare<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > >, COMDAT

; 3191 : 	{	// order [_First1, _Last1) vs. [_First2, _Last2)

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 3121 : 	return {};

	mov	BYTE PTR $T1[ebp], 0

; 3169 : 	return (_Lex_compare_unchecked1(_First1, _Last1, _First2, _Last2, _Pred,

	lea	eax, DWORD PTR __Pred$[ebp]
	push	DWORD PTR $T1[ebp]
	push	eax
	push	DWORD PTR __Last2$[ebp]
	push	DWORD PTR __First2$[ebp]
	push	DWORD PTR __Last1$[ebp]
	push	DWORD PTR __First1$[ebp]
	call	??$_Lex_compare_unchecked1@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$less@X@2@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@000AAU?$less@X@0@U?$_Lex_compare_optimize@X@0@@Z ; std::_Lex_compare_unchecked1<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::less<void> >
	add	esp, 24					; 00000018H

; 3192 : 	return (_STD lexicographical_compare(_First1, _Last1,
; 3193 : 		_First2, _Last2, less<>()));
; 3194 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$lexicographical_compare@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@@std@@YA_NV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@000@Z ENDP ; std::lexicographical_compare<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >,std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AATValueHolder@Value@Json@@@std@@YA$$QATValueHolder@Value@Json@@AAT123@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AATValueHolder@Value@Json@@@std@@YA$$QATValueHolder@Value@Json@@AAT123@@Z PROC ; std::move<Json::Value::ValueHolder &>, COMDAT

; 1291 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1292 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1293 : 	}

	pop	ebp
	ret	0
??$move@AATValueHolder@Value@Json@@@std@@YA$$QATValueHolder@Value@Json@@AAT123@@Z ENDP ; std::move<Json::Value::ValueHolder &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAPBD@std@@YA$$QAPBDAAPBD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAPBD@std@@YA$$QAPBDAAPBD@Z PROC		; std::move<char const * &>, COMDAT

; 1291 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1292 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1293 : 	}

	pop	ebp
	ret	0
??$move@AAPBD@std@@YA$$QAPBDAAPBD@Z ENDP		; std::move<char const * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAH@std@@YA$$QAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAH@std@@YA$$QAHAAH@Z PROC			; std::move<int &>, COMDAT

; 1291 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1292 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1293 : 	}

	pop	ebp
	ret	0
??$move@AAH@std@@YA$$QAHAAH@Z ENDP			; std::move<int &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAPAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::construct<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * &>, COMDAT
; _this$ = ecx

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN13@construct
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN13@construct:

; 995  : 		_Mytraits::construct(*this, _Ptr,
; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

	pop	ebp
	ret	8
??$construct@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAPAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::construct<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT

; 1114 : 	{	// destroy [_First, _Last), choose optimization

	push	ebp
	mov	ebp, esp
	push	ecx

; 1115 : 		// note that this is an optimization for debug mode codegen;
; 1116 : 		// in release mode the BE removes all of this
; 1117 : 	typedef typename _Alloc::value_type _Val;
; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

	push	DWORD PTR $T1[ebp]
	push	DWORD PTR __Al$[ebp]
	push	DWORD PTR __Last$[ebp]
	push	DWORD PTR __First$[ebp]
	call	??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
	add	esp, 16					; 00000010H

; 1119 : 		is_trivially_destructible<_Val>,
; 1120 : 		_Uses_default_destroy<_Alloc, _Val *>>::type());
; 1121 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@PBVPathArgument@Json@@@std@@PAPBVPathArgument@Json@@@std@@YAXPAPBVPathArgument@Json@@0AAU?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PBVPathArgument@Json@@@std@@PAPBVPathArgument@Json@@@std@@YAXPAPBVPathArgument@Json@@0AAU?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Json::PathArgument const *>,Json::PathArgument const * *>, COMDAT

; 1115 : 		// note that this is an optimization for debug mode codegen;
; 1116 : 		// in release mode the BE removes all of this
; 1117 : 	typedef typename _Alloc::value_type _Val;
; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<
; 1119 : 		is_trivially_destructible<_Val>,
; 1120 : 		_Uses_default_destroy<_Alloc, _Val *>>::type());
; 1121 : 	}

	ret	0
??$_Destroy_range@V?$allocator@PBVPathArgument@Json@@@std@@PAPBVPathArgument@Json@@@std@@YAXPAPBVPathArgument@Json@@0AAU?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Json::PathArgument const *>,Json::PathArgument const * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAPBVPathArgument@Json@@@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEPAPBVPathArgument@Json@@PAPBV23@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPBVPathArgument@Json@@@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEPAPBVPathArgument@Json@@PAPBV23@00@Z PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Umove<Json::PathArgument const * *>, COMDAT
; _this$ = ecx

; 1658 : 		{	// move initializing [_First, _Last), using allocator

	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2305 : 	const size_t _Count = _Last_ch - _First_ch;

	mov	eax, DWORD PTR __First$[ebp]
	push	esi

; 2306 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	esi, DWORD PTR __Ptr$[ebp]
	push	edi

; 2305 : 	const size_t _Count = _Last_ch - _First_ch;

	mov	edi, DWORD PTR __Last$[ebp]
	sub	edi, eax

; 2306 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	push	edi
	push	eax
	push	esi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH

; 2307 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

	lea	eax, DWORD PTR [edi+esi]
	pop	edi
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1661 : 		}

	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAPBVPathArgument@Json@@@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEPAPBVPathArgument@Json@@PAPBV23@00@Z ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Umove<Json::PathArgument const * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@VPathArgument@Json@@@std@@PAVPathArgument@Json@@@std@@YAXPAVPathArgument@Json@@0AAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@VPathArgument@Json@@@std@@PAVPathArgument@Json@@@std@@YAXPAVPathArgument@Json@@0AAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Json::PathArgument>,Json::PathArgument *>, COMDAT

; 1114 : 	{	// destroy [_First, _Last), choose optimization

	push	ebp
	mov	ebp, esp
	push	ecx

; 1115 : 		// note that this is an optimization for debug mode codegen;
; 1116 : 		// in release mode the BE removes all of this
; 1117 : 	typedef typename _Alloc::value_type _Val;
; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

	push	DWORD PTR $T1[ebp]
	push	DWORD PTR __Al$[ebp]
	push	DWORD PTR __Last$[ebp]
	push	DWORD PTR __First$[ebp]
	call	??$_Destroy_range1@V?$allocator@VPathArgument@Json@@@std@@PAVPathArgument@Json@@@std@@YAXPAVPathArgument@Json@@0AAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<Json::PathArgument>,Json::PathArgument *>
	add	esp, 16					; 00000010H

; 1119 : 		is_trivially_destructible<_Val>,
; 1120 : 		_Uses_default_destroy<_Alloc, _Val *>>::type());
; 1121 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@VPathArgument@Json@@@std@@PAVPathArgument@Json@@@std@@YAXPAVPathArgument@Json@@0AAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Json::PathArgument>,Json::PathArgument *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAVPathArgument@Json@@@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEPAVPathArgument@Json@@PAV23@00@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAVPathArgument@Json@@@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEPAVPathArgument@Json@@PAV23@00@Z PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Umove<Json::PathArgument *>, COMDAT
; _this$ = ecx

; 1658 : 		{	// move initializing [_First, _Last), using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	push	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 810  : 	return {};

	mov	BYTE PTR $T1[ebp], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	push	DWORD PTR $T1[ebp]
	push	ecx
	push	DWORD PTR __Ptr$[ebp]
	push	DWORD PTR __Last$[ebp]
	push	DWORD PTR __First$[ebp]
	call	??$_Uninitialized_move_al_unchecked1@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@@std@@YAPAVPathArgument@Json@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_move_al_unchecked1<Json::PathArgument *,Json::PathArgument *,std::allocator<Json::PathArgument> >
	add	esp, 24					; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1661 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAVPathArgument@Json@@@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEPAVPathArgument@Json@@PAV23@00@Z ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Umove<Json::PathArgument *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
;	COMDAT ??$_Kfn@$$CBVCZString@Value@Json@@V23@@?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@SAABVCZString@Value@Json@@ABU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_Kfn@$$CBVCZString@Value@Json@@V23@@?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@SAABVCZString@Value@Json@@ABU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z PROC ; std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0>::_Kfn<Json::Value::CZString const ,Json::Value>, COMDAT

; 61   : 		{	// extract key from element value

	push	ebp
	mov	ebp, esp

; 62   : 		return (_Val.first);

	mov	eax, DWORD PTR __Val$[ebp]

; 63   : 		}

	pop	ebp
	ret	0
??$_Kfn@$$CBVCZString@Value@Json@@V23@@?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@SAABVCZString@Value@Json@@ABU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ENDP ; std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0>::_Kfn<Json::Value::CZString const ,Json::Value>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABU?$less@VCZString@Value@Json@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@VCZString@Value@Json@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
_<_Val2_0>$ = 16					; size = 4
??$?0ABU?$less@VCZString@Value@Json@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@VCZString@Value@Json@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1><std::less<Json::Value::CZString> const &,std::_Zero_then_variadic_args_t>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		: _Myhead(),

	mov	DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 290  : 		}

	mov	eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 568  : 		_Mysize(0)

	mov	DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 290  : 		}

	ret	12					; 0000000cH
??$?0ABU?$less@VCZString@Value@Json@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@VCZString@Value@Json@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1><std::less<Json::Value::CZString> const &,std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::destroy<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>, COMDAT
; _this$ = ecx

; 1003 : 		_Mytraits::destroy(*this, _Ptr);
; 1004 : 		}

	ret	4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::destroy<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>, COMDAT

; 724  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 725  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 726  : 	}

	pop	ebp
	ret	0
??$addressof@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN13@construct
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN13@construct:

; 995  : 		_Mytraits::construct(*this, _Ptr,
; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@D@std@@YAPADPAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 739  : 	{	// do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 741  : 	}

	pop	ebp
	ret	0
??$_Unfancy@D@std@@YAPADPAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 1003 : 		_Mytraits::destroy(*this, _Ptr);
; 1004 : 		}

	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@PAD@std@@YAPAPADAAPAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAD@std@@YAPAPADAAPAD@Z PROC		; std::addressof<char *>, COMDAT

; 724  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 725  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 726  : 	}

	pop	ebp
	ret	0
??$addressof@PAD@std@@YAPAPADAAPAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 496  : 		_Mysize(0),

	mov	DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 281  : 		}

	mov	eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 497  : 		_Myres(0)

	mov	DWORD PTR [ecx+20], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 281  : 		}

	ret	4
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0V?$allocator@D@std@@@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0V?$allocator@D@std@@@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> ><std::allocator<char> >, COMDAT
; _this$ = ecx

; 953  : 		}

	mov	eax, ecx
	ret	4
??$?0V?$allocator@D@std@@@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> ><std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAV21@00@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAV21@00@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT
; _this$ = ecx

; 1658 : 		{	// move initializing [_First, _Last), using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	push	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 810  : 	return {};

	mov	BYTE PTR $T1[ebp], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	push	DWORD PTR $T1[ebp]
	push	ecx
	push	DWORD PTR __Ptr$[ebp]
	push	DWORD PTR __Last$[ebp]
	push	DWORD PTR __First$[ebp]
	call	??$_Uninitialized_move_al_unchecked1@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_move_al_unchecked1<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
	add	esp, 24					; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1661 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAV21@00@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Json::PathArgument const *> >,std::_Vector_val<std::_Simple_types<Json::PathArgument const *> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<Json::PathArgument const *> >,std::_Vector_val<std::_Simple_types<Json::PathArgument const *> >,1><>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 485  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 281  : 		}

	mov	eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 486  : 		_Mylast(),

	mov	DWORD PTR [ecx+4], 0

; 487  : 		_Myend()

	mov	DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 281  : 		}

	ret	4
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Json::PathArgument const *> >,std::_Vector_val<std::_Simple_types<Json::PathArgument const *> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<Json::PathArgument const *> >,std::_Vector_val<std::_Simple_types<Json::PathArgument const *> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Json::PathArgument> >,std::_Vector_val<std::_Simple_types<Json::PathArgument> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<Json::PathArgument> >,std::_Vector_val<std::_Simple_types<Json::PathArgument> >,1><>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 485  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 281  : 		}

	mov	eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 486  : 		_Mylast(),

	mov	DWORD PTR [ecx+4], 0

; 487  : 		_Myend()

	mov	DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 281  : 		}

	ret	4
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Json::PathArgument> >,std::_Vector_val<std::_Simple_types<Json::PathArgument> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<Json::PathArgument> >,std::_Vector_val<std::_Simple_types<Json::PathArgument> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Eqrange@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@@1@ABVCZString@Value@Json@@@Z
_TEXT	SEGMENT
__Lonode$1$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Eqrange@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@@1@ABVCZString@Value@Json@@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Eqrange<Json::Value::CZString>, COMDAT
; _this$ = ecx

; 1988 : 		{	// find leftmost node not less than _Keyval

	push	ebp
	mov	ebp, esp
	push	ecx

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	ecx, DWORD PTR [ecx]
	push	ebx
	push	esi

; 1989 : 		_Nodeptr _Pnode = _Root();

	mov	esi, DWORD PTR [ecx+4]

; 1990 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 1991 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails

	mov	ebx, ecx
	push	edi

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	lea	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR __Lonode$1$[ebp], ecx

; 1992 : 
; 1993 : 		while (!this->_Isnil(_Pnode))

	cmp	BYTE PTR [esi+13], 0
	jne	$LN3@Eqrange
	npad	2
$LL2@Eqrange:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    if ( cstr_ )

	mov	eax, DWORD PTR [esi+16]

; 221  :       return strcmp( cstr_, other.cstr_ ) < 0;

	mov	ecx, DWORD PTR __Keyval$[ebp]
	test	eax, eax
	je	SHORT $LN79@Eqrange
	mov	ecx, DWORD PTR [ecx]
	npad	4
$LL218@Eqrange:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN219@Eqrange
	test	dl, dl
	je	SHORT $LN220@Eqrange
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN219@Eqrange
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL218@Eqrange
$LN220@Eqrange:
	mov	ecx, DWORD PTR __Keyval$[ebp]
	xor	eax, eax
	test	eax, eax
	sets	al
	jmp	SHORT $LN78@Eqrange
$LN219@Eqrange:
	mov	ecx, DWORD PTR __Keyval$[ebp]
	sbb	eax, eax
	or	eax, 1
	test	eax, eax
	sets	al
	jmp	SHORT $LN78@Eqrange
$LN79@Eqrange:

; 222  :    return index_ < other.index_;

	mov	eax, DWORD PTR [esi+20]
	cmp	eax, DWORD PTR [ecx+4]
	setl	al
$LN78@Eqrange:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1994 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))

	test	al, al
	je	SHORT $LN6@Eqrange

; 1995 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

	mov	esi, DWORD PTR [esi+8]

; 1996 : 			else

	jmp	SHORT $LN7@Eqrange
$LN6@Eqrange:

; 1999 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,

	cmp	BYTE PTR [ebx+13], 0
	je	SHORT $LN8@Eqrange
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    if ( cstr_ )

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN108@Eqrange

; 221  :       return strcmp( cstr_, other.cstr_ ) < 0;

	mov	ecx, DWORD PTR [esi+16]
$LL222@Eqrange:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN223@Eqrange
	test	dl, dl
	je	SHORT $LN224@Eqrange
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN223@Eqrange
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL222@Eqrange
$LN224@Eqrange:
	xor	eax, eax
	test	eax, eax
	sets	al
	jmp	SHORT $LN107@Eqrange
$LN223@Eqrange:
	sbb	eax, eax
	or	eax, 1
	test	eax, eax
	sets	al
	jmp	SHORT $LN107@Eqrange
$LN108@Eqrange:

; 222  :    return index_ < other.index_;

	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [esi+20]
	setl	al
$LN107@Eqrange:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1999 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,

	test	al, al
	cmovne	ebx, esi
$LN8@Eqrange:

; 2000 : 						this->_Key(_Pnode)))
; 2001 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2002 : 				_Lonode = _Pnode;

	mov	DWORD PTR __Lonode$1$[ebp], esi

; 2003 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

	mov	esi, DWORD PTR [esi]
$LN7@Eqrange:

; 1992 : 
; 1993 : 		while (!this->_Isnil(_Pnode))

	cmp	BYTE PTR [esi+13], 0
	je	$LL2@Eqrange
$LN3@Eqrange:

; 2004 : 				}
; 2005 : 
; 2006 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()

	cmp	BYTE PTR [ebx+13], 0
	mov	eax, ebx
	cmovne	eax, edi
	mov	esi, DWORD PTR [eax]

; 2007 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2008 : 		while (!this->_Isnil(_Pnode))

	cmp	BYTE PTR [esi+13], 0
	jne	SHORT $LN5@Eqrange
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    if ( cstr_ )

	mov	eax, DWORD PTR __Keyval$[ebp]
	mov	edi, DWORD PTR [eax]
	npad	4
$LL4@Eqrange:
	test	edi, edi
	je	SHORT $LN163@Eqrange

; 221  :       return strcmp( cstr_, other.cstr_ ) < 0;

	mov	ecx, DWORD PTR [esi+16]
	mov	eax, edi
	npad	7
$LL226@Eqrange:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN227@Eqrange
	test	dl, dl
	je	SHORT $LN228@Eqrange
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN227@Eqrange
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL226@Eqrange
$LN228@Eqrange:
	xor	eax, eax
	test	eax, eax
	sets	al
	jmp	SHORT $LN162@Eqrange
$LN227@Eqrange:
	sbb	eax, eax
	or	eax, 1
	test	eax, eax
	sets	al
	jmp	SHORT $LN162@Eqrange
$LN163@Eqrange:

; 222  :    return index_ < other.index_;

	mov	eax, DWORD PTR [eax+4]
	cmp	eax, DWORD PTR [esi+20]
	setl	al
$LN162@Eqrange:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2009 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))

	test	al, al
	je	SHORT $LN9@Eqrange

; 2010 : 				{	// _Pnode greater than _Keyval, remember it
; 2011 : 				_Hinode = _Pnode;

	mov	ebx, esi

; 2012 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

	mov	esi, DWORD PTR [esi]

; 2013 : 				}
; 2014 : 			else

	jmp	SHORT $LN10@Eqrange
$LN9@Eqrange:

; 2015 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

	mov	esi, DWORD PTR [esi+8]
$LN10@Eqrange:

; 2007 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2008 : 		while (!this->_Isnil(_Pnode))

	cmp	BYTE PTR [esi+13], 0
	mov	eax, DWORD PTR __Keyval$[ebp]
	je	SHORT $LL4@Eqrange
$LN5@Eqrange:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 170  : 		: first(_STD forward<_Other1>(_Val1)),

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Lonode$1$[ebp]
	pop	edi
	pop	esi

; 171  : 				second(_STD forward<_Other2>(_Val2))

	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax], ecx
	pop	ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2020 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??$_Eqrange@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@@1@ABVCZString@Value@Json@@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Eqrange<Json::Value::CZString>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Eqrange@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@@1@ABVCZString@Value@Json@@@Z
_TEXT	SEGMENT
__Ans$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Eqrange@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@@1@ABVCZString@Value@Json@@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Eqrange<Json::Value::CZString>, COMDAT
; _this$ = ecx

; 2024 : 		{	// find leftmost node not less than _Keyval

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2025 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));

	push	DWORD PTR __Keyval$[ebp]
	lea	eax, DWORD PTR __Ans$[ebp]
	push	eax
	call	??$_Eqrange@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@@1@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Eqrange<Json::Value::CZString>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 170  : 		: first(_STD forward<_Other1>(_Val1)),

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Ans$[ebp]
	mov	DWORD PTR [eax], ecx

; 171  : 				second(_STD forward<_Other2>(_Val2))

	mov	ecx, DWORD PTR __Ans$[ebp+4]
	mov	DWORD PTR [eax+4], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2029 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??$_Eqrange@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@@1@ABVCZString@Value@Json@@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Eqrange<Json::Value::CZString>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAE@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAE@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > ><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >, COMDAT
; _this$ = ecx

; 953  : 		}

	mov	eax, ecx
	ret	4
??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAE@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > ><std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 485  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 281  : 		}

	mov	eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 486  : 		_Mylast(),

	mov	DWORD PTR [ecx+4], 0

; 487  : 		_Myend()

	mov	DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 281  : 		}

	ret	4
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::_Wrap_alloc<std::allocator<char> >,void>, COMDAT
; _this$ = ecx

; 496  : 		_Mysize(0),

	mov	DWORD PTR [ecx+16], 0

; 598  : 		}

	mov	eax, ecx

; 497  : 		_Myres(0)

	mov	DWORD PTR [ecx+20], 0

; 598  : 		}

	ret	4
??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::_Wrap_alloc<std::allocator<char> >,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AAU10@@Z PROC ; std::move<std::_Wrap_alloc<std::allocator<char> > &>, COMDAT

; 1291 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1292 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1293 : 	}

	pop	ebp
	ret	0
??$move@AAU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AAU10@@Z ENDP ; std::move<std::_Wrap_alloc<std::allocator<char> > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YA$$QAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YA$$QAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@AAV10@@Z PROC ; std::forward<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

	pop	ebp
	ret	0
??$forward@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@YA$$QAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@0@AAV10@@Z ENDP ; std::forward<std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > ><std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,void>, COMDAT
; _this$ = ecx

; 485  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0

; 529  : 		}

	mov	eax, ecx

; 486  : 		_Mylast(),

	mov	DWORD PTR [ecx+4], 0

; 487  : 		_Myend()

	mov	DWORD PTR [ecx+8], 0

; 529  : 		}

	ret	4
??$?0U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > ><std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@AAU10@@Z PROC ; std::move<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &>, COMDAT

; 1291 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1292 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1293 : 	}

	pop	ebp
	ret	0
??$move@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@AAU10@@Z ENDP ; std::move<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN13@construct
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	push	DWORD PTR _<_Args_0>$[ebp]

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	call	?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
$LN13@construct:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 997  : 		}

	pop	ebp
	ret	8
??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

	pop	ebp
	ret	0
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z PROC ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 739  : 	{	// do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 741  : 	}

	pop	ebp
	ret	0
??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ENDP ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 724  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 725  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 726  : 	}

	pop	ebp
	ret	0
??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T2 = 8							; size = 1
$T3 = 8							; size = 4
__Right$ = 8						; size = 4
__Al$ = 12						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > > >, COMDAT
; _this$ = ecx

; 1016 : 		{	// construct tree by copying _Right, allocator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi

; 567  : 		: _Myhead(),

	mov	DWORD PTR [esi], 0

; 568  : 		_Mysize(0)

	mov	DWORD PTR [esi+4], 0

; 721  : 		_Myhead() = _Buyheadnode();

	call	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buyheadnode
	mov	DWORD PTR [esi], eax

; 1017 : 		_TRY_BEGIN
; 1018 : 		_Copy(_Right, _Copy_tag());

	push	DWORD PTR $T2[ebp]
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	ecx, esi
	push	DWORD PTR __Right$[ebp]
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	call	??$_Copy@U_Copy_tag@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXABV01@U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy<std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Copy_tag>

; 1022 : 		_CATCH_END
; 1023 : 		}

	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
__catch$??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z$0:

; 43   : 		: _Ptr(_Pnode)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]

; 2168 : 		erase(begin(), end());

	push	eax
	push	DWORD PTR [eax]
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase

; 1019 : 		_CATCH_ALL
; 1020 : 		_Tidy();
; 1021 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN125@Value:
$LN124@Value:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
__ehhandler$??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PBVPathArgument@Json@@PBV12@@?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEXPAPBVPathArgument@Json@@$$QAPBV23@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PBVPathArgument@Json@@PBV12@@?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEXPAPBVPathArgument@Json@@$$QAPBV23@@Z PROC ; std::_Wrap_alloc<std::allocator<Json::PathArgument const *> >::construct<Json::PathArgument const *,Json::PathArgument const *>, COMDAT
; _this$ = ecx

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN13@construct
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN13@construct:

; 995  : 		_Mytraits::construct(*this, _Ptr,
; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

	pop	ebp
	ret	8
??$construct@PBVPathArgument@Json@@PBV12@@?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEXPAPBVPathArgument@Json@@$$QAPBV23@@Z ENDP ; std::_Wrap_alloc<std::allocator<Json::PathArgument const *> >::construct<Json::PathArgument const *,Json::PathArgument const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@PBVPathArgument@Json@@@std@@YA$$QAPBVPathArgument@Json@@AAPBV12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PBVPathArgument@Json@@@std@@YA$$QAPBVPathArgument@Json@@AAPBV12@@Z PROC ; std::forward<Json::PathArgument const *>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

	pop	ebp
	ret	0
??$forward@PBVPathArgument@Json@@@std@@YA$$QAPBVPathArgument@Json@@AAPBV12@@Z ENDP ; std::forward<Json::PathArgument const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Unfancy@PBVPathArgument@Json@@@std@@YAPAPBVPathArgument@Json@@PAPBV12@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@PBVPathArgument@Json@@@std@@YAPAPBVPathArgument@Json@@PAPBV12@@Z PROC ; std::_Unfancy<Json::PathArgument const *>, COMDAT

; 739  : 	{	// do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 741  : 	}

	pop	ebp
	ret	0
??$_Unfancy@PBVPathArgument@Json@@@std@@YAPAPBVPathArgument@Json@@PAPBV12@@Z ENDP ; std::_Unfancy<Json::PathArgument const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@PBVPathArgument@Json@@@std@@YAPAPBVPathArgument@Json@@AAPBV12@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PBVPathArgument@Json@@@std@@YAPAPBVPathArgument@Json@@AAPBV12@@Z PROC ; std::addressof<Json::PathArgument const *>, COMDAT

; 724  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 725  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 726  : 	}

	pop	ebp
	ret	0
??$addressof@PBVPathArgument@Json@@@std@@YAPAPBVPathArgument@Json@@AAPBV12@@Z ENDP ; std::addressof<Json::PathArgument const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@VPathArgument@Json@@V12@@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@$$QAV23@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@VPathArgument@Json@@V12@@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@$$QAV23@@Z PROC ; std::_Wrap_alloc<std::allocator<Json::PathArgument> >::construct<Json::PathArgument,Json::PathArgument>, COMDAT
; _this$ = ecx

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	edi

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	edi, DWORD PTR __Ptr$[ebp]
	test	edi, edi
	je	SHORT $LN13@construct
	push	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	mov	esi, DWORD PTR _<_Args_0>$[ebp]
	mov	ecx, edi

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [edi+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [edi+16], 0

; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	push	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	call	?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
	mov	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
	mov	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], eax
	pop	esi
$LN13@construct:
	pop	edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 997  : 		}

	pop	ebp
	ret	8
??$construct@VPathArgument@Json@@V12@@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@$$QAV23@@Z ENDP ; std::_Wrap_alloc<std::allocator<Json::PathArgument> >::construct<Json::PathArgument,Json::PathArgument>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@VPathArgument@Json@@@std@@YA$$QAVPathArgument@Json@@AAV12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@VPathArgument@Json@@@std@@YA$$QAVPathArgument@Json@@AAV12@@Z PROC ; std::forward<Json::PathArgument>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1277 : 	}

	pop	ebp
	ret	0
??$forward@VPathArgument@Json@@@std@@YA$$QAVPathArgument@Json@@AAV12@@Z ENDP ; std::forward<Json::PathArgument>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@VPathArgument@Json@@@std@@YAPAVPathArgument@Json@@AAV12@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@VPathArgument@Json@@@std@@YAPAVPathArgument@Json@@AAV12@@Z PROC ; std::addressof<Json::PathArgument>, COMDAT

; 724  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 725  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 726  : 	}

	pop	ebp
	ret	0
??$addressof@VPathArgument@Json@@@std@@YAPAVPathArgument@Json@@AAV12@@Z ENDP ; std::addressof<Json::PathArgument>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@VPathArgument@Json@@ABV12@@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@ABV23@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@VPathArgument@Json@@ABV12@@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@ABV23@@Z PROC ; std::_Wrap_alloc<std::allocator<Json::PathArgument> >::construct<Json::PathArgument,Json::PathArgument const &>, COMDAT
; _this$ = ecx

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@VPathArgument@Json@@ABV12@@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@ABV23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	edi, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR $T2[ebp], edi
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	edi, edi
	je	SHORT $LN13@construct
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 782  : 		assign(_Right, 0, npos);

	mov	esi, DWORD PTR _<_Args_0>$[ebp]
	mov	ecx, edi
	push	-1
	push	0

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [edi+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [edi+16], 0

; 782  : 		assign(_Right, 0, npos);

	push	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 782  : 		assign(_Right, 0, npos);

	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
	mov	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], eax
$LN13@construct:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 997  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@VPathArgument@Json@@ABV12@@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@ABV23@@Z$2:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@VPathArgument@Json@@ABV12@@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@ABV23@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@VPathArgument@Json@@ABV12@@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@ABV23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@VPathArgument@Json@@ABV12@@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@ABV23@@Z ENDP ; std::_Wrap_alloc<std::allocator<Json::PathArgument> >::construct<Json::PathArgument,Json::PathArgument const &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@VPathArgument@Json@@AAV12@@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@VPathArgument@Json@@AAV12@@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z PROC ; std::_Wrap_alloc<std::allocator<Json::PathArgument> >::construct<Json::PathArgument,Json::PathArgument &>, COMDAT
; _this$ = ecx

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@VPathArgument@Json@@AAV12@@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	edi, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR $T2[ebp], edi
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	edi, edi
	je	SHORT $LN13@construct
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 782  : 		assign(_Right, 0, npos);

	mov	esi, DWORD PTR _<_Args_0>$[ebp]
	mov	ecx, edi
	push	-1
	push	0

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [edi+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [edi+16], 0

; 782  : 		assign(_Right, 0, npos);

	push	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 782  : 		assign(_Right, 0, npos);

	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
	mov	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], eax
$LN13@construct:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 997  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@VPathArgument@Json@@AAV12@@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z$2:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@VPathArgument@Json@@AAV12@@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@VPathArgument@Json@@AAV12@@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@VPathArgument@Json@@AAV12@@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@AAV23@@Z ENDP ; std::_Wrap_alloc<std::allocator<Json::PathArgument> >::construct<Json::PathArgument,Json::PathArgument &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Unfancy@VPathArgument@Json@@@std@@YAPAVPathArgument@Json@@PAV12@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@VPathArgument@Json@@@std@@YAPAVPathArgument@Json@@PAV12@@Z PROC ; std::_Unfancy<Json::PathArgument>, COMDAT

; 739  : 	{	// do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 741  : 	}

	pop	ebp
	ret	0
??$_Unfancy@VPathArgument@Json@@@std@@YAPAVPathArgument@Json@@PAV12@@Z ENDP ; std::_Unfancy<Json::PathArgument>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBVPathArgument@Json@@@std@@YAPBVPathArgument@Json@@ABV12@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBVPathArgument@Json@@@std@@YAPBVPathArgument@Json@@ABV12@@Z PROC ; std::addressof<Json::PathArgument const >, COMDAT

; 724  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 725  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 726  : 	}

	pop	ebp
	ret	0
??$addressof@$$CBVPathArgument@Json@@@std@@YAPBVPathArgument@Json@@ABV12@@Z ENDP ; std::addressof<Json::PathArgument const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::destroy<std::pair<Json::Value::CZString const ,Json::Value> >, COMDAT
; _this$ = ecx

; 1002 : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, DWORD PTR __Ptr$[ebp]
	lea	ecx, DWORD PTR [esi+8]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 198  :    if ( cstr_  &&  index_ == duplicate )

	cmp	DWORD PTR [esi], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	je	SHORT $LN169@destroy
	cmp	DWORD PTR [esi+4], 1
	jne	SHORT $LN169@destroy

; 199  :       valueAllocator()->releaseMemberName( const_cast<char *>( cstr_ ) );

	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+8]
$LN169@destroy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1004 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z$33:
	call	___std_terminate
	ret	0
__ehhandler$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$destroy@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::destroy<std::pair<Json::Value::CZString const ,Json::Value> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAPAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAPAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AAU10@@Z PROC ; std::addressof<std::pair<Json::Value::CZString const ,Json::Value> >, COMDAT

; 724  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 725  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 726  : 	}

	pop	ebp
	ret	0
??$addressof@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@YAPAU?$pair@$$CBVCZString@Value@Json@@V23@@0@AAU10@@Z ENDP ; std::addressof<std::pair<Json::Value::CZString const ,Json::Value> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$swap@DX@std@@YAXAAD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@DX@std@@YAXAAD0@Z PROC				; std::swap<char,void>, COMDAT

; 48   : 	{	// exchange values stored at _Left and _Right

	push	ebp
	mov	ebp, esp

; 49   : 	_Ty _Tmp = _STD move(_Left);
; 50   : 	_Left = _STD move(_Right);

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR __Left$[ebp]
	push	ebx
	mov	al, BYTE PTR [ecx]
	mov	bl, BYTE PTR [edx]
	mov	BYTE PTR [edx], al

; 51   : 	_Right = _STD move(_Tmp);

	mov	BYTE PTR [ecx], bl
	pop	ebx

; 52   : 	}

	pop	ebp
	ret	0
??$swap@DX@std@@YAXAAD0@Z ENDP				; std::swap<char,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$distance@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YAHV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$distance@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YAHV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@0@Z PROC ; std::distance<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > >, COMDAT

; 1125 : 	{	// return distance between iterators

	push	ebp
	mov	ebp, esp
	push	ecx

; 1126 : 	return (_Distance1(_First, _Last, _Iter_cat_t<_InIt>()));

	push	DWORD PTR $T1[ebp]
	push	DWORD PTR __Last$[ebp]
	push	DWORD PTR __First$[ebp]
	call	??$_Distance1@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YAHV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@0Uinput_iterator_tag@0@@Z ; std::_Distance1<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > >
	add	esp, 12					; 0000000cH

; 1127 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$distance@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YAHV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@0@Z ENDP ; std::distance<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Lbound@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@ABVCZString@Value@Json@@@Z
_TEXT	SEGMENT
__Keyval$ = 8						; size = 4
??$_Lbound@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@ABVCZString@Value@Json@@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lbound<Json::Value::CZString>, COMDAT
; _this$ = ecx

; 2059 : 		{	// find leftmost node not less than _Keyval

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	edi, DWORD PTR [ecx]

; 2060 : 		_Nodeptr _Pnode = _Root();

	mov	esi, DWORD PTR [edi+4]

; 2061 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2062 : 
; 2063 : 		while (!this->_Isnil(_Pnode))

	cmp	BYTE PTR [esi+13], 0
	jne	SHORT $LN79@Lbound
	push	ebx
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 222  :    return index_ < other.index_;

	mov	ebx, DWORD PTR __Keyval$[ebp]
$LL2@Lbound:

; 220  :    if ( cstr_ )

	mov	eax, DWORD PTR [esi+16]
	test	eax, eax
	je	SHORT $LN62@Lbound

; 221  :       return strcmp( cstr_, other.cstr_ ) < 0;

	mov	ecx, DWORD PTR [ebx]
	npad	3
$LL75@Lbound:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN76@Lbound
	test	dl, dl
	je	SHORT $LN77@Lbound
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN76@Lbound
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL75@Lbound
$LN77@Lbound:
	xor	eax, eax
	test	eax, eax
	sets	al
	jmp	SHORT $LN61@Lbound
$LN76@Lbound:
	sbb	eax, eax
	or	eax, 1
	test	eax, eax
	sets	al
	jmp	SHORT $LN61@Lbound
$LN62@Lbound:

; 222  :    return index_ < other.index_;

	mov	eax, DWORD PTR [esi+20]
	cmp	eax, DWORD PTR [ebx+4]
	setl	al
$LN61@Lbound:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2064 : 			if (_Compare(this->_Key(_Pnode), _Keyval))

	test	al, al
	je	SHORT $LN4@Lbound

; 2065 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

	mov	esi, DWORD PTR [esi+8]

; 2066 : 			else

	jmp	SHORT $LN5@Lbound
$LN4@Lbound:

; 2067 : 				{	// _Pnode not less than _Keyval, remember it
; 2068 : 				_Wherenode = _Pnode;

	mov	edi, esi

; 2069 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

	mov	esi, DWORD PTR [esi]
$LN5@Lbound:

; 2061 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2062 : 
; 2063 : 		while (!this->_Isnil(_Pnode))

	cmp	BYTE PTR [esi+13], 0
	je	SHORT $LL2@Lbound
	pop	ebx
$LN79@Lbound:

; 2070 : 				}
; 2071 : 
; 2072 : 		return (_Wherenode);	// return best remembered candidate

	mov	eax, edi
	pop	edi
	pop	esi

; 2073 : 		}

	pop	ebp
	ret	4
??$_Lbound@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@ABVCZString@Value@Json@@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lbound<Json::Value::CZString>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@SAPAU?$pair@$$CBVCZString@Value@Json@@V23@@2@AAU32@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@SAPAU?$pair@$$CBVCZString@Value@Json@@V23@@2@AAU32@@Z PROC ; std::pointer_traits<std::pair<Json::Value::CZString const ,Json::Value> *>::pointer_to, COMDAT

; 279  : 		{	// convert raw reference to pointer

	push	ebp
	mov	ebp, esp

; 280  : 		return (_STD addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 281  : 		}

	pop	ebp
	ret	0
?pointer_to@?$pointer_traits@PAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@SAPAU?$pair@$$CBVCZString@Value@Json@@V23@@2@AAU32@@Z ENDP ; std::pointer_traits<std::pair<Json::Value::CZString const ,Json::Value> *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<Json::PathArgument> > >::_Compat, COMDAT
; _this$ = ecx

; 262  : 		}

	ret	4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<Json::PathArgument> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<Json::PathArgument> > >::operator!=, COMDAT
; _this$ = ecx

; 218  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax]
	setne	al

; 219  : 		return (!(*this == _Right));
; 220  : 		}

	pop	ebp
	ret	4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<Json::PathArgument> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<Json::PathArgument> > >::operator==, COMDAT
; _this$ = ecx

; 212  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax]
	sete	al

; 213  : 		_Compat(_Right);
; 214  : 		return (_Ptr == _Right._Ptr);
; 215  : 		}

	pop	ebp
	ret	4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<Json::PathArgument> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<Json::PathArgument> > >::operator++, COMDAT
; _this$ = ecx

; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
; 98   : 		if (_Mycont == 0
; 99   : 			|| _Ptr == nullptr_t{}
; 100  : 			|| _Mycont->_Mylast <= _Ptr)
; 101  : 			{	// report error
; 102  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 103  : 			_SCL_SECURE_OUT_OF_RANGE;
; 104  : 			}
; 105  : 
; 106  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 107  : 		_SCL_SECURE_VALIDATE(_Ptr != _Tptr());
; 108  : 		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
; 109  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 110  : 		_SCL_SECURE_VALIDATE_RANGE(_Ptr < _Mycont->_Mylast);
; 111  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 112  : 
; 113  : 		++_Ptr;

	add	DWORD PTR [ecx], 32			; 00000020H

; 114  : 		return (*this);

	mov	eax, ecx

; 115  : 		}

	ret	0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<Json::PathArgument> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@std@@@std@@QBEABVPathArgument@Json@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@std@@@std@@QBEABVPathArgument@Json@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<Json::PathArgument> > >::operator*, COMDAT
; _this$ = ecx

; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
; 68   : 		if (_Mycont == 0
; 69   : 			|| _Ptr == _Tptr()
; 70   : 			|| _Ptr < _Mycont->_Myfirst
; 71   : 			|| _Mycont->_Mylast <= _Ptr)
; 72   : 			{	// report error
; 73   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 74   : 			_SCL_SECURE_OUT_OF_RANGE;
; 75   : 			}
; 76   : 
; 77   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 78   : 		_SCL_SECURE_VALIDATE(_Ptr != _Tptr());
; 79   : 		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
; 80   : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 81   : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*_Ptr);

	mov	eax, DWORD PTR [ecx]

; 87   : 		}

	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@std@@@std@@QBEABVPathArgument@Json@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<Json::PathArgument> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@std@@@std@@QAE@PAVPathArgument@Json@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@std@@@std@@QAE@PAVPathArgument@Json@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<Json::PathArgument> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<Json::PathArgument> > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct with pointer _Parg

	push	ebp
	mov	ebp, esp

; 46   : 		: _Ptr(_Parg)

	mov	eax, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [ecx], eax

; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@std@@@std@@QAE@PAVPathArgument@Json@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<Json::PathArgument> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<Json::PathArgument> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??$?0PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$?0PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0ABV?$allocator@D@1@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> ><char const *,void>, COMDAT
; _this$ = ecx

; 867  : 		{	// construct from [_First, _Last) with optional allocator

	push	ebp
	mov	ebp, esp

; 905  : 		if (_First != _Last)

	mov	eax, DWORD PTR __Last$[ebp]
	push	esi

; 867  : 		{	// construct from [_First, _Last) with optional allocator

	mov	esi, ecx

; 905  : 		if (_First != _Last)

	mov	ecx, DWORD PTR __First$[ebp]

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 905  : 		if (_First != _Last)

	cmp	ecx, eax
	je	SHORT $LN124@allocator

; 906  : 			assign(_First, _Last - _First);

	sub	eax, ecx
	push	eax
	push	ecx
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN124@allocator:

; 868  : 		_DEBUG_RANGE(_First, _Last);
; 869  : 		_Tidy();
; 870  : 		_Construct(_Unchecked(_First), _Unchecked(_Last), _Iter_cat_t<_Iter>());
; 871  : 		}

	mov	eax, esi
	pop	esi
	pop	ebp
	ret	12					; 0000000cH
??$?0PBDX@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0ABV?$allocator@D@1@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> ><char const *,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<Json::PathArgument const *> > >::_Compat, COMDAT
; _this$ = ecx

; 262  : 		}

	ret	4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<Json::PathArgument const *> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<Json::PathArgument const *> > >::operator==, COMDAT
; _this$ = ecx

; 212  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax]
	sete	al

; 213  : 		_Compat(_Right);
; 214  : 		return (_Ptr == _Right._Ptr);
; 215  : 		}

	pop	ebp
	ret	4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<Json::PathArgument const *> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@std@@@std@@QBEABQBVPathArgument@Json@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@std@@@std@@QBEABQBVPathArgument@Json@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<Json::PathArgument const *> > >::operator*, COMDAT
; _this$ = ecx

; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
; 68   : 		if (_Mycont == 0
; 69   : 			|| _Ptr == _Tptr()
; 70   : 			|| _Ptr < _Mycont->_Myfirst
; 71   : 			|| _Mycont->_Mylast <= _Ptr)
; 72   : 			{	// report error
; 73   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 74   : 			_SCL_SECURE_OUT_OF_RANGE;
; 75   : 			}
; 76   : 
; 77   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 78   : 		_SCL_SECURE_VALIDATE(_Ptr != _Tptr());
; 79   : 		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
; 80   : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 81   : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*_Ptr);

	mov	eax, DWORD PTR [ecx]

; 87   : 		}

	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@std@@@std@@QBEABQBVPathArgument@Json@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<Json::PathArgument const *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@std@@@std@@QAE@PAPBVPathArgument@Json@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@std@@@std@@QAE@PAPBVPathArgument@Json@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<Json::PathArgument const *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<Json::PathArgument const *> > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct with pointer _Parg

	push	ebp
	mov	ebp, esp

; 46   : 		: _Ptr(_Parg)

	mov	eax, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [ecx], eax

; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@std@@@std@@QAE@PAPBVPathArgument@Json@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<Json::PathArgument const *> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<Json::PathArgument const *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
;	COMDAT ??$insert@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@X@?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
??$insert@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@X@?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z PROC ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::insert<std::pair<Json::Value::CZString const ,Json::Value> &,void>, COMDAT
; _this$ = ecx

; 200  : 		{	// insert _Val with hint

	push	ebp
	mov	ebp, esp
	push	edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1084 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

	push	DWORD PTR __Val$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 200  : 		{	// insert _Val with hint

	mov	edi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1084 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

	call	??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>

; 1085 : 		return (_Insert_hint(_Where,

	push	eax

; 603  : 		return ((reference)_Pnode->_Myval);

	add	eax, 16					; 00000010H

; 1085 : 		return (_Insert_hint(_Where,

	mov	ecx, edi
	push	eax
	push	DWORD PTR __Where$[ebp]
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	??$_Insert_hint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_hint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 201  : 		return (this->emplace_hint(_Where, _STD forward<_Valty>(_Val)));

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi

; 202  : 		}

	pop	ebp
	ret	12					; 0000000cH
??$insert@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@X@?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ENDP ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::insert<std::pair<Json::Value::CZString const ,Json::Value> &,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0AAVCZString@Value@Json@@ABV12@X$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAVCZString@Value@Json@@ABV34@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAVCZString@Value@Json@@ABV12@X$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAVCZString@Value@Json@@ABV34@@Z PROC ; std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value><Json::Value::CZString &,Json::Value const &,void,0>, COMDAT
; _this$ = ecx

; 172  : 		{	// construct from moved values

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?0AAVCZString@Value@Json@@ABV12@X$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAVCZString@Value@Json@@ABV34@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	edi, ecx
	mov	DWORD PTR _this$[ebp], edi
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 188  : : cstr_( other.index_ != noDuplication &&  other.cstr_ != 0

	mov	esi, DWORD PTR __Val1$[ebp]
	cmp	DWORD PTR [esi+4], 0
	je	SHORT $LN10@Value
	cmp	DWORD PTR [esi], 0
	je	SHORT $LN10@Value
	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+4]
	jmp	SHORT $LN11@Value
$LN10@Value:
	mov	eax, DWORD PTR [esi]
$LN11@Value:
	mov	DWORD PTR [edi], eax

; 189  :                 ?  valueAllocator()->makeMemberName( other.cstr_ )
; 190  :                 : other.cstr_ )
; 191  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	DWORD PTR [esi], 0
	je	SHORT $LN12@Value
	xor	eax, eax
	cmp	DWORD PTR [esi+4], eax
	setne	al
	jmp	SHORT $LN13@Value
$LN12@Value:
	mov	eax, DWORD PTR [esi+4]
$LN13@Value:
	mov	DWORD PTR [edi+4], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 171  : 				second(_STD forward<_Other2>(_Val2))

	push	DWORD PTR __Val2$[ebp]
	lea	ecx, DWORD PTR [edi+8]
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	call	??0Value@Json@@QAE@ABV01@@Z		; Json::Value::Value

; 173  : 		}

	mov	eax, edi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0AAVCZString@Value@Json@@ABV12@X$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAVCZString@Value@Json@@ABV34@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CZString@Value@Json@@QAE@XZ		; Json::Value::CZString::~CZString
__ehhandler$??$?0AAVCZString@Value@Json@@ABV12@X$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAVCZString@Value@Json@@ABV34@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?0AAVCZString@Value@Json@@ABV12@X$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAVCZString@Value@Json@@ABV34@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?0AAVCZString@Value@Json@@ABV12@X$0A@@?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@AAVCZString@Value@Json@@ABV34@@Z ENDP ; std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value><Json::Value::CZString &,Json::Value const &,void,0>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$?8V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@YA_NABV?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@0@Z
_TEXT	SEGMENT
$T1 = 8							; size = 1
__Pred$ = 8						; size = 1
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@YA_NABV?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@0@Z PROC ; std::operator==<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >, COMDAT

; 2185 : 	{	// test for _Tree equality

	push	ebp
	mov	ebp, esp

; 2186 : 	return (_Left.size() == _Right.size()

	mov	edx, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR [ecx+4]
	jne	SHORT $LN3@operator

; 43   : 		: _Ptr(_Pnode)

	mov	eax, DWORD PTR [edx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2942 : 	return (_Equal_unchecked1(_First1, _Last1, _First2, _Pred,

	lea	edx, DWORD PTR __Pred$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	ecx, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2897 : 	return {};

	mov	BYTE PTR $T1[ebp], 0

; 2942 : 	return (_Equal_unchecked1(_First1, _Last1, _First2, _Pred,

	push	DWORD PTR $T1[ebp]
	push	edx
	push	DWORD PTR [ecx]
	push	eax
	push	DWORD PTR [eax]
	call	??$_Equal_unchecked1@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$equal_to@X@2@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@00AAU?$equal_to@X@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Equal_unchecked1<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::equal_to<void> >
	add	esp, 20					; 00000014H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2186 : 	return (_Left.size() == _Right.size()

	test	al, al
	je	SHORT $LN3@operator
	mov	al, 1

; 2187 : 		&& _STD equal(_Left.begin(), _Left.end(), _Right.begin()));
; 2188 : 	}

	pop	ebp
	ret	0
$LN3@operator:

; 2186 : 	return (_Left.size() == _Right.size()

	xor	al, al

; 2187 : 		&& _STD equal(_Left.begin(), _Left.end(), _Right.begin()));
; 2188 : 	}

	pop	ebp
	ret	0
??$?8V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@YA_NABV?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@0@Z ENDP ; std::operator==<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$?MV?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@YA_NABV?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
$T1 = 12						; size = 1
__Pred$ = 12						; size = 1
__Right$ = 12						; size = 4
??$?MV?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@YA_NABV?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@0@Z PROC ; std::operator<<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >, COMDAT

; 2198 : 	{	// test if _Less < _Right for _Trees

	push	ebp
	mov	ebp, esp

; 43   : 		: _Ptr(_Pnode)

	mov	ecx, DWORD PTR __Right$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 3169 : 	return (_Lex_compare_unchecked1(_First1, _Last1, _First2, _Last2, _Pred,

	lea	edx, DWORD PTR __Pred$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

	mov	eax, DWORD PTR __Left$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 3121 : 	return {};

	mov	BYTE PTR $T1[ebp], 0

; 3169 : 	return (_Lex_compare_unchecked1(_First1, _Last1, _First2, _Last2, _Pred,

	push	DWORD PTR $T1[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 3169 : 	return (_Lex_compare_unchecked1(_First1, _Last1, _First2, _Last2, _Pred,

	push	edx
	push	ecx
	push	DWORD PTR [ecx]
	push	eax
	push	DWORD PTR [eax]
	call	??$_Lex_compare_unchecked1@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@V12@U?$less@X@2@@std@@YA_NV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@0@000AAU?$less@X@0@U?$_Lex_compare_optimize@X@0@@Z ; std::_Lex_compare_unchecked1<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>,std::less<void> >
	add	esp, 24					; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2201 : 	}

	pop	ebp
	ret	0
??$?MV?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@YA_NABV?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@0@Z ENDP ; std::operator<<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$swap@TValueHolder@Value@Json@@X@std@@YAXAATValueHolder@Value@Json@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@TValueHolder@Value@Json@@X@std@@YAXAATValueHolder@Value@Json@@0@Z PROC ; std::swap<Json::Value::ValueHolder,void>, COMDAT

; 48   : 	{	// exchange values stored at _Left and _Right

	push	ebp
	mov	ebp, esp

; 49   : 	_Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR __Left$[ebp]

; 50   : 	_Left = _STD move(_Right);

	mov	ecx, DWORD PTR __Right$[ebp]
	push	esi
	push	edi
	mov	esi, DWORD PTR [edx]
	mov	eax, DWORD PTR [ecx]
	mov	edi, DWORD PTR [edx+4]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax

; 51   : 	_Right = _STD move(_Tmp);

	mov	DWORD PTR [ecx+4], edi
	pop	edi
	mov	DWORD PTR [ecx], esi
	pop	esi

; 52   : 	}

	pop	ebp
	ret	0
??$swap@TValueHolder@Value@Json@@X@std@@YAXAATValueHolder@Value@Json@@0@Z ENDP ; std::swap<Json::Value::ValueHolder,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$swap@PBDX@std@@YAXAAPBD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@PBDX@std@@YAXAAPBD0@Z PROC			; std::swap<char const *,void>, COMDAT

; 48   : 	{	// exchange values stored at _Left and _Right

	push	ebp
	mov	ebp, esp

; 49   : 	_Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR __Left$[ebp]

; 50   : 	_Left = _STD move(_Right);

	mov	ecx, DWORD PTR __Right$[ebp]
	push	esi
	mov	esi, DWORD PTR [edx]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 51   : 	_Right = _STD move(_Tmp);

	mov	DWORD PTR [ecx], esi
	pop	esi

; 52   : 	}

	pop	ebp
	ret	0
??$swap@PBDX@std@@YAXAAPBD0@Z ENDP			; std::swap<char const *,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAEPAXI@Z PROC ; std::pair<Json::Value::CZString const ,Json::Value>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAEPAXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	lea	ecx, DWORD PTR [esi+8]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value

; 198  :    if ( cstr_  &&  index_ == duplicate )

	cmp	DWORD PTR [esi], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	je	SHORT $LN162@scalar
	cmp	DWORD PTR [esi+4], 1
	jne	SHORT $LN162@scalar

; 199  :       valueAllocator()->releaseMemberName( const_cast<char *>( cstr_ ) );

	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+8]
$LN162@scalar:
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN165@scalar
	push	24					; 00000018H
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN165@scalar:
	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAEPAXI@Z$32:
	call	___std_terminate
	ret	0
__ehhandler$??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAEPAXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAEPAXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??_G?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAEPAXI@Z ENDP ; std::pair<Json::Value::CZString const ,Json::Value>::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ PROC ; std::pair<Json::Value::CZString const ,Json::Value>::~pair<Json::Value::CZString const ,Json::Value>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	lea	ecx, DWORD PTR [esi+8]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value

; 198  :    if ( cstr_  &&  index_ == duplicate )

	cmp	DWORD PTR [esi], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	je	SHORT $LN158@pair
	cmp	DWORD PTR [esi+4], 1
	jne	SHORT $LN158@pair

; 199  :       valueAllocator()->releaseMemberName( const_cast<char *>( cstr_ ) );

	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+8]
$LN158@pair:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ$31:
	call	___std_terminate
	ret	0
__ehhandler$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ ENDP ; std::pair<Json::Value::CZString const ,Json::Value>::~pair<Json::Value::CZString const ,Json::Value>
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@ABU01@@Z PROC ; std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value>, COMDAT
; _this$ = ecx

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@ABU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	edi, ecx
	mov	DWORD PTR _this$[ebp], edi

; 188  : : cstr_( other.index_ != noDuplication &&  other.cstr_ != 0

	mov	esi, DWORD PTR ___that$[ebp]
	cmp	DWORD PTR [esi+4], 0
	je	SHORT $LN7@pair
	cmp	DWORD PTR [esi], 0
	je	SHORT $LN7@pair
	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+4]
	jmp	SHORT $LN8@pair
$LN7@pair:
	mov	eax, DWORD PTR [esi]
$LN8@pair:
	mov	DWORD PTR [edi], eax

; 189  :                 ?  valueAllocator()->makeMemberName( other.cstr_ )
; 190  :                 : other.cstr_ )
; 191  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	DWORD PTR [esi], 0
	je	SHORT $LN9@pair
	xor	eax, eax
	cmp	DWORD PTR [esi+4], eax
	setne	al
	jmp	SHORT $LN10@pair
$LN9@pair:
	mov	eax, DWORD PTR [esi+4]
$LN10@pair:
	mov	DWORD PTR [edi+4], eax

	lea	eax, DWORD PTR [esi+8]
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	eax
	lea	ecx, DWORD PTR [edi+8]
	call	??0Value@Json@@QAE@ABV01@@Z		; Json::Value::Value
	mov	eax, edi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@ABU01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CZString@Value@Json@@QAE@XZ		; Json::Value::CZString::~CZString
__ehhandler$??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@ABU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@ABU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@ABU01@@Z ENDP ; std::pair<Json::Value::CZString const ,Json::Value>::pair<Json::Value::CZString const ,Json::Value>
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??__EdummyValueAllocatorInitializer@Json@@YAXXZ
text$di	SEGMENT
??__EdummyValueAllocatorInitializer@Json@@YAXXZ PROC	; Json::`dynamic initializer for 'dummyValueAllocatorInitializer'', COMDAT

; 100  :    static DefaultValueAllocator defaultAllocator;

	mov	eax, DWORD PTR fs:__tls_array
	mov	ecx, DWORD PTR __tls_index
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA
	cmp	eax, DWORD PTR __Init_thread_epoch[ecx]
	jg	SHORT $LN14@dynamic
$LN6@dynamic:

; 110  : } dummyValueAllocatorInitializer;

	ret	0
$LN14@dynamic:

; 100  :    static DefaultValueAllocator defaultAllocator;

	push	OFFSET ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA
	call	__Init_thread_header
	add	esp, 4
	cmp	DWORD PTR ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA, -1
	jne	SHORT $LN6@dynamic
	push	OFFSET ??__FdefaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ@YAXXZ ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator''
	mov	DWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, OFFSET ??_7DefaultValueAllocator@Json@@6B@
	call	_atexit
	push	OFFSET ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA
	call	__Init_thread_footer
	add	esp, 8
	jmp	SHORT $LN6@dynamic
??__EdummyValueAllocatorInitializer@Json@@YAXXZ ENDP	; Json::`dynamic initializer for 'dummyValueAllocatorInitializer''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0DummyValueAllocatorInitializer@Json@@QAE@XZ
_TEXT	SEGMENT
??0DummyValueAllocatorInitializer@Json@@QAE@XZ PROC	; Json::DummyValueAllocatorInitializer::DummyValueAllocatorInitializer, COMDAT
; _this$ = ecx

; 100  :    static DefaultValueAllocator defaultAllocator;

	mov	eax, DWORD PTR fs:__tls_array
	mov	edx, DWORD PTR __tls_index
	push	esi

; 106  :    DummyValueAllocatorInitializer() 

	mov	esi, ecx

; 100  :    static DefaultValueAllocator defaultAllocator;

	mov	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA
	cmp	eax, DWORD PTR __Init_thread_epoch[edx]
	jg	SHORT $LN14@DummyValue
$LN12@DummyValue:

; 107  :    {
; 108  :       valueAllocator();      // ensure valueAllocator() statics are initialized before main().
; 109  :    }

	mov	eax, esi
	pop	esi
	ret	0
$LN14@DummyValue:

; 100  :    static DefaultValueAllocator defaultAllocator;

	push	OFFSET ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA
	call	__Init_thread_header
	add	esp, 4
	cmp	DWORD PTR ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA, -1
	jne	SHORT $LN12@DummyValue
	push	OFFSET ??__FdefaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ@YAXXZ ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator''
	mov	DWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, OFFSET ??_7DefaultValueAllocator@Json@@6B@
	call	_atexit
	push	OFFSET ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA
	call	__Init_thread_footer
	add	esp, 8
	jmp	SHORT $LN12@DummyValue
??0DummyValueAllocatorInitializer@Json@@QAE@XZ ENDP	; Json::DummyValueAllocatorInitializer::DummyValueAllocatorInitializer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??__FdefaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ@YAXXZ
text$yd	SEGMENT
??__FdefaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ@YAXXZ PROC ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator'', COMDAT

; 56   : {

	mov	DWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, OFFSET ??_7ValueAllocator@Json@@6B@
	ret	0
??__FdefaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ@YAXXZ ENDP ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ
_TEXT	SEGMENT
?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ PROC	; Json::valueAllocator, COMDAT

; 100  :    static DefaultValueAllocator defaultAllocator;

	mov	eax, DWORD PTR fs:__tls_array
	mov	ecx, DWORD PTR __tls_index
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA
	cmp	eax, DWORD PTR __Init_thread_epoch[ecx]
	jg	SHORT $LN12@valueAlloc
$LN10@valueAlloc:

; 101  :    static ValueAllocator *valueAllocator = &defaultAllocator;
; 102  :    return valueAllocator;

	mov	eax, OFFSET ?valueAllocator@?1??0Json@@YAAAPAVValueAllocator@1@XZ@4PAV21@A

; 103  : }

	ret	0
$LN12@valueAlloc:

; 100  :    static DefaultValueAllocator defaultAllocator;

	push	OFFSET ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA
	call	__Init_thread_header
	add	esp, 4
	cmp	DWORD PTR ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA, -1
	jne	SHORT $LN10@valueAlloc
	push	OFFSET ??__FdefaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ@YAXXZ ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator''
	call	_atexit
	push	OFFSET ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA
	call	__Init_thread_footer
	add	esp, 8
	jmp	SHORT $LN10@valueAlloc
?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ENDP	; Json::valueAllocator
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??_GDefaultValueAllocator@Json@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GDefaultValueAllocator@Json@@UAEPAXI@Z PROC		; Json::DefaultValueAllocator::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	test	BYTE PTR ___flags$[ebp], 1
	push	esi
	mov	esi, ecx

; 56   : {

	mov	DWORD PTR [esi], OFFSET ??_7ValueAllocator@Json@@6B@
	je	SHORT $LN10@scalar
	push	4
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN10@scalar:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GDefaultValueAllocator@Json@@UAEPAXI@Z ENDP		; Json::DefaultValueAllocator::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0DefaultValueAllocator@Json@@QAE@XZ
_TEXT	SEGMENT
??0DefaultValueAllocator@Json@@QAE@XZ PROC		; Json::DefaultValueAllocator::DefaultValueAllocator, COMDAT
; _this$ = ecx
	mov	DWORD PTR [ecx], OFFSET ??_7DefaultValueAllocator@Json@@6B@
	mov	eax, ecx
	ret	0
??0DefaultValueAllocator@Json@@QAE@XZ ENDP		; Json::DefaultValueAllocator::DefaultValueAllocator
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?releaseStringValue@DefaultValueAllocator@Json@@UAEXPAD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?releaseStringValue@DefaultValueAllocator@Json@@UAEXPAD@Z PROC ; Json::DefaultValueAllocator::releaseStringValue, COMDAT
; _this$ = ecx

; 92   :    {

	push	ebp
	mov	ebp, esp

; 93   :       if ( value )

	mov	eax, DWORD PTR _value$[ebp]
	test	eax, eax
	je	SHORT $LN2@releaseStr

; 94   :          free( value );

	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
$LN2@releaseStr:

; 95   :    }

	pop	ebp
	ret	4
?releaseStringValue@DefaultValueAllocator@Json@@UAEXPAD@Z ENDP ; Json::DefaultValueAllocator::releaseStringValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?duplicateStringValue@DefaultValueAllocator@Json@@UAEPADPBDI@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
_length$ = 12						; size = 4
?duplicateStringValue@DefaultValueAllocator@Json@@UAEPADPBDI@Z PROC ; Json::DefaultValueAllocator::duplicateStringValue, COMDAT
; _this$ = ecx

; 78   :    {

	push	ebp
	mov	ebp, esp
	push	esi

; 79   :       //@todo invesgate this old optimization
; 80   :       //if ( !value  ||  value[0] == 0 )
; 81   :       //   return 0;
; 82   : 
; 83   :       if ( length == unknown )

	mov	esi, DWORD PTR _length$[ebp]
	push	edi
	cmp	esi, -1
	jne	SHORT $LN2@duplicateS

; 84   :          length = (unsigned int)strlen(value);

	mov	esi, DWORD PTR _value$[ebp]
	lea	ecx, DWORD PTR [esi+1]
$LL4@duplicateS:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL4@duplicateS
	sub	esi, ecx
$LN2@duplicateS:

; 85   :       char *newString = static_cast<char *>( malloc( length + 1 ) );

	lea	eax, DWORD PTR [esi+1]
	push	eax
	call	DWORD PTR __imp__malloc

; 86   :       memcpy( newString, value, length );

	push	esi
	push	DWORD PTR _value$[ebp]
	mov	edi, eax
	push	edi
	call	_memcpy
	add	esp, 16					; 00000010H

; 87   :       newString[length] = 0;

	mov	BYTE PTR [edi+esi], 0

; 88   :       return newString;

	mov	eax, edi
	pop	edi
	pop	esi

; 89   :    }

	pop	ebp
	ret	8
?duplicateStringValue@DefaultValueAllocator@Json@@UAEPADPBDI@Z ENDP ; Json::DefaultValueAllocator::duplicateStringValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?releaseMemberName@DefaultValueAllocator@Json@@UAEXPAD@Z
_TEXT	SEGMENT
_memberName$ = 8					; size = 4
?releaseMemberName@DefaultValueAllocator@Json@@UAEXPAD@Z PROC ; Json::DefaultValueAllocator::releaseMemberName, COMDAT
; _this$ = ecx

; 72   :    {

	push	ebp
	mov	ebp, esp

; 73   :       releaseStringValue( memberName );

	mov	eax, DWORD PTR [ecx]

; 74   :    }

	pop	ebp

; 73   :       releaseStringValue( memberName );

	jmp	DWORD PTR [eax+16]
?releaseMemberName@DefaultValueAllocator@Json@@UAEXPAD@Z ENDP ; Json::DefaultValueAllocator::releaseMemberName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?makeMemberName@DefaultValueAllocator@Json@@UAEPADPBD@Z
_TEXT	SEGMENT
_memberName$ = 8					; size = 4
?makeMemberName@DefaultValueAllocator@Json@@UAEPADPBD@Z PROC ; Json::DefaultValueAllocator::makeMemberName, COMDAT
; _this$ = ecx

; 67   :    {

	push	ebp
	mov	ebp, esp

; 68   :       return duplicateStringValue( memberName );

	mov	eax, DWORD PTR [ecx]
	push	-1
	push	DWORD PTR _memberName$[ebp]
	call	DWORD PTR [eax+12]

; 69   :    }

	pop	ebp
	ret	4
?makeMemberName@DefaultValueAllocator@Json@@UAEPADPBD@Z ENDP ; Json::DefaultValueAllocator::makeMemberName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??1DefaultValueAllocator@Json@@UAE@XZ
_TEXT	SEGMENT
??1DefaultValueAllocator@Json@@UAE@XZ PROC		; Json::DefaultValueAllocator::~DefaultValueAllocator, COMDAT
; _this$ = ecx

; 56   : {

	mov	DWORD PTR [ecx], OFFSET ??_7ValueAllocator@Json@@6B@

; 64   :    }

	ret	0
??1DefaultValueAllocator@Json@@UAE@XZ ENDP		; Json::DefaultValueAllocator::~DefaultValueAllocator
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?null@Value@Json@@2V12@B@@YAXXZ
text$yd	SEGMENT
??__F?null@Value@Json@@2V12@B@@YAXXZ PROC		; `dynamic atexit destructor for 'Json::Value::null'', COMDAT
	mov	ecx, OFFSET ?null@Value@Json@@2V12@B	; Json::Value::null
	jmp	??1Value@Json@@QAE@XZ			; Json::Value::~Value
??__F?null@Value@Json@@2V12@B@@YAXXZ ENDP		; `dynamic atexit destructor for 'Json::Value::null''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??__E?null@Value@Json@@2V12@B@@YAXXZ
text$di	SEGMENT
??__E?null@Value@Json@@2V12@B@@YAXXZ PROC		; `dynamic initializer for 'Json::Value::null'', COMDAT

; 270  :    , allocated_( 0 )

	and	DWORD PTR ?null@Value@Json@@2V12@B+8, -257 ; fffffeffH

; 22   : const Value Value::null;

	push	OFFSET ??__F?null@Value@Json@@2V12@B@@YAXXZ ; `dynamic atexit destructor for 'Json::Value::null''
	call	_atexit
	pop	ecx
	ret	0
??__E?null@Value@Json@@2V12@B@@YAXXZ ENDP		; `dynamic initializer for 'Json::Value::null''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GStyledWriter@Json@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GStyledWriter@Json@@UAEPAXI@Z PROC			; Json::StyledWriter::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	call	??1StyledWriter@Json@@UAE@XZ		; Json::StyledWriter::~StyledWriter
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN4@scalar
	push	76					; 0000004cH
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN4@scalar:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GStyledWriter@Json@@UAEPAXI@Z ENDP			; Json::StyledWriter::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range, COMDAT
; _this$ = ecx

; 1794 : 		}

	ret	8
?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen, COMDAT
; _this$ = ecx

; 1765 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
	int	3
?_Xlen@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ
_TEXT	SEGMENT
$T1 = -4						; size = 1
?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy, COMDAT
; _this$ = ecx

; 1636 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	push	edi
	mov	edi, ecx

; 1637 : 		if (this->_Myfirst() != pointer())

	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN2@Tidy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

	push	DWORD PTR $T1[ebp]
	push	edi
	push	DWORD PTR [edi+4]
	push	eax
	call	??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

	mov	ecx, DWORD PTR [edi+8]
	mov	eax, 715827883				; 2aaaaaabH
	sub	ecx, DWORD PTR [edi]
	imul	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	24					; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [edi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1643 : 			this->_Myfirst() = pointer();

	mov	DWORD PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	add	esp, 28					; 0000001cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1644 : 			this->_Mylast() = pointer();

	mov	DWORD PTR [edi+4], 0

; 1645 : 			this->_Myend() = pointer();

	mov	DWORD PTR [edi+8], 0
$LN2@Tidy:
	pop	edi

; 1646 : 			}
; 1647 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z
_TEXT	SEGMENT
tv289 = 8						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reserve, COMDAT
; _this$ = ecx

; 1626 : 		{	// ensure room for _Count new elements, grow exponentially

	push	ebp
	mov	ebp, esp
	push	ebx
	mov	ebx, ecx

; 1048 : 		return (this->_Myend() - this->_Mylast());

	mov	eax, 715827883				; 2aaaaaabH
	push	esi
	push	edi

; 1627 : 		if (_Unused_capacity() < _Count)

	mov	edi, DWORD PTR __Count$[ebp]

; 1048 : 		return (this->_Myend() - this->_Mylast());

	mov	edx, DWORD PTR [ebx+8]
	mov	esi, DWORD PTR [ebx+4]
	sub	edx, esi
	imul	edx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 1627 : 		if (_Unused_capacity() < _Count)

	cmp	eax, edi
	jae	SHORT $LN2@Reserve

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	mov	eax, DWORD PTR [ebx]
	sub	esi, eax
	mov	DWORD PTR tv289[ebp], eax
	mov	eax, 715827883				; 2aaaaaabH
	imul	esi

; 1628 : 			{	// need more room, try to get it
; 1629 : 			if (max_size() - size() < _Count)

	mov	eax, 178956970				; 0aaaaaaaH

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	sar	edx, 2
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	add	ecx, edx

; 1628 : 			{	// need more room, try to get it
; 1629 : 			if (max_size() - size() < _Count)

	sub	eax, ecx
	cmp	eax, edi
	jae	SHORT $LN3@Reserve

; 1765 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN135@Reserve:
$LN3@Reserve:

; 1630 : 				_Xlen();
; 1631 : 			_Reallocate(_Grow_to(size() + _Count));

	add	edi, ecx

; 1043 : 		return (this->_Myend() - this->_Myfirst());

	mov	eax, 715827883				; 2aaaaaabH
	mov	ecx, DWORD PTR [ebx+8]
	sub	ecx, DWORD PTR tv289[ebp]
	imul	ecx
	xor	ecx, ecx
	sar	edx, 2
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx

; 1588 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

	mov	edx, 178956970				; 0aaaaaaaH
	mov	eax, esi
	shr	eax, 1
	sub	edx, eax
	add	eax, esi
	cmp	edx, esi
	cmovae	ecx, eax
	cmp	ecx, edi
	cmovae	edi, ecx

; 1630 : 				_Xlen();
; 1631 : 			_Reallocate(_Grow_to(size() + _Count));

	mov	ecx, ebx
	push	edi
	call	?_Reallocate@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocate
$LN2@Reserve:
	pop	edi
	pop	esi
	pop	ebx

; 1632 : 			}
; 1633 : 		}

	pop	ebp
	ret	4
$LN134@Reserve:
?_Reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Ptr$ = -24						; size = 4
__Size$1$ = -20						; size = 4
$T2 = -20						; size = 1
__$EHRec$ = -16						; size = 16
$T3 = 8							; size = 1
__Count$ = 8						; size = 4
?_Reallocate@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocate, COMDAT
; _this$ = ecx

; 1601 : 		{	// move to array of exactly _Count elements

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Reallocate@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	edi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 976  : 		return (_Mybase::allocate(_Count));

	push	DWORD PTR __Count$[ebp]
	call	?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	push	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 810  : 	return {};

	mov	BYTE PTR $T2[ebp], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1602 : 		pointer _Ptr = this->_Getal().allocate(_Count);

	mov	ebx, eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	push	DWORD PTR $T2[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1602 : 		pointer _Ptr = this->_Getal().allocate(_Count);

	mov	DWORD PTR __Ptr$[ebp], ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	push	edi
	push	ebx
	push	DWORD PTR [edi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1604 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	push	DWORD PTR [edi]
	call	??$_Uninitialized_move_al_unchecked1@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_move_al_unchecked1<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	mov	esi, DWORD PTR [edi]
	mov	eax, 715827883				; 2aaaaaabH
	mov	ecx, DWORD PTR [edi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	add	esp, 24					; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	sub	ecx, esi
	imul	ecx
	sar	edx, 2
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	add	ecx, edx
	mov	DWORD PTR __Size$1$[ebp], ecx

; 1609 : 		_CATCH_END
; 1610 : 
; 1611 : 		size_type _Size = size();
; 1612 : 		if (this->_Myfirst() != pointer())

	test	esi, esi
	je	SHORT $LN3@Reallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

	push	DWORD PTR $T3[ebp]
	push	edi
	push	DWORD PTR [edi+4]
	push	esi
	call	??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1615 : 			this->_Getal().deallocate(this->_Myfirst(),

	mov	esi, DWORD PTR [edi]
	mov	eax, 715827883				; 2aaaaaabH
	mov	ecx, DWORD PTR [edi+8]
	sub	ecx, esi
	imul	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	24					; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1615 : 			this->_Getal().deallocate(this->_Myfirst(),

	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	esi
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	mov	ecx, DWORD PTR __Size$1$[ebp]
	add	esp, 28					; 0000001cH
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1620 : 		this->_Myend() = _Ptr + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [ebx+eax*8]
	mov	DWORD PTR [edi+8], eax

; 1621 : 		this->_Mylast() = _Ptr + _Size;

	lea	eax, DWORD PTR [ecx+ecx*2]
	lea	eax, DWORD PTR [ebx+eax*8]
	mov	DWORD PTR [edi+4], eax

; 1622 : 		this->_Myfirst() = _Ptr;

	mov	DWORD PTR [edi], ebx

; 1623 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
__catch$?_Reallocate@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z$0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	24					; 00000018H
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1608 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN194@Reallocate:
$LN193@Reallocate:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBE_NPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBE_NPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Inside, COMDAT
; _this$ = ecx

; 1596 : 		{	// test if _Ptr points inside vector

	push	ebp
	mov	ebp, esp

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	jae	SHORT $LN3@Inside
	cmp	DWORD PTR [ecx], eax
	ja	SHORT $LN3@Inside
	mov	al, 1

; 1598 : 		}

	pop	ebp
	ret	4
$LN3@Inside:

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

	xor	al, al

; 1598 : 		}

	pop	ebp
	ret	4
?_Inside@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBE_NPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEII@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Grow_to, COMDAT
; _this$ = ecx

; 1585 : 		{	// grow by 50% or at least to _Count

	push	ebp
	mov	ebp, esp

; 1043 : 		return (this->_Myend() - this->_Myfirst());

	mov	edx, DWORD PTR [ecx+8]
	mov	eax, 715827883				; 2aaaaaabH
	sub	edx, DWORD PTR [ecx]
	imul	edx
	push	esi
	sar	edx, 2
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx

; 1586 : 		size_type _Capacity = capacity();
; 1587 : 
; 1588 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

	mov	edx, 178956970				; 0aaaaaaaH
	mov	eax, esi
	shr	eax, 1
	sub	edx, eax
	lea	ecx, DWORD PTR [eax+esi]
	xor	eax, eax
	cmp	edx, esi
	pop	esi
	cmovae	eax, ecx

; 1589 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1590 : 		if (_Capacity < _Count)

	cmp	eax, DWORD PTR __Count$[ebp]
	cmovb	eax, DWORD PTR __Count$[ebp]

; 1591 : 			_Capacity = _Count;
; 1592 : 		return (_Capacity);
; 1593 : 		}

	pop	ebp
	ret	4
?_Grow_to@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IBEII@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
$T1 = 12						; size = 1
__Last$ = 12						; size = 4
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy, COMDAT
; _this$ = ecx

; 1580 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

	push	DWORD PTR $T1[ebp]
	push	ecx
	push	DWORD PTR __Last$[ebp]
	push	DWORD PTR __First$[ebp]
	call	??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
	add	esp, 16					; 00000010H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1582 : 		}

	pop	ebp
	ret	8
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size, COMDAT
; _this$ = ecx

; 1185 : 		return (this->_Getal().max_size());

	mov	eax, 178956970				; 0aaaaaaaH

; 1186 : 		}

	ret	0
?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size, COMDAT
; _this$ = ecx

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 715827883				; 2aaaaaabH
	sub	edx, DWORD PTR [ecx]
	imul	edx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 1181 : 		}

	ret	0
?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1048 : 		return (this->_Myend() - this->_Mylast());

	mov	edx, DWORD PTR [ecx+8]
	mov	eax, 715827883				; 2aaaaaabH
	sub	edx, DWORD PTR [ecx+4]
	imul	edx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 1049 : 		}

	ret	0
?_Unused_capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity, COMDAT
; _this$ = ecx

; 1043 : 		return (this->_Myend() - this->_Myfirst());

	mov	edx, DWORD PTR [ecx+8]
	mov	eax, 715827883				; 2aaaaaabH
	sub	edx, DWORD PTR [ecx]
	imul	edx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 1044 : 		}

	ret	0
?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::reserve, COMDAT
; _this$ = ecx

; 1032 : 		{	// determine new minimum length of allocated storage

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx

; 1043 : 		return (this->_Myend() - this->_Myfirst());

	mov	eax, 715827883				; 2aaaaaabH

; 1033 : 		if (capacity() < _Count)

	mov	ecx, DWORD PTR __Count$[ebp]

; 1043 : 		return (this->_Myend() - this->_Myfirst());

	mov	edx, DWORD PTR [esi+8]
	sub	edx, DWORD PTR [esi]
	imul	edx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 1033 : 		if (capacity() < _Count)

	cmp	eax, ecx
	jae	SHORT $LN2@reserve

; 1034 : 			{	// something to do, check and reallocate
; 1035 : 			if (max_size() < _Count)

	cmp	ecx, 178956970				; 0aaaaaaaH
	jbe	SHORT $LN3@reserve

; 1765 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN49@reserve:
$LN3@reserve:

; 1036 : 				_Xlen();
; 1037 : 			_Reallocate(_Count);

	push	ecx
	mov	ecx, esi
	call	?_Reallocate@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocate
$LN2@reserve:
	pop	esi

; 1038 : 			}
; 1039 : 		}

	pop	ebp
	ret	4
$LN48@reserve:
?reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 1
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 975  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	push	edi
	mov	edi, ecx

; 1637 : 		if (this->_Myfirst() != pointer())

	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN4@vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

	push	DWORD PTR $T1[ebp]
	push	edi
	push	DWORD PTR [edi+4]
	push	eax
	call	??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

	mov	ecx, DWORD PTR [edi+8]
	mov	eax, 715827883				; 2aaaaaabH
	sub	ecx, DWORD PTR [edi]
	imul	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	24					; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [edi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1643 : 			this->_Myfirst() = pointer();

	mov	DWORD PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	add	esp, 28					; 0000001cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1644 : 			this->_Mylast() = pointer();

	mov	DWORD PTR [edi+4], 0

; 1645 : 			this->_Myend() = pointer();

	mov	DWORD PTR [edi+8], 0
$LN4@vector:
	pop	edi

; 976  : 		_Tidy();
; 977  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back, COMDAT
; _this$ = ecx

; 896  : 		{	// insert by moving into element at end

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	push	edi

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

	mov	edi, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [esi+4]
	cmp	edi, ecx
	jae	SHORT $LN2@push_back
	mov	eax, DWORD PTR [esi]
	cmp	eax, edi
	ja	SHORT $LN2@push_back

; 897  : 		if (_Inside(_STD addressof(_Val)))
; 898  : 			{	// push back an element
; 899  : 			size_type _Idx = _STD addressof(_Val) - _Unfancy(this->_Myfirst());

	sub	edi, eax
	mov	eax, 715827883				; 2aaaaaabH
	imul	edi
	sar	edx, 2
	mov	edi, edx
	shr	edi, 31					; 0000001fH
	add	edi, edx

; 900  : 			if (this->_Mylast() == this->_Myend())

	cmp	ecx, DWORD PTR [esi+8]
	jne	SHORT $LN4@push_back

; 901  : 				_Reserve(1);

	push	1
	mov	ecx, esi
	call	?_Reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reserve
$LN4@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR [esi+4]
	test	ecx, ecx
	je	SHORT $LN344@push_back
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 903  : 			this->_Getal().construct(_Unfancy(this->_Mylast()),

	mov	eax, DWORD PTR [esi]
	lea	edx, DWORD PTR [edi+edi*2]
	lea	eax, DWORD PTR [eax+edx*8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	push	eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 907  : 		else

	jmp	SHORT $LN490@push_back
$LN2@push_back:

; 908  : 			{	// push back a non-element
; 909  : 			if (this->_Mylast() == this->_Myend())

	cmp	ecx, DWORD PTR [esi+8]
	jne	SHORT $LN5@push_back

; 910  : 				_Reserve(1);

	push	1
	mov	ecx, esi
	call	?_Reserve@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reserve
$LN5@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR [esi+4]
	test	ecx, ecx
	je	SHORT $LN344@push_back
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	push	edi
$LN490@push_back:

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	call	?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
$LN344@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 914  : 			++this->_Mylast();

	add	DWORD PTR [esi+4], 24			; 00000018H
	pop	edi
	pop	esi

; 915  : 			}
; 916  : 		}

	pop	ebp
	ret	4
?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Assign_rv@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Assign_rv@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Assign_rv, COMDAT
; _this$ = ecx

; 868  : 		{	// move from _Right, stealing its contents

	push	ebp
	mov	ebp, esp

; 869  : 		this->_Swap_all((_Myt&)_Right);
; 870  : 		this->_Myfirst() = _Right._Myfirst();

	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 871  : 		this->_Mylast() = _Right._Mylast();

	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 872  : 		this->_Myend() = _Right._Myend();

	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax

; 873  : 
; 874  : 		_Right._Myfirst() = pointer();

	mov	DWORD PTR [edx], 0

; 875  : 		_Right._Mylast() = pointer();

	mov	DWORD PTR [edx+4], 0

; 876  : 		_Right._Myend() = pointer();

	mov	DWORD PTR [edx+8], 0

; 877  : 		}

	pop	ebp
	ret	8
?_Assign_rv@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Assign_rv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 841  : 		{	// construct by moving _Right

	push	ebp
	mov	ebp, esp

; 870  : 		this->_Myfirst() = _Right._Myfirst();

	mov	edx, DWORD PTR __Right$[ebp]

; 485  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0

; 486  : 		_Mylast(),

	mov	DWORD PTR [ecx+4], 0

; 487  : 		_Myend()

	mov	DWORD PTR [ecx+8], 0

; 870  : 		this->_Myfirst() = _Right._Myfirst();

	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 871  : 		this->_Mylast() = _Right._Mylast();

	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 872  : 		this->_Myend() = _Right._Myend();

	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax

; 842  : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 843  : 		}

	mov	eax, ecx

; 874  : 		_Right._Myfirst() = pointer();

	mov	DWORD PTR [edx], 0

; 875  : 		_Right._Mylast() = pointer();

	mov	DWORD PTR [edx+4], 0

; 876  : 		_Right._Myend() = pointer();

	mov	DWORD PTR [edx+8], 0

; 842  : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 843  : 		}

	pop	ebp
	ret	4
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@$$QAV01@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 485  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0

; 708  : 		}

	mov	eax, ecx

; 486  : 		_Mylast(),

	mov	DWORD PTR [ecx+4], 0

; 487  : 		_Myend()

	mov	DWORD PTR [ecx+8], 0

; 708  : 		}

	ret	0
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 320  : 		return (_Myval2);

	mov	eax, ecx

; 321  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 315  : 		return (_Myval2);

	mov	eax, ecx

; 316  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 300  : 		return (*this);

	mov	eax, ecx

; 301  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 295  : 		return (*this);

	mov	eax, ecx

; 296  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 485  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0

; 489  : 		}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	0
??0?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend, COMDAT
; _this$ = ecx

; 668  : 		return (_Get_data()._Myend);

	lea	eax, DWORD PTR [ecx+8]

; 669  : 		}

	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend, COMDAT
; _this$ = ecx

; 663  : 		return (_Get_data()._Myend);

	lea	eax, DWORD PTR [ecx+8]

; 664  : 		}

	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast, COMDAT
; _this$ = ecx

; 658  : 		return (_Get_data()._Mylast);

	lea	eax, DWORD PTR [ecx+4]

; 659  : 		}

	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast, COMDAT
; _this$ = ecx

; 653  : 		return (_Get_data()._Mylast);

	lea	eax, DWORD PTR [ecx+4]

; 654  : 		}

	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst, COMDAT
; _this$ = ecx

; 648  : 		return (_Get_data()._Myfirst);

	mov	eax, ecx

; 649  : 		}

	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst, COMDAT
; _this$ = ecx

; 643  : 		return (_Get_data()._Myfirst);

	mov	eax, ecx

; 644  : 		}

	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data, COMDAT
; _this$ = ecx

; 638  : 		return (_Mypair._Get_second());

	mov	eax, ecx

; 639  : 		}

	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data, COMDAT
; _this$ = ecx

; 633  : 		return (_Mypair._Get_second());

	mov	eax, ecx

; 634  : 		}

	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal, COMDAT
; _this$ = ecx

; 628  : 		return (_Mypair._Get_first());

	mov	eax, ecx

; 629  : 		}

	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal, COMDAT
; _this$ = ecx

; 623  : 		return (_Mypair._Get_first());

	mov	eax, ecx

; 624  : 		}

	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXAAV12@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Swap_all, COMDAT
; _this$ = ecx

; 618  : 		_Get_data()._Swap_all(_Right._Get_data());
; 619  : 		}

	ret	4
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Swap_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Orphan_all, COMDAT
; _this$ = ecx

; 613  : 		_Get_data()._Orphan_all();
; 614  : 		}

	ret	0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 485  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0

; 521  : 		}

	mov	eax, ecx

; 486  : 		_Mylast(),

	mov	DWORD PTR [ecx+4], 0

; 487  : 		_Myend()

	mov	DWORD PTR [ecx+8], 0

; 521  : 		}

	ret	0
??0?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size, COMDAT
; _this$ = ecx

; 1008 : 		return (_Mytraits::max_size(*this));

	mov	eax, 178956970				; 0aaaaaaaH

; 1009 : 		}

	ret	4
?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::deallocate, COMDAT
; _this$ = ecx

; 986  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	24					; 00000018H
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH

; 987  : 		_Mybase::deallocate(_Ptr, _Count);
; 988  : 		}

	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::allocate, COMDAT
; _this$ = ecx

; 975  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp

; 977  : 		}

	pop	ebp

; 976  : 		return (_Mybase::allocate(_Count));

	jmp	?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate
?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@$$QAU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@$$QAU01@@Z PROC ; std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 947  : 		}

	mov	eax, ecx
	ret	4
??0?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@$$QAU01@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 937  : 		}

	mov	eax, ecx
	ret	0
??0?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z PROC ; std::allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size, COMDAT

; 869  : 		return (_Al.max_size());

	mov	eax, 178956970				; 0aaaaaaaH

; 870  : 		}

	ret	0
?max_size@?$allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z ENDP ; std::allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBEIXZ PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::max_size, COMDAT
; _this$ = ecx

; 749  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 178956970				; 0aaaaaaaH

; 750  : 		}

	ret	0
?max_size@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBEIXZ ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate, COMDAT
; _this$ = ecx

; 724  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp

; 51   : 	if (_Count == 0)

	mov	eax, DWORD PTR __Count$[ebp]
	test	eax, eax
	jne	SHORT $LN4@allocate
$LN12@allocate:

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 726  : 		}

	pop	ebp
	ret	4
$LN4@allocate:

; 55   : 	if ((size_t)(-1) / _Sz < _Count)

	cmp	eax, 178956970				; 0aaaaaaaH
	jbe	SHORT $LN5@allocate

; 56   : 		_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN15@allocate:
$LN5@allocate:

; 57   : 	const size_t _User_size = _Count * _Sz;

	lea	eax, DWORD PTR [eax+eax*2]
	shl	eax, 3

; 58   : 
; 59   :  #if defined(_M_IX86) || defined(_M_X64)
; 60   : 	if (_Try_aligned_allocation
; 61   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN6@allocate

; 62   : 		{	// allocate large block
; 63   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 64   : 			"Big allocations should at least match vector register size");
; 65   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

	lea	ecx, DWORD PTR [eax+35]

; 66   : 		if (_Block_size <= _User_size)

	cmp	ecx, eax
	ja	SHORT $LN8@allocate

; 67   : 			_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN16@allocate:
$LN8@allocate:

; 68   : 		const uintptr_t _Ptr_container =
; 69   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

	push	ecx
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4

; 70   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

	test	ecx, ecx
	jne	SHORT $LN9@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN17@allocate:
$LN9@allocate:

; 71   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

	lea	eax, DWORD PTR [ecx+35]
	and	eax, -32				; ffffffe0H

; 72   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 73   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

	mov	DWORD PTR [eax-4], ecx

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 726  : 		}

	pop	ebp
	ret	4
$LN6@allocate:

; 83   : 		_Ptr = ::operator new(_User_size);

	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 84   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	eax, eax
	jne	SHORT $LN12@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@allocate:
$LN14@allocate:
	int	3
?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate, COMDAT
; _this$ = ecx

; 719  : 		{	// deallocate object at _Ptr

	push	ebp
	mov	ebp, esp

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	24					; 00000018H
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH

; 721  : 		}

	pop	ebp
	ret	8
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV01@@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 704  : 		{	// construct by copying (do nothing)
; 705  : 		}

	mov	eax, ecx
	ret	4
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 700  : 		{	// construct default allocator (do nothing)
; 701  : 		}

	mov	eax, ecx
	ret	0
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\include\json\writer.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\include\json\writer.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\include\json\writer.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\include\json\writer.h
;	COMDAT ??1StyledWriter@Json@@UAE@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 1
??1StyledWriter@Json@@UAE@XZ PROC			; Json::StyledWriter::~StyledWriter, COMDAT
; _this$ = ecx

; 69   :       virtual ~StyledWriter(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
	lea	esi, DWORD PTR [edi+40]
	mov	DWORD PTR [edi], OFFSET ??_7StyledWriter@Json@@6B@
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN9@StyledWrit
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN9@StyledWrit:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 15			; 0000000fH

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], 0

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN101@StyledWrit
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	esi, DWORD PTR [esi]
$LN101@StyledWrit:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [esi], 0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\include\json\writer.h

; 69   :       virtual ~StyledWriter(){}

	lea	esi, DWORD PTR [edi+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN114@StyledWrit
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN114@StyledWrit:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 15			; 0000000fH

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], 0

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN206@StyledWrit
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	esi, DWORD PTR [esi]
$LN206@StyledWrit:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\include\json\writer.h

; 69   :       virtual ~StyledWriter(){}

	lea	ebx, DWORD PTR [edi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1637 : 		if (this->_Myfirst() != pointer())

	mov	eax, DWORD PTR [ebx]
	test	eax, eax
	je	SHORT $LN217@StyledWrit
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

	push	DWORD PTR $T1[ebp]
	push	ebx
	push	DWORD PTR [ebx+4]
	push	eax
	call	??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

	mov	esi, DWORD PTR [ebx]
	mov	eax, 715827883				; 2aaaaaabH
	mov	ecx, DWORD PTR [ebx+8]
	sub	ecx, esi
	imul	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	24					; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	esi
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1643 : 			this->_Myfirst() = pointer();

	mov	DWORD PTR [ebx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	add	esp, 28					; 0000001cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1644 : 			this->_Mylast() = pointer();

	mov	DWORD PTR [ebx+4], 0

; 1645 : 			this->_Myend() = pointer();

	mov	DWORD PTR [ebx+8], 0
$LN217@StyledWrit:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\include\json\writer.h

; 69   :       virtual ~StyledWriter(){}

	mov	ecx, edi
	call	??1Writer@Json@@UAE@XZ			; Json::Writer::~Writer
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1StyledWriter@Json@@UAE@XZ ENDP			; Json::StyledWriter::~StyledWriter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
;	COMDAT ??4ValueIterator@Json@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
??4ValueIterator@Json@@QAEAAV01@ABV01@@Z PROC		; Json::ValueIterator::operator=, COMDAT
; _this$ = ecx

; 289  : {

	push	ebp
	mov	ebp, esp

; 146  :    current_ = other.current_;

	mov	eax, DWORD PTR _other$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax

; 290  :    copy( other );
; 291  :    return *this;

	mov	eax, ecx

; 292  : }

	pop	ebp
	ret	4
??4ValueIterator@Json@@QAEAAV01@ABV01@@Z ENDP		; Json::ValueIterator::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
;	COMDAT ??0ValueIterator@Json@@AAE@ABV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@Z
_TEXT	SEGMENT
_current$ = 8						; size = 4
??0ValueIterator@Json@@AAE@ABV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@Z PROC ; Json::ValueIterator::ValueIterator, COMDAT
; _this$ = ecx

; 263  : {

	push	ebp
	mov	ebp, esp

; 30   :    : current_( current )

	mov	eax, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax

; 264  : }

	mov	eax, ecx

; 31   :    , isNull_( false )

	mov	BYTE PTR [ecx+4], 0

; 264  : }

	pop	ebp
	ret	4
??0ValueIterator@Json@@AAE@ABV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@Z ENDP ; Json::ValueIterator::ValueIterator
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
;	COMDAT ??0ValueIterator@Json@@QAE@ABV01@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
??0ValueIterator@Json@@QAE@ABV01@@Z PROC		; Json::ValueIterator::ValueIterator, COMDAT
; _this$ = ecx

; 284  : {

	push	ebp
	mov	ebp, esp

; 283  :    : ValueIteratorBase( other )

	mov	edx, DWORD PTR _other$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 285  : }

	mov	eax, ecx
	pop	ebp
	ret	4
??0ValueIterator@Json@@QAE@ABV01@@Z ENDP		; Json::ValueIterator::ValueIterator
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
;	COMDAT ??0ValueIterator@Json@@QAE@ABVValueConstIterator@1@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
??0ValueIterator@Json@@QAE@ABVValueConstIterator@1@@Z PROC ; Json::ValueIterator::ValueIterator, COMDAT
; _this$ = ecx

; 279  : {

	push	ebp
	mov	ebp, esp

; 278  :    : ValueIteratorBase( other )

	mov	edx, DWORD PTR _other$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 280  : }

	mov	eax, ecx
	pop	ebp
	ret	4
??0ValueIterator@Json@@QAE@ABVValueConstIterator@1@@Z ENDP ; Json::ValueIterator::ValueIterator
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
;	COMDAT ??0ValueIterator@Json@@QAE@XZ
_TEXT	SEGMENT
??0ValueIterator@Json@@QAE@XZ PROC			; Json::ValueIterator::ValueIterator, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 38   : 		: _Ptr()

	mov	DWORD PTR [ecx], 0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl

; 257  : }

	mov	eax, ecx

; 16   :    , isNull_( true )

	mov	BYTE PTR [ecx+4], 1

; 257  : }

	ret	0
??0ValueIterator@Json@@QAE@XZ ENDP			; Json::ValueIterator::ValueIterator
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
;	COMDAT ??4ValueConstIterator@Json@@QAEAAV01@ABVValueIteratorBase@1@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
??4ValueConstIterator@Json@@QAEAAV01@ABVValueIteratorBase@1@@Z PROC ; Json::ValueConstIterator::operator=, COMDAT
; _this$ = ecx

; 241  : {

	push	ebp
	mov	ebp, esp

; 146  :    current_ = other.current_;

	mov	eax, DWORD PTR _other$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax

; 242  :    copy( other );
; 243  :    return *this;

	mov	eax, ecx

; 244  : }

	pop	ebp
	ret	4
??4ValueConstIterator@Json@@QAEAAV01@ABVValueIteratorBase@1@@Z ENDP ; Json::ValueConstIterator::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
;	COMDAT ??0ValueConstIterator@Json@@AAE@ABV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@Z
_TEXT	SEGMENT
_current$ = 8						; size = 4
??0ValueConstIterator@Json@@AAE@ABV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@Z PROC ; Json::ValueConstIterator::ValueConstIterator, COMDAT
; _this$ = ecx

; 225  : {

	push	ebp
	mov	ebp, esp

; 30   :    : current_( current )

	mov	eax, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax

; 226  : }

	mov	eax, ecx

; 31   :    , isNull_( false )

	mov	BYTE PTR [ecx+4], 0

; 226  : }

	pop	ebp
	ret	4
??0ValueConstIterator@Json@@AAE@ABV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@Z ENDP ; Json::ValueConstIterator::ValueConstIterator
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
;	COMDAT ??0ValueConstIterator@Json@@QAE@XZ
_TEXT	SEGMENT
??0ValueConstIterator@Json@@QAE@XZ PROC			; Json::ValueConstIterator::ValueConstIterator, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 38   : 		: _Ptr()

	mov	DWORD PTR [ecx], 0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl

; 219  : }

	mov	eax, ecx

; 16   :    , isNull_( true )

	mov	BYTE PTR [ecx+4], 1

; 219  : }

	ret	0
??0ValueConstIterator@Json@@QAE@XZ ENDP			; Json::ValueConstIterator::ValueConstIterator
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator--, COMDAT
; _this$ = ecx

; 424  : 		{	// predecrement

	push	esi
	mov	esi, ecx

; 310  : 		--static_cast<_Mybase&>(*this);

	call	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator--

; 425  : 		--static_cast<_Mybase&>(*this);
; 426  : 		return (*this);

	mov	eax, esi
	pop	esi

; 427  : 		}

	ret	0
??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator++, COMDAT
; _this$ = ecx

; 411  : 		{	// preincrement

	push	esi
	mov	esi, ecx

; 273  : 		++static_cast<_Mybase&>(*this);

	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator++

; 412  : 		++static_cast<_Mybase&>(*this);
; 413  : 		return (*this);

	mov	eax, esi
	pop	esi

; 414  : 		}

	ret	0
??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ
_TEXT	SEGMENT
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator->, COMDAT
; _this$ = ecx

; 603  : 		return ((reference)_Pnode->_Myval);

	mov	eax, DWORD PTR [ecx]
	add	eax, 16					; 00000010H

; 407  : 		return (pointer_traits<pointer>::pointer_to(**this));
; 408  : 		}

	ret	0
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator*, COMDAT
; _this$ = ecx

; 603  : 		return ((reference)_Pnode->_Myval);

	mov	eax, DWORD PTR [ecx]
	add	eax, 16					; 00000010H

; 402  : 		return ((reference)**(_Mybase *)this);
; 403  : 		}

	ret	0
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >, COMDAT
; _this$ = ecx

; 384  : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp

; 43   : 		: _Ptr(_Pnode)

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx], eax

; 385  : 		}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >, COMDAT
; _this$ = ecx

; 38   : 		: _Ptr()

	mov	DWORD PTR [ecx], 0

; 379  : 		{	// construct with null node
; 380  : 		}

	mov	eax, ecx
	ret	0
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator!=, COMDAT
; _this$ = ecx

; 340  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax]
	setne	al

; 341  : 		return (!(*this == _Right));
; 342  : 		}

	pop	ebp
	ret	4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator==, COMDAT
; _this$ = ecx

; 324  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax]
	sete	al

; 325  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 326  : 		if (this->_Getcont() != _Right._Getcont())
; 327  : 			{	// report error
; 328  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 329  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 330  : 			}
; 331  : 
; 332  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 333  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		return (this->_Ptr == _Right._Ptr);
; 337  : 		}

	pop	ebp
	ret	4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator--, COMDAT
; _this$ = ecx

; 285  : 		{	// predecrement

	push	esi
	mov	esi, ecx

; 286  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 287  : 		if (this->_Getcont() == 0
; 288  : 			|| this->_Ptr == nullptr_t{})
; 289  : 			{	// report error
; 290  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 291  : 			_SCL_SECURE_OUT_OF_RANGE;
; 292  : 			}
; 293  : 
; 294  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 295  : 		--static_cast<_Mybase&>(*this);
; 296  : 		if (_Ptrsav == this->_Ptr)
; 297  : 			{	// report error
; 298  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 299  : 			_SCL_SECURE_OUT_OF_RANGE;
; 300  : 			}
; 301  : 
; 302  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 303  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != nullptr_t{});
; 304  : 
; 305  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 306  : 		--static_cast<_Mybase&>(*this);
; 307  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 308  : 
; 309  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 310  : 		--static_cast<_Mybase&>(*this);

	call	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator--

; 311  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 312  : 
; 313  : 		return (*this);

	mov	eax, esi
	pop	esi

; 314  : 		}

	ret	0
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator++, COMDAT
; _this$ = ecx

; 278  : 		{	// postincrement

	push	ebp
	mov	ebp, esp

; 279  : 		_Myiter _Tmp = *this;

	mov	edx, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [esi], edx

; 273  : 		++static_cast<_Mybase&>(*this);

	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator++

; 280  : 		++*this;
; 281  : 		return (_Tmp);

	mov	eax, esi
	pop	esi

; 282  : 		}

	pop	ebp
	ret	8
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator++, COMDAT
; _this$ = ecx

; 258  : 		{	// preincrement

	push	esi
	mov	esi, ecx

; 259  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 260  : 		if (this->_Getcont() == 0
; 261  : 			|| this->_Ptr == nullptr_t{}
; 262  : 			|| _Mytree::_Isnil(this->_Ptr))
; 263  : 			{	// report error
; 264  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 265  : 			_SCL_SECURE_OUT_OF_RANGE;
; 266  : 			}
; 267  : 
; 268  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 269  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != nullptr_t{});
; 270  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 271  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 272  : 
; 273  : 		++static_cast<_Mybase&>(*this);

	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator++

; 274  : 		return (*this);

	mov	eax, esi
	pop	esi

; 275  : 		}

	ret	0
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator*, COMDAT
; _this$ = ecx

; 603  : 		return ((reference)_Pnode->_Myval);

	mov	eax, DWORD PTR [ecx]
	add	eax, 16					; 00000010H

; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		const auto _Mycont = static_cast<const _Mytree *>(this->_Getcont());
; 234  : 		if (_Mycont == 0
; 235  : 			|| this->_Ptr == nullptr_t{}
; 236  : 			|| this->_Ptr == _Mycont->_Myhead)
; 237  : 			{	// report error
; 238  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 239  : 			_SCL_SECURE_OUT_OF_RANGE;
; 240  : 			}
; 241  : 
; 242  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 243  : 		_SCL_SECURE_VALIDATE(this->_Ptr != nullptr_t{});
; 244  : 		const auto _Mycont = static_cast<const _Mytree *>(this->_Getcont());
; 245  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 246  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr != _Mycont->_Myhead);
; 247  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 248  : 
; 249  : 		return (_Mytree::_Myval(this->_Ptr));
; 250  : 		}

	ret	0
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Unchecked@?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QBE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Unchecked@?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QBE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@2@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Unchecked, COMDAT
; _this$ = ecx

; 226  : 		{	// make an unchecked iterator

	push	ebp
	mov	ebp, esp

; 43   : 		: _Ptr(_Pnode)

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}

	pop	ebp
	ret	4
?_Unchecked@?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QBE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@2@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Unchecked
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >, COMDAT
; _this$ = ecx

; 214  : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp

; 43   : 		: _Ptr(_Pnode)

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx], eax

; 215  : 		}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >, COMDAT
; _this$ = ecx

; 38   : 		: _Ptr()

	mov	DWORD PTR [ecx], 0

; 210  : 		}

	mov	eax, ecx
	ret	0
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 123  : 		return (_Ptr);

	mov	eax, DWORD PTR [ecx]

; 124  : 		}

	ret	0
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??9?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator!=, COMDAT
; _this$ = ecx

; 117  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax]
	setne	al

; 118  : 		return (!(*this == _Right));
; 119  : 		}

	pop	ebp
	ret	4
??9?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator==, COMDAT
; _this$ = ecx

; 112  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax]
	sete	al

; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}

	pop	ebp
	ret	4
??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator--, COMDAT
; _this$ = ecx

; 84   : 		{	// predecrement

	mov	edx, ecx

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [edx]

; 85   : 		if (_Mytree::_Isnil(_Ptr))

	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LN4@operator

; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost

	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx], eax

; 100  : 			}
; 101  : 		return (*this);

	mov	eax, edx

; 102  : 		}

	ret	0
$LN4@operator:

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	ecx, DWORD PTR [eax]

; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))

	cmp	BYTE PTR [ecx+13], 0
	jne	SHORT $LN40@operator

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx+8]

; 608  : 		while (!_Isnil(_Right(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN23@operator
$LL22@operator:

; 609  : 			_Pnode = _Right(_Pnode);

	mov	ecx, eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx+8]

; 608  : 		while (!_Isnil(_Right(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL22@operator

; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head

	mov	DWORD PTR [edx], ecx

; 100  : 			}
; 101  : 		return (*this);

	mov	eax, edx

; 102  : 		}

	ret	0
$LN40@operator:

; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))

	mov	ecx, DWORD PTR [eax+4]
	cmp	BYTE PTR [ecx+13], 0
	jne	SHORT $LN3@operator
	npad	4
$LL2@operator:
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx]
	jne	SHORT $LN3@operator

; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree

	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [ecx+4]
	cmp	BYTE PTR [ecx+13], 0
	je	SHORT $LL2@operator
$LN3@operator:

; 96   : 			if (_Mytree::_Isnil(_Ptr))

	mov	eax, DWORD PTR [edx]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN47@operator
$LN23@operator:

; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head

	mov	DWORD PTR [edx], ecx
$LN47@operator:

; 100  : 			}
; 101  : 		return (*this);

	mov	eax, edx

; 102  : 		}

	ret	0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 59   : 		{	// preincrement

	mov	edx, ecx

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [edx]

; 60   : 		if (_Mytree::_Isnil(_Ptr))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN41@operator

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	ecx, DWORD PTR [eax+8]

; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

	cmp	BYTE PTR [ecx+13], 0
	jne	SHORT $LN34@operator

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN19@operator
	npad	5
$LL18@operator:

; 616  : 			_Pnode = _Left(_Pnode);

	mov	ecx, eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL18@operator
$LN19@operator:

; 63   : 			_Ptr = _Mytree::_Min(

	mov	DWORD PTR [edx], ecx

; 72   : 			}
; 73   : 		return (*this);

	mov	eax, edx

; 74   : 		}

	ret	0
$LN34@operator:

; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

	mov	eax, DWORD PTR [eax+4]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN3@operator
$LL2@operator:
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN3@operator

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [eax+4]
	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL2@operator
$LN3@operator:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

	mov	DWORD PTR [edx], eax
$LN41@operator:

; 72   : 			}
; 73   : 		return (*this);

	mov	eax, edx

; 74   : 		}

	ret	0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??D?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEABU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEABU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator*, COMDAT
; _this$ = ecx

; 603  : 		return ((reference)_Pnode->_Myval);

	mov	eax, DWORD PTR [ecx]
	add	eax, 16					; 00000010H

; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}

	ret	0
??D?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEABU?$pair@$$CBVCZString@Value@Json@@V23@@1@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 44   : 		{	// construct with node pointer _Pnode

	push	ebp
	mov	ebp, esp

; 43   : 		: _Ptr(_Pnode)

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx], eax

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 38   : 		: _Ptr()

	mov	DWORD PTR [ecx], 0

; 40   : 		}

	mov	eax, ecx
	ret	0
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
;	COMDAT ?copy@ValueIteratorBase@Json@@IAEXABV12@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
?copy@ValueIteratorBase@Json@@IAEXABV12@@Z PROC		; Json::ValueIteratorBase::copy, COMDAT
; _this$ = ecx

; 144  : {

	push	ebp
	mov	ebp, esp

; 145  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 146  :    current_ = other.current_;

	mov	eax, DWORD PTR _other$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax

; 147  : #else
; 148  :    if ( isArray_ )
; 149  :       iterator_.array_ = other.iterator_.array_;
; 150  :    iterator_.map_ = other.iterator_.map_;
; 151  : #endif
; 152  : }

	pop	ebp
	ret	4
?copy@ValueIteratorBase@Json@@IAEXABV12@@Z ENDP		; Json::ValueIteratorBase::copy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
;	COMDAT ?isEqual@ValueIteratorBase@Json@@IBE_NABV12@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
?isEqual@ValueIteratorBase@Json@@IBE_NABV12@@Z PROC	; Json::ValueIteratorBase::isEqual, COMDAT
; _this$ = ecx

; 127  : {

	push	ebp
	mov	ebp, esp

; 128  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 129  :    if ( isNull_ )

	cmp	BYTE PTR [ecx+4], 0

; 130  :    {
; 131  :       return other.isNull_;

	mov	eax, DWORD PTR _other$[ebp]
	je	SHORT $LN2@isEqual
	mov	al, BYTE PTR [eax+4]

; 132  :    }
; 133  :    return current_ == other.current_;
; 134  : #else
; 135  :    if ( isArray_ )
; 136  :       return ValueInternalArray::equals( iterator_.array_, other.iterator_.array_ );
; 137  :    return ValueInternalMap::equals( iterator_.map_, other.iterator_.map_ );
; 138  : #endif
; 139  : }

	pop	ebp
	ret	4
$LN2@isEqual:
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax]
	sete	al
	pop	ebp
	ret	4
?isEqual@ValueIteratorBase@Json@@IBE_NABV12@@Z ENDP	; Json::ValueIteratorBase::isEqual
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
;	COMDAT ?computeDistance@ValueIteratorBase@Json@@IBEHABV12@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
?computeDistance@ValueIteratorBase@Json@@IBEHABV12@@Z PROC ; Json::ValueIteratorBase::computeDistance, COMDAT
; _this$ = ecx

; 90   : {

	push	ebp
	mov	ebp, esp

; 91   : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 92   : # ifdef JSON_USE_CPPTL_SMALLMAP
; 93   :    return current_ - other.current_;
; 94   : # else
; 95   :    // Iterator for null value are initialized using the default
; 96   :    // constructor, which initialize current_ to the default
; 97   :    // std::map::iterator. As begin() and end() are two instance 
; 98   :    // of the default std::map::iterator, they can not be compared.
; 99   :    // To allow this, we handle this comparison specifically.
; 100  :    if ( isNull_  &&  other.isNull_ )

	cmp	BYTE PTR [ecx+4], 0
	mov	edx, DWORD PTR _other$[ebp]
	je	SHORT $LN5@computeDis
	cmp	BYTE PTR [edx+4], 0
	je	SHORT $LN5@computeDis

; 101  :    {
; 102  :       return 0;

	xor	eax, eax

; 116  : # endif
; 117  : #else
; 118  :    if ( isArray_ )
; 119  :       return ValueInternalArray::distance( iterator_.array_, other.iterator_.array_ );
; 120  :    return ValueInternalMap::distance( iterator_.map_, other.iterator_.map_ );
; 121  : #endif
; 122  : }

	pop	ebp
	ret	4
$LN5@computeDis:

; 111  :    for ( Value::ObjectValues::iterator it = current_; it != other.current_; ++it )

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx]
	push	esi
	xor	esi, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 336  : 		return (this->_Ptr == _Right._Ptr);

	cmp	eax, edx
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl

; 111  :    for ( Value::ObjectValues::iterator it = current_; it != other.current_; ++it )

	je	SHORT $LN3@computeDis
$LL17@computeDis:

; 112  :    {
; 113  :       ++myDistance;

	inc	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 60   : 		if (_Mytree::_Isnil(_Ptr))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN52@computeDis

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	ecx, DWORD PTR [eax+8]

; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

	cmp	BYTE PTR [ecx+13], 0
	jne	SHORT $LN49@computeDis

; 63   : 			_Ptr = _Mytree::_Min(

	mov	eax, ecx

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	ecx, DWORD PTR [eax]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [ecx+13], 0
	jne	SHORT $LN52@computeDis
	npad	3
$LL28@computeDis:

; 616  : 			_Pnode = _Left(_Pnode);

	mov	eax, ecx

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	ecx, DWORD PTR [eax]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [ecx+13], 0
	je	SHORT $LL28@computeDis

; 65   : 		else

	jmp	SHORT $LN52@computeDis
$LN49@computeDis:

; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

	mov	ecx, DWORD PTR [eax+4]
	cmp	BYTE PTR [ecx+13], 0
	jne	SHORT $LN59@computeDis
$LL12@computeDis:
	cmp	eax, DWORD PTR [ecx+8]
	jne	SHORT $LN59@computeDis

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

	mov	eax, ecx
	mov	ecx, DWORD PTR [ecx+4]
	cmp	BYTE PTR [ecx+13], 0
	je	SHORT $LL12@computeDis
$LN59@computeDis:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

	mov	eax, ecx
$LN52@computeDis:

; 336  : 		return (this->_Ptr == _Right._Ptr);

	cmp	eax, edx
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl

; 111  :    for ( Value::ObjectValues::iterator it = current_; it != other.current_; ++it )

	jne	SHORT $LL17@computeDis
$LN3@computeDis:

; 114  :    }
; 115  :    return myDistance;

	mov	eax, esi
	pop	esi

; 116  : # endif
; 117  : #else
; 118  :    if ( isArray_ )
; 119  :       return ValueInternalArray::distance( iterator_.array_, other.iterator_.array_ );
; 120  :    return ValueInternalMap::distance( iterator_.map_, other.iterator_.map_ );
; 121  : #endif
; 122  : }

	pop	ebp
	ret	4
?computeDistance@ValueIteratorBase@Json@@IBEHABV12@@Z ENDP ; Json::ValueIteratorBase::computeDistance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
;	COMDAT ?decrement@ValueIteratorBase@Json@@IAEXXZ
_TEXT	SEGMENT
?decrement@ValueIteratorBase@Json@@IAEXXZ PROC		; Json::ValueIteratorBase::decrement, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 310  : 		--static_cast<_Mybase&>(*this);

	jmp	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator--
?decrement@ValueIteratorBase@Json@@IAEXXZ ENDP		; Json::ValueIteratorBase::decrement
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
;	COMDAT ?increment@ValueIteratorBase@Json@@IAEXXZ
_TEXT	SEGMENT
?increment@ValueIteratorBase@Json@@IAEXXZ PROC		; Json::ValueIteratorBase::increment, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 273  : 		++static_cast<_Mybase&>(*this);

	jmp	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator++
?increment@ValueIteratorBase@Json@@IAEXXZ ENDP		; Json::ValueIteratorBase::increment
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
;	COMDAT ?deref@ValueIteratorBase@Json@@IBEAAVValue@2@XZ
_TEXT	SEGMENT
?deref@ValueIteratorBase@Json@@IBEAAVValue@2@XZ PROC	; Json::ValueIteratorBase::deref, COMDAT
; _this$ = ecx

; 52   : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 53   :    return current_->second;

	mov	eax, DWORD PTR [ecx]
	add	eax, 24					; 00000018H

; 54   : #else
; 55   :    if ( isArray_ )
; 56   :       return ValueInternalArray::dereference( iterator_.array_ );
; 57   :    return ValueInternalMap::value( iterator_.map_ );
; 58   : #endif
; 59   : }

	ret	0
?deref@ValueIteratorBase@Json@@IBEAAVValue@2@XZ ENDP	; Json::ValueIteratorBase::deref
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
;	COMDAT ?memberName@ValueIteratorBase@Json@@QBEPBDXZ
_TEXT	SEGMENT
?memberName@ValueIteratorBase@Json@@QBEPBDXZ PROC	; Json::ValueIteratorBase::memberName, COMDAT
; _this$ = ecx
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 244  :    return cstr_;

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+16]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl

; 200  :    return name ? name : "";

	test	ecx, ecx
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	cmovne	eax, ecx

; 201  : #else
; 202  :    if ( !isArray_ )
; 203  :       return ValueInternalMap::key( iterator_.map_ );
; 204  :    return "";
; 205  : #endif
; 206  : }

	ret	0
?memberName@ValueIteratorBase@Json@@QBEPBDXZ ENDP	; Json::ValueIteratorBase::memberName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
;	COMDAT ?index@ValueIteratorBase@Json@@QBEIXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?index@ValueIteratorBase@Json@@QBEIXZ PROC		; Json::ValueIteratorBase::index, COMDAT
; _this$ = ecx

; 181  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?index@ValueIteratorBase@Json@@QBEIXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 603  : 		return ((reference)_Pnode->_Myval);

	mov	esi, DWORD PTR [ecx]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 188  : : cstr_( other.index_ != noDuplication &&  other.cstr_ != 0

	cmp	DWORD PTR [esi+20], 0
	je	SHORT $LN14@index
	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN14@index
	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	DWORD PTR [esi+16]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+4]
	mov	edi, eax
	jmp	SHORT $LN15@index
$LN14@index:
	mov	edi, DWORD PTR [esi+16]
$LN15@index:

; 189  :                 ?  valueAllocator()->makeMemberName( other.cstr_ )
; 190  :                 : other.cstr_ )
; 191  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN16@index
	xor	eax, eax
	cmp	DWORD PTR [esi+20], eax
	setne	al
	jmp	SHORT $LN17@index
$LN16@index:
	mov	eax, DWORD PTR [esi+20]
$LN17@index:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl

; 184  :    if ( !czstring.c_str() )

	or	esi, -1
	test	edi, edi
	cmove	esi, eax
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 197  : {

	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 198  :    if ( cstr_  &&  index_ == duplicate )

	je	SHORT $LN26@index
	cmp	eax, 1
	jne	SHORT $LN26@index

; 199  :       valueAllocator()->releaseMemberName( const_cast<char *>( cstr_ ) );

	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	edi
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	DWORD PTR [edx+8]
$LN26@index:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl

; 186  :    return Value::UInt( -1 );

	mov	eax, esi

; 187  : #else
; 188  :    if ( isArray_ )
; 189  :       return Value::UInt( ValueInternalArray::indexOf( iterator_.array_ ) );
; 190  :    return Value::UInt( -1 );
; 191  : #endif
; 192  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?index@ValueIteratorBase@Json@@QBEIXZ$1:
	call	___std_terminate
	ret	0
__ehhandler$?index@ValueIteratorBase@Json@@QBEIXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?index@ValueIteratorBase@Json@@QBEIXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?index@ValueIteratorBase@Json@@QBEIXZ ENDP		; Json::ValueIteratorBase::index
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
;	COMDAT ?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ
_TEXT	SEGMENT
_czstring$ = -24					; size = 8
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ PROC	; Json::ValueIteratorBase::key, COMDAT
; _this$ = ecx

; 157  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 603  : 		return ((reference)_Pnode->_Myval);

	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR $T2[ebp], 0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 188  : : cstr_( other.index_ != noDuplication &&  other.cstr_ != 0

	cmp	DWORD PTR [esi+20], 0
	je	SHORT $LN16@key
	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN16@key
	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	DWORD PTR [esi+16]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+4]
	mov	edi, eax
	jmp	SHORT $LN51@key
$LN16@key:
	mov	edi, DWORD PTR [esi+16]
$LN51@key:

; 189  :                 ?  valueAllocator()->makeMemberName( other.cstr_ )
; 190  :                 : other.cstr_ )
; 191  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	DWORD PTR [esi+16], 0
	mov	DWORD PTR _czstring$[ebp], edi
	je	SHORT $LN18@key
	xor	ebx, ebx
	cmp	DWORD PTR [esi+20], ebx
	setne	bl
	jmp	SHORT $LN52@key
$LN18@key:
	mov	ebx, DWORD PTR [esi+20]
$LN52@key:
	mov	DWORD PTR _czstring$[ebp+4], ebx
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl

; 159  :    const Value::CZString czstring = (*current_).first;

	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 160  :    if ( czstring.c_str() )

	test	edi, edi
	je	SHORT $LN2@key
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 250  :    return index_ == noDuplication;

	test	ebx, ebx
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl

; 162  :       if ( czstring.isStaticString() )

	jne	SHORT $LN3@key
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 383  :    : type_( stringValue )

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	BYTE PTR [eax+8], 4

; 384  :    , allocated_( false )

	and	DWORD PTR [eax+8], -257			; fffffeffH

; 385  :    , comments_( 0 )

	mov	DWORD PTR [eax+12], ebx

; 386  : # ifdef JSON_VALUE_USE_INTERNAL_MAP
; 387  :    , itemIsUsed_( 0 )
; 388  : #endif
; 389  : {
; 390  :    value_.string_ = const_cast<char *>( value.c_str() );

	mov	DWORD PTR [eax], edi
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl

; 176  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN3@key:

; 164  :       return Value( czstring.c_str() );

	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, esi
	push	edi
	call	??0Value@Json@@QAE@PBD@Z		; Json::Value::Value
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 197  : {

	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 198  :    if ( cstr_  &&  index_ == duplicate )

	cmp	ebx, 1
	jne	SHORT $LN39@key

; 199  :       valueAllocator()->releaseMemberName( const_cast<char *>( cstr_ ) );

	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	edi
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	DWORD PTR [edx+8]
$LN39@key:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl

; 164  :       return Value( czstring.c_str() );

	mov	eax, esi

; 176  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN2@key:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 313  :    : type_( intValue )

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	BYTE PTR [eax+8], 1

; 314  :    , comments_( 0 )

	mov	DWORD PTR [eax+12], 0

; 315  : # ifdef JSON_VALUE_USE_INTERNAL_MAP
; 316  :    , itemIsUsed_( 0 )
; 317  : #endif
; 318  : {
; 319  :    value_.int_ = value;

	mov	DWORD PTR [eax], ebx
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl

; 176  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ$0:
	lea	ecx, DWORD PTR _czstring$[ebp]
	jmp	??1CZString@Value@Json@@QAE@XZ		; Json::Value::CZString::~CZString
__unwindfunclet$?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ$2:
	call	___std_terminate
	ret	0
__unwindfunclet$?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ$3:
	call	___std_terminate
	ret	0
__unwindfunclet$?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ$4:
	call	___std_terminate
	ret	0
__ehhandler$?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?key@ValueIteratorBase@Json@@QBE?AVValue@2@XZ ENDP	; Json::ValueIteratorBase::key
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
;	COMDAT ??0ValueIteratorBase@Json@@QAE@ABV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@Z
_TEXT	SEGMENT
_current$ = 8						; size = 4
??0ValueIteratorBase@Json@@QAE@ABV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@Z PROC ; Json::ValueIteratorBase::ValueIteratorBase, COMDAT
; _this$ = ecx

; 32   : {

	push	ebp
	mov	ebp, esp

; 30   :    : current_( current )

	mov	eax, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax

; 33   : }

	mov	eax, ecx
	mov	BYTE PTR [ecx+4], 0
	pop	ebp
	ret	4
??0ValueIteratorBase@Json@@QAE@ABV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@Z ENDP ; Json::ValueIteratorBase::ValueIteratorBase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAEPAXI@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAEPAXI@Z PROC ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAEPAXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

	mov	eax, DWORD PTR [esi]

; 2168 : 		erase(begin(), end());

	push	eax

; 1090 : 		{	// destroy tree

	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2168 : 		erase(begin(), end());

	push	DWORD PTR [eax]
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	40					; 00000028H
	push	1
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN160@scalar
	push	8
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN160@scalar:
	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAEPAXI@Z$1:
	call	___std_terminate
	ret	0
__ehhandler$??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAEPAXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAEPAXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??_G?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAEPAXI@Z ENDP ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ PROC ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::~map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

	mov	eax, DWORD PTR [esi]

; 2168 : 		erase(begin(), end());

	push	eax

; 1090 : 		{	// destroy tree

	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2168 : 		erase(begin(), end());

	push	DWORD PTR [eax]
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	40					; 00000028H
	push	1
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ$0:
	call	___std_terminate
	ret	0
__ehhandler$??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ ENDP ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::~map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
;	COMDAT ??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Right$ = 8						; size = 4
??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@ABV01@@Z PROC ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >, COMDAT
; _this$ = ecx

; 111  : 		{	// construct map by copying _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi

; 109  : 		: _Mybase(_Right,

	lea	eax, DWORD PTR $T1[ebp]

; 111  : 		{	// construct map by copying _Right

	mov	esi, ecx
	push	eax
	push	DWORD PTR __Right$[ebp]
	mov	DWORD PTR _this$[ebp], esi
	call	??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > > >

; 112  : 		}

	mov	eax, esi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@ABV01@@Z ENDP ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
;	COMDAT ??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ PROC ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >, COMDAT
; _this$ = ecx

; 100  : 		{	// construct empty map from defaults

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		: _Myhead(),

	mov	DWORD PTR [esi], 0

; 568  : 		_Mysize(0)

	mov	DWORD PTR [esi+4], 0

; 721  : 		_Myhead() = _Buyheadnode();

	call	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buyheadnode
	mov	DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 101  : 		}

	mov	eax, esi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ ENDP ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEABVCZString@Value@Json@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEABVCZString@Value@Json@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Key, COMDAT
; _this$ = ecx

; 2177 : 		{	// return reference to key in node

	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 62   : 		return (_Val.first);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 16					; 00000010H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2179 : 		}

	pop	ebp
	ret	4
?_Key@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEABVCZString@Value@Json@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Key
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Kfn@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEABVCZString@Value@Json@@ABU?$pair@$$CBVCZString@Value@Json@@V23@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEABVCZString@Value@Json@@ABU?$pair@$$CBVCZString@Value@Json@@V23@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Kfn, COMDAT
; _this$ = ecx

; 2172 : 		{	// get key from value

	push	ebp
	mov	ebp, esp

; 2173 : 		return (_Traits::_Kfn(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 2174 : 		}

	pop	ebp
	ret	4
?_Kfn@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEABVCZString@Value@Json@@ABU?$pair@$$CBVCZString@Value@Json@@V23@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Kfn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 2167 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx

; 43   : 		: _Ptr(_Pnode)

	mov	eax, DWORD PTR [ecx]

; 2168 : 		erase(begin(), end());

	push	eax
	push	DWORD PTR [eax]
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase

; 2169 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 2111 : 		{	// promote left node to root of subtree

	push	ebp
	mov	ebp, esp

; 2112 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	esi
	mov	esi, DWORD PTR [edx]

; 2113 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edx], eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [esi+8]

; 2114 : 
; 2115 : 		if (!this->_Isnil(this->_Right(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN2@Rrotate

; 2116 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

	mov	DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 2117 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], eax

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	eax, DWORD PTR [ecx]

; 2118 : 
; 2119 : 		if (_Wherenode == _Root())

	cmp	edx, DWORD PTR [eax+4]
	jne	SHORT $LN3@Rrotate

; 2120 : 			_Root() = _Pnode;

	mov	DWORD PTR [eax+4], esi

; 2125 : 
; 2126 : 		this->_Right(_Pnode) = _Wherenode;

	mov	DWORD PTR [esi+8], edx

; 2127 : 		this->_Parent(_Wherenode) = _Pnode;

	mov	DWORD PTR [edx+4], esi
	pop	esi

; 2128 : 		}

	pop	ebp
	ret	4
$LN3@Rrotate:

; 598  : 		return ((_Nodepref)_Pnode->_Right);

	mov	eax, DWORD PTR [edx+4]

; 2121 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

	cmp	edx, DWORD PTR [eax+8]
	jne	SHORT $LN5@Rrotate

; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

	mov	DWORD PTR [eax+8], esi

; 2125 : 
; 2126 : 		this->_Right(_Pnode) = _Wherenode;

	mov	DWORD PTR [esi+8], edx

; 2127 : 		this->_Parent(_Wherenode) = _Pnode;

	mov	DWORD PTR [edx+4], esi
	pop	esi

; 2128 : 		}

	pop	ebp
	ret	4
$LN5@Rrotate:

; 2123 : 		else
; 2124 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

	mov	DWORD PTR [eax], esi

; 2125 : 
; 2126 : 		this->_Right(_Pnode) = _Wherenode;

	mov	DWORD PTR [esi+8], edx

; 2127 : 		this->_Parent(_Wherenode) = _Pnode;

	mov	DWORD PTR [edx+4], esi
	pop	esi

; 2128 : 		}

	pop	ebp
	ret	4
?_Rrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Root, COMDAT
; _this$ = ecx

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	eax, DWORD PTR [ecx]
	add	eax, 4

; 2107 : 		return (this->_Parent(this->_Myhead()));
; 2108 : 		}

	ret	0
?_Root@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Root
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 598  : 		return ((_Nodepref)_Pnode->_Right);

	mov	eax, DWORD PTR [ecx]
	add	eax, 8

; 2102 : 		return (this->_Right(this->_Myhead()));
; 2103 : 		}

	ret	0
?_Rmost@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rmost
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 2081 : 		{	// promote right node to root of subtree

	push	ebp
	mov	ebp, esp

; 598  : 		return ((_Nodepref)_Pnode->_Right);

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	esi

; 2082 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

	mov	esi, DWORD PTR [edx+8]

; 2083 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edx+8], eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [esi]

; 2084 : 
; 2085 : 		if (!this->_Isnil(this->_Left(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN2@Lrotate

; 2086 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

	mov	DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 2087 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], eax

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	eax, DWORD PTR [ecx]

; 2088 : 
; 2089 : 		if (_Wherenode == _Root())

	cmp	edx, DWORD PTR [eax+4]
	jne	SHORT $LN3@Lrotate

; 2090 : 			_Root() = _Pnode;

	mov	DWORD PTR [eax+4], esi

; 2095 : 
; 2096 : 		this->_Left(_Pnode) = _Wherenode;

	mov	DWORD PTR [esi], edx

; 2097 : 		this->_Parent(_Wherenode) = _Pnode;

	mov	DWORD PTR [edx+4], esi
	pop	esi

; 2098 : 		}

	pop	ebp
	ret	4
$LN3@Lrotate:

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	eax, DWORD PTR [edx+4]

; 2091 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN5@Lrotate

; 2092 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

	mov	DWORD PTR [eax], esi

; 2095 : 
; 2096 : 		this->_Left(_Pnode) = _Wherenode;

	mov	DWORD PTR [esi], edx

; 2097 : 		this->_Parent(_Wherenode) = _Pnode;

	mov	DWORD PTR [edx+4], esi
	pop	esi

; 2098 : 		}

	pop	ebp
	ret	4
$LN5@Lrotate:

; 2093 : 		else
; 2094 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

	mov	DWORD PTR [eax+8], esi

; 2095 : 
; 2096 : 		this->_Left(_Pnode) = _Wherenode;

	mov	DWORD PTR [esi], edx

; 2097 : 		this->_Parent(_Wherenode) = _Pnode;

	mov	DWORD PTR [edx+4], esi
	pop	esi

; 2098 : 		}

	pop	ebp
	ret	4
?_Lrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 2077 : 		return (this->_Left(this->_Myhead()));

	mov	eax, DWORD PTR [ecx]

; 2078 : 		}

	ret	0
?_Lmost@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lmost
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Compare@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBE_NABVCZString@Value@Json@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?_Compare@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBE_NABVCZString@Value@Json@@0@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Compare, COMDAT
; _this$ = ecx

; 2046 : 		{	// compare key_type to key_type, with debug checks

	push	ebp
	mov	ebp, esp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    if ( cstr_ )

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN12@Compare

; 221  :       return strcmp( cstr_, other.cstr_ ) < 0;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [eax]
$LL14@Compare:
	mov	dl, BYTE PTR [ecx]
	cmp	dl, BYTE PTR [eax]
	jne	SHORT $LN15@Compare
	test	dl, dl
	je	SHORT $LN16@Compare
	mov	dl, BYTE PTR [ecx+1]
	cmp	dl, BYTE PTR [eax+1]
	jne	SHORT $LN15@Compare
	add	ecx, 2
	add	eax, 2
	test	dl, dl
	jne	SHORT $LL14@Compare
$LN16@Compare:
	xor	eax, eax
	test	eax, eax
	sets	al
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2048 : 		}

	pop	ebp
	ret	8
$LN15@Compare:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 221  :       return strcmp( cstr_, other.cstr_ ) < 0;

	sbb	eax, eax
	or	eax, 1
	test	eax, eax
	sets	al
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2048 : 		}

	pop	ebp
	ret	8
$LN12@Compare:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 222  :    return index_ < other.index_;

	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Right$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	setl	al
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2048 : 		}

	pop	ebp
	ret	8
?_Compare@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBE_NABVCZString@Value@Json@@0@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Compare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z
_TEXT	SEGMENT
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase, COMDAT
; _this$ = ecx

; 2032 : 		{	// free entire subtree, recursively

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$1$[ebp], ecx

; 2033 : 		for (_Nodeptr _Pnode = _Rootnode;

	mov	esi, DWORD PTR __Rootnode$[ebp]
	mov	edi, esi

; 2034 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

	cmp	BYTE PTR [esi+13], 0
	jne	$LN3@Erase
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 100  :    static DefaultValueAllocator defaultAllocator;

	mov	edx, DWORD PTR __tls_index
	mov	eax, DWORD PTR fs:__tls_array
	lea	ebx, DWORD PTR [eax+edx*4]
$LL4@Erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2036 : 			_Erase(this->_Right(_Pnode));

	push	DWORD PTR [edi+8]
	call	?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase

; 2037 : 			_Pnode = this->_Left(_Pnode);

	mov	edi, DWORD PTR [edi]
	lea	ecx, DWORD PTR [esi+24]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 198  :    if ( cstr_  &&  index_ == duplicate )

	cmp	DWORD PTR [esi+16], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	je	SHORT $LN104@Erase
	cmp	DWORD PTR [esi+20], 1
	jne	SHORT $LN104@Erase

; 100  :    static DefaultValueAllocator defaultAllocator;

	mov	ecx, DWORD PTR [ebx]
	mov	eax, DWORD PTR ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA
	cmp	eax, DWORD PTR __Init_thread_epoch[ecx]
	jle	SHORT $LN108@Erase
	push	OFFSET ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA
	call	__Init_thread_header
	add	esp, 4
	cmp	DWORD PTR ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA, -1
	jne	SHORT $LN108@Erase
	push	OFFSET ??__FdefaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ@YAXXZ ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator''
	mov	DWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, OFFSET ??_7DefaultValueAllocator@Json@@6B@
	call	_atexit
	push	OFFSET ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA
	call	__Init_thread_footer
	add	esp, 8
$LN108@Erase:

; 199  :       valueAllocator()->releaseMemberName( const_cast<char *>( cstr_ ) );

	mov	ecx, DWORD PTR ?valueAllocator@?1??0Json@@YAAAPAVValueAllocator@1@XZ@4PAV21@A
	push	DWORD PTR [esi+16]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+8]
$LN104@Erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 132  : 	::operator delete(_Ptr);

	push	esi
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 200  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 132  : 	::operator delete(_Ptr);

	call	??3@YAXPAX@Z				; operator delete
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2034 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

	mov	ecx, DWORD PTR _this$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 132  : 	::operator delete(_Ptr);

	add	esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2034 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

	cmp	BYTE PTR [edi+13], 0
	mov	esi, edi
	je	$LL4@Erase
$LN3@Erase:

; 2038 : 			this->_Getal().destroy(
; 2039 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2040 : 
; 2041 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2042 : 			}
; 2043 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z$17:
	call	___std_terminate
	ret	0
__ehhandler$?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Newnode$ = 8						; size = 4
?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Destroy_if_not_nil, COMDAT
; _this$ = ecx

; 1640 : 		{	// node exists, destroy it

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 603  : 		return ((reference)_Pnode->_Myval);

	mov	esi, DWORD PTR __Newnode$[ebp]
	lea	ecx, DWORD PTR [esi+24]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 198  :    if ( cstr_  &&  index_ == duplicate )

	cmp	DWORD PTR [esi+16], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	je	SHORT $LN89@Destroy_if
	cmp	DWORD PTR [esi+20], 1
	jne	SHORT $LN89@Destroy_if

; 199  :       valueAllocator()->releaseMemberName( const_cast<char *>( cstr_ ) );

	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	DWORD PTR [esi+16]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+8]
$LN89@Destroy_if:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	40					; 00000028H
	push	1
	push	esi
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1645 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z$17:
	call	___std_terminate
	ret	0
__ehhandler$?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Destroy_if_not_nil
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?equal_range@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@@2@ABVCZString@Value@Json@@@Z
_TEXT	SEGMENT
__Ans$1 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?equal_range@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@@2@ABVCZString@Value@Json@@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::equal_range, COMDAT
; _this$ = ecx

; 1589 : 		{	// find range equivalent to _Keyval in mutable tree

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 2025 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));

	push	DWORD PTR __Keyval$[ebp]
	lea	eax, DWORD PTR __Ans$1[ebp]
	push	eax
	call	??$_Eqrange@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@@1@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Eqrange<Json::Value::CZString>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 170  : 		: first(_STD forward<_Other1>(_Val1)),

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Ans$1[ebp]
	mov	DWORD PTR [eax], ecx

; 171  : 				second(_STD forward<_Other2>(_Val2))

	mov	ecx, DWORD PTR __Ans$1[ebp+4]
	mov	DWORD PTR [eax+4], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1591 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?equal_range@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@@2@ABVCZString@Value@Json@@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::equal_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@ABVCZString@Value@Json@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@ABVCZString@Value@Json@@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 1537 : 		{	// find leftmost node not less than _Keyval in mutable tree

	push	ebp
	mov	ebp, esp

; 1538 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

	push	DWORD PTR __Keyval$[ebp]
	call	??$_Lbound@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lbound<Json::Value::CZString>

; 43   : 		: _Ptr(_Pnode)

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [ecx], eax

; 1538 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

	mov	eax, ecx

; 1539 : 		}

	pop	ebp
	ret	8
?lower_bound@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@ABVCZString@Value@Json@@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::lower_bound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@ABVCZString@Value@Json@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@ABVCZString@Value@Json@@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::find, COMDAT
; _this$ = ecx

; 1480 : 		{	// find an element in mutable sequence that matches _Keyval

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi

; 1538 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

	push	DWORD PTR __Keyval$[ebp]

; 1480 : 		{	// find an element in mutable sequence that matches _Keyval

	mov	ebx, ecx

; 1538 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

	call	??$_Lbound@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lbound<Json::Value::CZString>

; 43   : 		: _Ptr(_Pnode)

	mov	edi, DWORD PTR [ebx]
	mov	esi, eax

; 336  : 		return (this->_Ptr == _Right._Ptr);

	cmp	esi, edi

; 1482 : 		return (_Where == end()

	je	SHORT $LN3@find
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 62   : 		return (_Val.first);

	lea	eax, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1482 : 		return (_Where == end()

	mov	ecx, ebx
	push	eax
	push	DWORD PTR __Keyval$[ebp]
	call	??R?$less@VCZString@Value@Json@@@std@@QBE_NABVCZString@Value@Json@@0@Z ; std::less<Json::Value::CZString>::operator()
	test	al, al
	jne	SHORT $LN3@find
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	mov	DWORD PTR [eax], esi
	pop	esi
	pop	ebx

; 1483 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1484 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1485 : 					? end() : _Where);
; 1486 : 		}

	pop	ebp
	ret	8
$LN3@find:

; 1482 : 		return (_Where == end()

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], edi
	pop	edi
	pop	esi
	pop	ebx

; 1483 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1484 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1485 : 					? end() : _Where);
; 1486 : 		}

	pop	ebp
	ret	8
?find@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@ABVCZString@Value@Json@@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::clear, COMDAT
; _this$ = ecx

; 1467 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx

; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 		this->_Orphan_ptr(nullptr_t{});
; 1470 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1471 : 
; 1472 : 		_Erase(_Root());

	mov	eax, DWORD PTR [esi]
	push	DWORD PTR [eax+4]
	call	?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	eax, DWORD PTR [esi]

; 1473 : 		_Root() = this->_Myhead();

	mov	DWORD PTR [eax+4], eax

; 1474 : 		_Lmost() = this->_Myhead();

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [eax], eax

; 598  : 		return ((_Nodepref)_Pnode->_Right);

	mov	eax, DWORD PTR [esi]

; 1475 : 		_Rmost() = this->_Myhead();

	mov	DWORD PTR [eax+8], eax

; 1476 : 		this->_Mysize() = 0;

	mov	DWORD PTR [esi+4], 0

; 1477 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?clear@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::clear
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEIABVCZString@Value@Json@@@Z
_TEXT	SEGMENT
__Ans$1 = -12						; size = 8
_this$1$ = -4						; size = 4
$T2 = 8							; size = 1
$T3 = 8							; size = 4
__Keyval$ = 8						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEIABVCZString@Value@Json@@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase, COMDAT
; _this$ = ecx

; 1459 : 		{	// erase and count all that match _Keyval

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx

; 2025 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));

	push	DWORD PTR __Keyval$[ebp]

; 1459 : 		{	// erase and count all that match _Keyval

	mov	eax, ecx

; 2025 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));

	lea	ecx, DWORD PTR __Ans$1[ebp]
	push	ecx
	mov	ecx, eax

; 1459 : 		{	// erase and count all that match _Keyval

	mov	DWORD PTR _this$1$[ebp], eax

; 2025 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));

	call	??$_Eqrange@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@@1@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Eqrange<Json::Value::CZString>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 1126 : 	return (_Distance1(_First, _Last, _Iter_cat_t<_InIt>()));

	push	DWORD PTR $T2[ebp]
	push	DWORD PTR __Ans$1[ebp+4]
	push	DWORD PTR __Ans$1[ebp]
	call	??$_Distance1@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@@std@@YAHV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@0@0Uinput_iterator_tag@0@@Z ; std::_Distance1<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > > > >
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1462 : 		erase(_Where.first, _Where.second);

	mov	ecx, DWORD PTR _this$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 1126 : 	return (_Distance1(_First, _Last, _Iter_cat_t<_InIt>()));

	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1461 : 		size_type _Num = _STD distance(_Where.first, _Where.second);

	mov	ebx, eax

; 1462 : 		erase(_Where.first, _Where.second);

	lea	eax, DWORD PTR $T3[ebp]
	push	DWORD PTR __Ans$1[ebp+4]
	push	DWORD PTR __Ans$1[ebp]
	push	eax
	call	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase

; 1463 : 		return (_Num);

	mov	eax, ebx
	pop	ebx

; 1464 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEIABVCZString@Value@Json@@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase, COMDAT
; _this$ = ecx

; 1444 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	edi, ecx

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	edx, DWORD PTR [edi]

; 336  : 		return (this->_Ptr == _Right._Ptr);

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR [edx]

; 1445 : 		if (_First == begin() && _Last == end())

	jne	SHORT $LN299@erase

; 336  : 		return (this->_Ptr == _Right._Ptr);

	cmp	DWORD PTR __Last$[ebp], edx

; 1445 : 		if (_First == begin() && _Last == end())

	jne	SHORT $LN299@erase

; 1472 : 		_Erase(_Root());

	push	DWORD PTR [edx+4]
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	call	?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	eax, DWORD PTR [edi]

; 1473 : 		_Root() = this->_Myhead();

	mov	DWORD PTR [eax+4], eax

; 1474 : 		_Lmost() = this->_Myhead();

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [eax], eax

; 598  : 		return ((_Nodepref)_Pnode->_Right);

	mov	eax, DWORD PTR [edi]

; 1475 : 		_Rmost() = this->_Myhead();

	mov	DWORD PTR [eax+8], eax

; 1476 : 		this->_Mysize() = 0;

	mov	DWORD PTR [edi+4], 0

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	eax, DWORD PTR [edi]

; 43   : 		: _Ptr(_Pnode)

	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx

; 1455 : 			}
; 1456 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN299@erase:

; 336  : 		return (this->_Ptr == _Right._Ptr);

	cmp	eax, DWORD PTR __Last$[ebp]

; 1446 : 			{	// erase all
; 1447 : 			clear();
; 1448 : 			return (begin());
; 1449 : 			}
; 1450 : 		else
; 1451 : 			{	// partial erase, one at a time
; 1452 : 			while (_First != _Last)

	je	SHORT $LN3@erase
$LL2@erase:

; 60   : 		if (_Mytree::_Isnil(_Ptr))

	cmp	BYTE PTR [eax+13], 0

; 279  : 		_Myiter _Tmp = *this;

	mov	ecx, eax

; 60   : 		if (_Mytree::_Isnil(_Ptr))

	jne	SHORT $LN256@erase

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	edx, DWORD PTR [eax+8]

; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

	cmp	BYTE PTR [edx+13], 0
	jne	SHORT $LN301@erase

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [edx]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN252@erase
$LL267@erase:

; 616  : 			_Pnode = _Left(_Pnode);

	mov	edx, eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [edx]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL267@erase

; 65   : 		else

	jmp	SHORT $LN252@erase
$LN301@erase:

; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

	mov	edx, DWORD PTR [eax+4]
	cmp	BYTE PTR [edx+13], 0
	jne	SHORT $LN252@erase
$LL251@erase:
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN252@erase

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

	mov	eax, edx
	mov	DWORD PTR __First$[ebp], eax
	mov	edx, DWORD PTR [edx+4]
	cmp	BYTE PTR [edx+13], 0
	je	SHORT $LL251@erase
$LN252@erase:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

	mov	DWORD PTR __First$[ebp], edx
$LN256@erase:

; 1453 : 				erase(_First++);

	push	ecx
	lea	eax, DWORD PTR $T2[ebp]
	mov	ecx, edi
	push	eax
	call	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase

; 336  : 		return (this->_Ptr == _Right._Ptr);

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]

; 1446 : 			{	// erase all
; 1447 : 			clear();
; 1448 : 			return (begin());
; 1449 : 			}
; 1450 : 		else
; 1451 : 			{	// partial erase, one at a time
; 1452 : 			while (_First != _Last)

	jne	SHORT $LL2@erase
$LN3@erase:

; 43   : 		: _Ptr(_Pnode)

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [ecx], eax

; 1454 : 			return (iterator(_First._Ptr, &this->_Get_data()));

	mov	eax, ecx

; 1455 : 			}
; 1456 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z$16:
	call	___std_terminate
	ret	0
__ehhandler$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv1300 = -28						; size = 4
tv1299 = -24						; size = 4
tv1301 = -20						; size = 4
tv1295 = -20						; size = 4
tv1274 = -20						; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase, COMDAT
; _this$ = ecx

; 1259 : 		{	// erase element at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$1$[ebp], ecx

; 123  : 		return (_Ptr);

	mov	ebx, DWORD PTR __Where$[ebp]

; 273  : 		++static_cast<_Mybase&>(*this);

	lea	ecx, DWORD PTR __Where$[ebp]
	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator++

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	ecx, DWORD PTR [ebx]

; 1260 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1261 : 		if (_Where._Getcont() != &this->_Get_data()
; 1262 : 			|| this->_Isnil(_Where._Mynode()))
; 1263 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1264 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1265 : 		++_Where;	// save successor iterator for return
; 1266 : 		_Orphan_ptr(_Erasednode);
; 1267 : 
; 1268 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1269 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1270 : 		++_Where;	// save successor iterator for return
; 1271 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1272 : 
; 1273 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1274 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1275 : 		_Nodeptr _Pnode = _Erasednode;
; 1276 : 
; 1277 : 		if (this->_Isnil(this->_Left(_Pnode)))

	cmp	BYTE PTR [ecx+13], 0
	je	SHORT $LN5@erase

; 1278 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree

	mov	edi, DWORD PTR [ebx+8]

; 1279 : 		else if (this->_Isnil(this->_Right(_Pnode)))

	jmp	SHORT $LN773@erase
$LN5@erase:
	mov	eax, DWORD PTR [ebx+8]
	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LN7@erase

; 1280 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree

	mov	edi, ecx

; 1281 : 		else

	jmp	SHORT $LN773@erase
$LN7@erase:

; 123  : 		return (_Ptr);

	mov	edx, DWORD PTR __Where$[ebp]

; 1282 : 			{	// two subtrees, must lift successor node to replace erased
; 1283 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1284 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree

	mov	edi, DWORD PTR [edx+8]

; 1285 : 			}
; 1286 : 
; 1287 : 		if (_Pnode == _Erasednode)

	cmp	edx, ebx
	jne	$LN9@erase
$LN773@erase:

; 1288 : 			{	// at most one subtree, relink it
; 1289 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1290 : 			if (!this->_Isnil(_Fixnode))

	cmp	BYTE PTR [edi+13], 0
	mov	esi, DWORD PTR [ebx+4]
	jne	SHORT $LN11@erase

; 1291 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up

	mov	DWORD PTR [edi+4], esi
$LN11@erase:

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	edx, DWORD PTR _this$1$[ebp]
	mov	eax, DWORD PTR [edx]

; 1292 : 
; 1293 : 			if (_Root() == _Erasednode)

	cmp	DWORD PTR [eax+4], ebx
	jne	SHORT $LN12@erase

; 1294 : 				_Root() = _Fixnode;	// link down from root

	mov	DWORD PTR [eax+4], edi

; 1295 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)

	jmp	SHORT $LN15@erase
$LN12@erase:
	cmp	DWORD PTR [esi], ebx
	jne	SHORT $LN14@erase

; 1296 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left

	mov	DWORD PTR [esi], edi

; 1297 : 			else

	jmp	SHORT $LN15@erase
$LN14@erase:

; 1298 : 				this->_Right(_Fixnodeparent) =

	mov	DWORD PTR [esi+8], edi
$LN15@erase:

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	eax, DWORD PTR [edx]

; 1299 : 					_Fixnode;	// link down to right
; 1300 : 
; 1301 : 			if (_Lmost() == _Erasednode)

	cmp	DWORD PTR [eax], ebx
	jne	SHORT $LN16@erase

; 1302 : 				_Lmost() = this->_Isnil(_Fixnode)

	cmp	BYTE PTR [edi+13], 0
	je	SHORT $LN42@erase
	mov	ecx, esi
	jmp	SHORT $LN43@erase
$LN42@erase:

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [edi]

; 698  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));

	mov	ecx, edi

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN166@erase
	npad	2
$LL165@erase:

; 616  : 			_Pnode = _Left(_Pnode);

	mov	ecx, eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL165@erase
$LN166@erase:
	mov	eax, DWORD PTR [edx]
$LN43@erase:

; 1302 : 				_Lmost() = this->_Isnil(_Fixnode)

	mov	DWORD PTR [eax], ecx
$LN16@erase:

; 598  : 		return ((_Nodepref)_Pnode->_Right);

	mov	eax, DWORD PTR [edx]

; 1303 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1304 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1305 : 
; 1306 : 			if (_Rmost() == _Erasednode)

	cmp	DWORD PTR [eax+8], ebx
	jne	$LN373@erase

; 1307 : 				_Rmost() = this->_Isnil(_Fixnode)

	cmp	BYTE PTR [edi+13], 0
	je	SHORT $LN44@erase
	mov	ecx, esi
	mov	DWORD PTR [eax+8], ecx

; 1308 : 					? _Fixnodeparent	// largest is parent of erased node
; 1309 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1310 : 			}
; 1311 : 		else

	jmp	$LN373@erase
$LN44@erase:

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [edi+8]

; 693  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));

	mov	ecx, edi

; 608  : 		while (!_Isnil(_Right(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN218@erase
$LL217@erase:

; 609  : 			_Pnode = _Right(_Pnode);

	mov	ecx, eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx+8]

; 608  : 		while (!_Isnil(_Right(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL217@erase
$LN218@erase:
	mov	eax, DWORD PTR [edx]

; 1307 : 				_Rmost() = this->_Isnil(_Fixnode)

	mov	DWORD PTR [eax+8], ecx

; 1308 : 					? _Fixnodeparent	// largest is parent of erased node
; 1309 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1310 : 			}
; 1311 : 		else

	jmp	SHORT $LN373@erase
$LN9@erase:

; 1312 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1313 : 			this->_Parent(this->_Left(_Erasednode)) =

	mov	DWORD PTR [ecx+4], edx

; 1314 : 				_Pnode;	// link left up
; 1315 : 			this->_Left(_Pnode) =

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [edx], eax

; 1316 : 				this->_Left(_Erasednode);	// link successor down
; 1317 : 
; 1318 : 			if (_Pnode == this->_Right(_Erasednode))

	cmp	edx, DWORD PTR [ebx+8]
	jne	SHORT $LN18@erase

; 1319 : 				_Fixnodeparent = _Pnode;	// successor is next to erased

	mov	esi, edx

; 1320 : 			else

	jmp	SHORT $LN19@erase
$LN18@erase:

; 1321 : 				{	// successor further down, link in place of erased
; 1322 : 				_Fixnodeparent =
; 1323 : 					this->_Parent(_Pnode);	// parent is successor's
; 1324 : 				if (!this->_Isnil(_Fixnode))

	cmp	BYTE PTR [edi+13], 0
	mov	esi, DWORD PTR [edx+4]
	jne	SHORT $LN20@erase

; 1325 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

	mov	DWORD PTR [edi+4], esi
$LN20@erase:

; 1326 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down

	mov	DWORD PTR [esi], edi

; 1327 : 				this->_Right(_Pnode) =

	mov	eax, DWORD PTR [ebx+8]
	mov	DWORD PTR [edx+8], eax

; 1328 : 					this->_Right(_Erasednode);	// link next down
; 1329 : 				this->_Parent(this->_Right(_Erasednode)) =

	mov	eax, DWORD PTR [ebx+8]
	mov	DWORD PTR [eax+4], edx
$LN19@erase:

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	ecx, DWORD PTR _this$1$[ebp]
	mov	eax, DWORD PTR [ecx]

; 1330 : 					_Pnode;	// right up
; 1331 : 				}
; 1332 : 
; 1333 : 			if (_Root() == _Erasednode)

	cmp	DWORD PTR [eax+4], ebx
	jne	SHORT $LN21@erase

; 1334 : 				_Root() = _Pnode;	// link down from root

	mov	DWORD PTR [eax+4], edx

; 1335 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

	jmp	SHORT $LN24@erase
$LN21@erase:

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	eax, DWORD PTR [ebx+4]

; 1335 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

	cmp	DWORD PTR [eax], ebx
	jne	SHORT $LN23@erase

; 1336 : 				this->_Left(this->_Parent(_Erasednode)) =

	mov	DWORD PTR [eax], edx

; 1337 : 					_Pnode;	// link down to left
; 1338 : 			else

	jmp	SHORT $LN24@erase
$LN23@erase:

; 1339 : 				this->_Right(this->_Parent(_Erasednode)) =

	mov	DWORD PTR [eax+8], edx
$LN24@erase:

; 1340 : 					_Pnode;	// link down to right
; 1341 : 
; 1342 : 			this->_Parent(_Pnode) =

	mov	eax, DWORD PTR [ebx+4]
	mov	DWORD PTR [edx+4], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 49   : 	_Ty _Tmp = _STD move(_Left);

	mov	cl, BYTE PTR [edx+12]

; 50   : 	_Left = _STD move(_Right);

	mov	al, BYTE PTR [ebx+12]
	mov	BYTE PTR [edx+12], al
	mov	edx, DWORD PTR _this$1$[ebp]

; 51   : 	_Right = _STD move(_Tmp);

	mov	BYTE PTR [ebx+12], cl
$LN373@erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1348 : 		if (this->_Color(_Erasednode) == this->_Black)

	cmp	BYTE PTR [ebx+12], 1
	jne	$LN25@erase

; 1349 : 			{	// erasing black link, must recolor/rebalance tree
; 1350 : 			for (; _Fixnode != _Root()
; 1351 : 				&& this->_Color(_Fixnode) == this->_Black;

	mov	eax, DWORD PTR [edx]
	cmp	edi, DWORD PTR [eax+4]
	je	$LN3@erase
	npad	9
$LL4@erase:
	cmp	BYTE PTR [edi+12], 1
	mov	DWORD PTR tv1299[ebp], esi
	mov	DWORD PTR tv1301[ebp], esi
	mov	DWORD PTR tv1300[ebp], esi
	jne	$LN3@erase

; 1353 : 				if (_Fixnode == this->_Left(_Fixnodeparent))

	mov	ecx, DWORD PTR [esi]
	cmp	edi, ecx
	jne	SHORT $LN26@erase

; 1354 : 					{	// fixup left subtree
; 1355 : 					_Pnode = this->_Right(_Fixnodeparent);

	mov	ecx, DWORD PTR [esi+8]

; 1356 : 					if (this->_Color(_Pnode) == this->_Red)

	cmp	BYTE PTR [ecx+12], 0
	jne	SHORT $LN28@erase

; 1357 : 						{	// rotate red up from right subtree
; 1358 : 						this->_Color(_Pnode) = this->_Black;

	mov	BYTE PTR [ecx+12], 1

; 1359 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1360 : 						_Lrotate(_Fixnodeparent);

	mov	ecx, edx
	push	esi
	mov	BYTE PTR [esi+12], 0
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lrotate

; 1361 : 						_Pnode = this->_Right(_Fixnodeparent);

	mov	ecx, DWORD PTR [esi+8]
	mov	edx, DWORD PTR _this$1$[ebp]
$LN28@erase:

; 1362 : 						}
; 1363 : 
; 1364 : 					if (this->_Isnil(_Pnode))

	cmp	BYTE PTR [ecx+13], 0
	jne	$LN2@erase

; 1365 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1366 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1367 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)

	mov	eax, DWORD PTR [ecx]
	cmp	BYTE PTR [eax+12], 1
	jne	SHORT $LN31@erase
	mov	eax, DWORD PTR [ecx+8]
	cmp	BYTE PTR [eax+12], 1
	je	SHORT $LN777@erase
$LN31@erase:

; 1368 : 						{	// redden right subtree with black children
; 1369 : 						this->_Color(_Pnode) = this->_Red;
; 1370 : 						_Fixnode = _Fixnodeparent;
; 1371 : 						}
; 1372 : 					else
; 1373 : 						{	// must rearrange right subtree
; 1374 : 						if (this->_Color(this->_Right(_Pnode))
; 1375 : 							== this->_Black)

	mov	eax, DWORD PTR [ecx+8]
	cmp	BYTE PTR [eax+12], 1
	jne	SHORT $LN33@erase

; 1376 : 							{	// rotate red up from left sub-subtree
; 1377 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;

	mov	eax, DWORD PTR [ecx]

; 1378 : 							this->_Color(_Pnode) = this->_Red;
; 1379 : 							_Rrotate(_Pnode);

	push	ecx
	mov	BYTE PTR [eax+12], 1
	mov	BYTE PTR [ecx+12], 0
	mov	ecx, edx
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rrotate

; 1380 : 							_Pnode = this->_Right(_Fixnodeparent);

	mov	ecx, DWORD PTR [esi+8]
$LN33@erase:

; 1381 : 							}
; 1382 : 
; 1383 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

	mov	al, BYTE PTR [esi+12]
	mov	BYTE PTR [ecx+12], al

; 1384 : 						this->_Color(_Fixnodeparent) = this->_Black;

	mov	BYTE PTR [esi+12], 1

; 1385 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;

	mov	eax, DWORD PTR [ecx+8]

; 1386 : 						_Lrotate(_Fixnodeparent);

	mov	ecx, DWORD PTR _this$1$[ebp]
	push	esi
	mov	BYTE PTR [eax+12], 1
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lrotate

; 1387 : 						break;	// tree now recolored/rebalanced

	jmp	SHORT $LN3@erase
$LN26@erase:

; 1388 : 						}
; 1389 : 					}
; 1390 : 				else
; 1391 : 					{	// fixup right subtree
; 1392 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1393 : 					if (this->_Color(_Pnode) == this->_Red)

	cmp	BYTE PTR [ecx+12], 0
	jne	SHORT $LN34@erase

; 1394 : 						{	// rotate red up from left subtree
; 1395 : 						this->_Color(_Pnode) = this->_Black;

	mov	BYTE PTR [ecx+12], 1

; 1396 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1397 : 						_Rrotate(_Fixnodeparent);

	mov	ecx, edx
	push	esi
	mov	BYTE PTR [esi+12], 0
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rrotate

; 1398 : 						_Pnode = this->_Left(_Fixnodeparent);

	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR _this$1$[ebp]
$LN34@erase:

; 1399 : 						}
; 1400 : 
; 1401 : 					if (this->_Isnil(_Pnode))

	cmp	BYTE PTR [ecx+13], 0
	jne	SHORT $LN2@erase

; 1402 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1403 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1404 : 						this->_Black
; 1405 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)

	mov	eax, DWORD PTR [ecx+8]
	cmp	BYTE PTR [eax+12], 1
	jne	$LN37@erase
	mov	eax, DWORD PTR [ecx]
	cmp	BYTE PTR [eax+12], 1
	jne	$LN37@erase
$LN777@erase:

; 1406 : 						{	// redden left subtree with black children
; 1407 : 						this->_Color(_Pnode) = this->_Red;

	mov	BYTE PTR [ecx+12], 0
$LN2@erase:

; 1349 : 			{	// erasing black link, must recolor/rebalance tree
; 1350 : 			for (; _Fixnode != _Root()
; 1351 : 				&& this->_Color(_Fixnode) == this->_Black;

	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv1299[ebp]

; 1352 : 				_Fixnodeparent = this->_Parent(_Fixnode))

	mov	esi, DWORD PTR [esi+4]
	mov	edi, DWORD PTR tv1301[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	$LL4@erase
	mov	edi, DWORD PTR tv1300[ebp]
$LN3@erase:

; 1424 : 						break;	// tree now recolored/rebalanced
; 1425 : 						}
; 1426 : 					}
; 1427 : 
; 1428 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black

	mov	BYTE PTR [edi+12], 1
$LN25@erase:
	lea	ecx, DWORD PTR [ebx+24]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 198  :    if ( cstr_  &&  index_ == duplicate )

	cmp	DWORD PTR [ebx+16], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	je	SHORT $LN684@erase
	cmp	DWORD PTR [ebx+20], 1
	jne	SHORT $LN684@erase

; 100  :    static DefaultValueAllocator defaultAllocator;

	mov	eax, DWORD PTR fs:__tls_array
	mov	ecx, DWORD PTR __tls_index
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA
	cmp	eax, DWORD PTR __Init_thread_epoch[ecx]
	jle	SHORT $LN688@erase
	push	OFFSET ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA
	call	__Init_thread_header
	add	esp, 4
	cmp	DWORD PTR ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA, -1
	jne	SHORT $LN688@erase
	push	OFFSET ??__FdefaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ@YAXXZ ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator''
	mov	DWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, OFFSET ??_7DefaultValueAllocator@Json@@6B@
	call	_atexit
	push	OFFSET ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA
	call	__Init_thread_footer
	add	esp, 8
$LN688@erase:

; 199  :       valueAllocator()->releaseMemberName( const_cast<char *>( cstr_ ) );

	mov	ecx, DWORD PTR ?valueAllocator@?1??0Json@@YAAAPAVValueAllocator@1@XZ@4PAV21@A
	push	DWORD PTR [ebx+16]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+8]
$LN684@erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 132  : 	::operator delete(_Ptr);

	push	ebx
	call	??3@YAXPAX@Z				; operator delete
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1436 : 		if (0 < this->_Mysize())

	mov	ecx, DWORD PTR _this$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 132  : 	::operator delete(_Ptr);

	add	esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1436 : 		if (0 < this->_Mysize())

	mov	eax, DWORD PTR [ecx+4]
	test	eax, eax
	je	SHORT $LN775@erase

; 1437 : 			--this->_Mysize();

	dec	eax
	mov	DWORD PTR [ecx+4], eax
$LN775@erase:

; 43   : 		: _Ptr(_Pnode)

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR [eax], ecx

; 1438 : 
; 1439 : 		return (iterator(_Where._Ptr,
; 1440 : 			&this->_Get_data()));	// return successor iterator
; 1441 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN37@erase:

; 1408 : 						_Fixnode = _Fixnodeparent;
; 1409 : 						}
; 1410 : 					else
; 1411 : 						{	// must rearrange left subtree
; 1412 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)

	mov	eax, DWORD PTR [ecx]
	cmp	BYTE PTR [eax+12], 1
	jne	SHORT $LN39@erase

; 1413 : 							{	// rotate red up from right sub-subtree
; 1414 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;

	mov	eax, DWORD PTR [ecx+8]

; 1415 : 							this->_Color(_Pnode) = this->_Red;
; 1416 : 							_Lrotate(_Pnode);

	push	ecx
	mov	BYTE PTR [eax+12], 1
	mov	BYTE PTR [ecx+12], 0
	mov	ecx, edx
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lrotate

; 1417 : 							_Pnode = this->_Left(_Fixnodeparent);

	mov	ecx, DWORD PTR [esi]
$LN39@erase:

; 1418 : 							}
; 1419 : 
; 1420 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

	mov	al, BYTE PTR [esi+12]
	mov	BYTE PTR [ecx+12], al

; 1421 : 						this->_Color(_Fixnodeparent) = this->_Black;

	mov	BYTE PTR [esi+12], 1

; 1422 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;

	mov	eax, DWORD PTR [ecx]

; 1423 : 						_Rrotate(_Fixnodeparent);

	mov	ecx, DWORD PTR _this$1$[ebp]
	push	esi
	mov	BYTE PTR [eax+12], 1
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Rrotate
	jmp	$LN3@erase
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z$57:
	call	___std_terminate
	ret	0
__ehhandler$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?key_comp@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE?AU?$less@VCZString@Value@Json@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?key_comp@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE?AU?$less@VCZString@Value@Json@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::key_comp, COMDAT
; _this$ = ecx

; 1191 : 		{	// return object for comparing keys

	push	ebp
	mov	ebp, esp

; 1192 : 		return (this->_Getcomp());

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1193 : 		}

	pop	ebp
	ret	4
?key_comp@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE?AU?$less@VCZString@Value@Json@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::key_comp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?empty@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE_NXZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::empty, COMDAT
; _this$ = ecx

; 1180 : 		{	// return true only if sequence is empty

	cmp	DWORD PTR [ecx+4], 0
	sete	al

; 1181 : 		return (size() == 0);
; 1182 : 		}

	ret	0
?empty@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE_NXZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::max_size, COMDAT
; _this$ = ecx

; 1176 : 		return (this->_Getal().max_size());

	mov	eax, 107374182				; 06666666H

; 1177 : 		}

	ret	0
?max_size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::size, COMDAT
; _this$ = ecx

; 1171 : 		return (this->_Mysize());

	mov	eax, DWORD PTR [ecx+4]

; 1172 : 		}

	ret	0
?size@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::end, COMDAT
; _this$ = ecx

; 1125 : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp

; 43   : 		: _Ptr(_Pnode)

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 1126 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1127 : 		}

	pop	ebp
	ret	4
?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::end, COMDAT
; _this$ = ecx

; 1120 : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp

; 43   : 		: _Ptr(_Pnode)

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 1121 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1122 : 		}

	pop	ebp
	ret	4
?end@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::begin, COMDAT
; _this$ = ecx

; 1115 : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	eax, DWORD PTR [ecx]

; 43   : 		: _Ptr(_Pnode)

	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx

; 1116 : 		return (const_iterator(_Lmost(), &this->_Get_data()));
; 1117 : 		}

	pop	ebp
	ret	4
?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::begin, COMDAT
; _this$ = ecx

; 1110 : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	eax, DWORD PTR [ecx]

; 43   : 		: _Ptr(_Pnode)

	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx

; 1111 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1112 : 		}

	pop	ebp
	ret	4
?begin@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >, COMDAT
; _this$ = ecx

; 1090 : 		{	// destroy tree

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx

; 43   : 		: _Ptr(_Pnode)

	mov	eax, DWORD PTR [esi]

; 2168 : 		erase(begin(), end());

	push	eax
	push	DWORD PTR [eax]
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	40					; 00000028H
	push	1
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1092 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >, COMDAT
; _this$ = ecx

; 1004 : 		{	// construct empty tree from comparator

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi

; 567  : 		: _Myhead(),

	mov	DWORD PTR [esi], 0

; 568  : 		_Mysize(0)

	mov	DWORD PTR [esi+4], 0

; 721  : 		_Myhead() = _Buyheadnode();

	call	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buyheadnode
	mov	DWORD PTR [esi], eax

; 1005 : 		}

	mov	eax, esi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 320  : 		return (_Myval2);

	mov	eax, ecx

; 321  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 315  : 		return (_Myval2);

	mov	eax, ecx

; 316  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@VCZString@Value@Json@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@VCZString@Value@Json@@@2@XZ PROC ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 300  : 		return (*this);

	mov	eax, ecx

; 301  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@VCZString@Value@Json@@@2@XZ ENDP ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@VCZString@Value@Json@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@VCZString@Value@Json@@@2@XZ PROC ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 295  : 		return (*this);

	mov	eax, ecx

; 296  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$less@VCZString@Value@Json@@@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@VCZString@Value@Json@@@2@XZ ENDP ; std::_Compressed_pair<std::less<Json::Value::CZString>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 320  : 		return (_Myval2);

	mov	eax, ecx

; 321  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 315  : 		return (_Myval2);

	mov	eax, ecx

; 316  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 300  : 		return (*this);

	mov	eax, ecx

; 301  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 295  : 		return (*this);

	mov	eax, ecx

; 296  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Min, COMDAT

; 614  : 		{	// return leftmost node in subtree at _Pnode

	push	ebp
	mov	ebp, esp

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [ecx]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN15@Min
	npad	2
$LL2@Min:

; 616  : 			_Pnode = _Left(_Pnode);

	mov	ecx, eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL2@Min
$LN15@Min:

; 617  : 		return (_Pnode);

	mov	eax, ecx

; 618  : 		}

	pop	ebp
	ret	0
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Max, COMDAT

; 607  : 		{	// return rightmost node in subtree at _Pnode

	push	ebp
	mov	ebp, esp

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [ecx+8]

; 608  : 		while (!_Isnil(_Right(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN15@Max
	npad	1
$LL2@Max:

; 609  : 			_Pnode = _Right(_Pnode);

	mov	ecx, eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx+8]

; 608  : 		while (!_Isnil(_Right(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL2@Max
$LN15@Max:

; 610  : 		return (_Pnode);

	mov	eax, ecx

; 611  : 		}

	pop	ebp
	ret	0
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAAAU?$pair@$$CBVCZString@Value@Json@@V23@@2@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAAAU?$pair@$$CBVCZString@Value@Json@@V23@@2@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Myval, COMDAT

; 602  : 		{	// return reference to value in node

	push	ebp
	mov	ebp, esp

; 603  : 		return ((reference)_Pnode->_Myval);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 16					; 00000010H

; 604  : 		}

	pop	ebp
	ret	0
?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAAAU?$pair@$$CBVCZString@Value@Json@@V23@@2@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Right, COMDAT

; 597  : 		{	// return reference to right pointer in node

	push	ebp
	mov	ebp, esp

; 598  : 		return ((_Nodepref)_Pnode->_Right);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 8

; 599  : 		}

	pop	ebp
	ret	0
?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Right
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Parent, COMDAT

; 592  : 		{	// return reference to parent pointer in node

	push	ebp
	mov	ebp, esp

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 4

; 594  : 		}

	pop	ebp
	ret	0
?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Parent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Left, COMDAT

; 587  : 		{	// return reference to left pointer in node

	push	ebp
	mov	ebp, esp

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	eax, DWORD PTR __Pnode$[ebp]

; 589  : 		}

	pop	ebp
	ret	0
?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Left
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Isnil, COMDAT

; 582  : 		{	// return reference to nil flag in node

	push	ebp
	mov	ebp, esp

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 13					; 0000000dH

; 584  : 		}

	pop	ebp
	ret	0
?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Isnil
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Color, COMDAT

; 577  : 		{	// return reference to color in node

	push	ebp
	mov	ebp, esp

; 578  : 		return ((char&)_Pnode->_Color);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 12					; 0000000cH

; 579  : 		}

	pop	ebp
	ret	0
?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Color
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >, COMDAT
; _this$ = ecx

; 567  : 		: _Myhead(),

	mov	DWORD PTR [ecx], 0

; 570  : 		}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	ret	0
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??R?$less@VCZString@Value@Json@@@std@@QBE_NABVCZString@Value@Json@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@VCZString@Value@Json@@@std@@QBE_NABVCZString@Value@Json@@0@Z PROC ; std::less<Json::Value::CZString>::operator(), COMDAT
; _this$ = ecx

; 238  : 		{	// apply operator< to operands

	push	ebp
	mov	ebp, esp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    if ( cstr_ )

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN4@operator

; 221  :       return strcmp( cstr_, other.cstr_ ) < 0;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [eax]
$LL6@operator:
	mov	dl, BYTE PTR [ecx]
	cmp	dl, BYTE PTR [eax]
	jne	SHORT $LN7@operator
	test	dl, dl
	je	SHORT $LN8@operator
	mov	dl, BYTE PTR [ecx+1]
	cmp	dl, BYTE PTR [eax+1]
	jne	SHORT $LN7@operator
	add	ecx, 2
	add	eax, 2
	test	dl, dl
	jne	SHORT $LL6@operator
$LN8@operator:
	xor	eax, eax
	test	eax, eax
	sets	al
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		}

	pop	ebp
	ret	8
$LN7@operator:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 221  :       return strcmp( cstr_, other.cstr_ ) < 0;

	sbb	eax, eax
	or	eax, 1
	test	eax, eax
	sets	al
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		}

	pop	ebp
	ret	8
$LN4@operator:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 222  :    return index_ < other.index_;

	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Right$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	setl	al
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		}

	pop	ebp
	ret	8
??R?$less@VCZString@Value@Json@@@std@@QBE_NABVCZString@Value@Json@@0@Z ENDP ; std::less<Json::Value::CZString>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEABIXZ
_TEXT	SEGMENT
?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEABIXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Mysize, COMDAT
; _this$ = ecx

; 945  : 		return (_Get_data()._Mysize);

	lea	eax, DWORD PTR [ecx+4]

; 946  : 		}

	ret	0
?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEABIXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEAAIXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Mysize, COMDAT
; _this$ = ecx

; 940  : 		return (_Get_data()._Mysize);

	lea	eax, DWORD PTR [ecx+4]

; 941  : 		}

	ret	0
?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEAAIXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEABQAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEABQAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Myhead, COMDAT
; _this$ = ecx

; 935  : 		return (_Get_data()._Myhead);

	mov	eax, ecx

; 936  : 		}

	ret	0
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEABQAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Myhead
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Myhead, COMDAT
; _this$ = ecx

; 930  : 		return (_Get_data()._Myhead);

	mov	eax, ecx

; 931  : 		}

	ret	0
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Myhead
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Get_data, COMDAT
; _this$ = ecx

; 925  : 		return (_Mypair._Get_second()._Get_second());

	mov	eax, ecx

; 926  : 		}

	ret	0
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Get_data, COMDAT
; _this$ = ecx

; 920  : 		return (_Mypair._Get_second()._Get_second());

	mov	eax, ecx

; 921  : 		}

	ret	0
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 915  : 		return (_Mypair._Get_second()._Get_first());

	mov	eax, ecx

; 916  : 		}

	ret	0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 910  : 		return (_Mypair._Get_second()._Get_first());

	mov	eax, ecx

; 911  : 		}

	ret	0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEABU?$less@VCZString@Value@Json@@@2@XZ
_TEXT	SEGMENT
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEABU?$less@VCZString@Value@Json@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 905  : 		return (_Mypair._Get_first());

	mov	eax, ecx

; 906  : 		}

	ret	0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QBEABU?$less@VCZString@Value@Json@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEAAU?$less@VCZString@Value@Json@@@2@XZ
_TEXT	SEGMENT
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEAAU?$less@VCZString@Value@Json@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 900  : 		return (_Mypair._Get_first());

	mov	eax, ecx

; 901  : 		}

	ret	0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEAAU?$less@VCZString@Value@Json@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Freenode0, COMDAT
; _this$ = ecx

; 868  : 		{	// free non-value node using current allocator

	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	40					; 00000028H
	push	1
	push	DWORD PTR __Pnode$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 876  : 		}

	pop	ebp
	ret	4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Freenode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode0, COMDAT
; _this$ = ecx

; 849  : 		{	// allocate a non-value node

	push	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 83   : 		_Ptr = ::operator new(_User_size);

	push	40					; 00000028H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 849  : 		{	// allocate a non-value node

	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 83   : 		_Ptr = ::operator new(_User_size);

	call	??2@YAPAXI@Z				; operator new
	mov	edx, eax
	add	esp, 4

; 84   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	edx, edx
	jne	SHORT $LN187@Buynode0
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN190@Buynode0:
$LN187@Buynode0:

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	lea	ecx, DWORD PTR [edx+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR [edx], eax
	test	ecx, ecx
	je	SHORT $LN120@Buynode0
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ecx], eax
$LN120@Buynode0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 598  : 		return ((_Nodepref)_Pnode->_Right);

	lea	ecx, DWORD PTR [edx+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	ecx, ecx
	je	SHORT $LN167@Buynode0
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ecx], eax
$LN167@Buynode0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 864  : 		return (_Pnode);

	mov	eax, edx
	pop	esi

; 865  : 		}

	ret	0
$LN189@Buynode0:
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Freeheadnode, COMDAT
; _this$ = ecx

; 838  : 		{	// free head node using current allocator

	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	40					; 00000028H
	push	1
	push	DWORD PTR __Pnode$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 846  : 		}

	pop	ebp
	ret	4
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buyheadnode, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 83   : 		_Ptr = ::operator new(_User_size);

	push	40					; 00000028H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 84   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	eax, eax
	jne	SHORT $LN159@Buyheadnod
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN159@Buyheadnod:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	lea	ecx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR [eax], eax
	test	ecx, ecx
	je	SHORT $LN96@Buyheadnod
	mov	DWORD PTR [ecx], eax
$LN96@Buyheadnod:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 598  : 		return ((_Nodepref)_Pnode->_Right);

	lea	ecx, DWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	ecx, ecx
	je	SHORT $LN131@Buyheadnod
	mov	DWORD PTR [ecx], eax
$LN131@Buyheadnod:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 832  : 		_Color(_Pnode) = _Black;

	mov	WORD PTR [eax+12], 257			; 00000101H

; 833  : 		_Isnil(_Pnode) = true;
; 834  : 		return (_Pnode);
; 835  : 		}

	ret	0
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buyheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??1?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	40					; 00000028H
	push	1
	push	DWORD PTR [ecx]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 727  : 		}

	ret	0
??1?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Construct, COMDAT
; _this$ = ecx

; 720  : 		{	// construct head node

	push	esi
	mov	esi, ecx

; 721  : 		_Myhead() = _Buyheadnode();

	call	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buyheadnode
	mov	DWORD PTR [esi], eax
	pop	esi

; 722  : 		}

	ret	0
?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Construct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
??0?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >, COMDAT
; _this$ = ecx

; 704  : 		{	// construct from comparator

	push	esi
	mov	esi, ecx

; 567  : 		: _Myhead(),

	mov	DWORD PTR [esi], 0

; 568  : 		_Mysize(0)

	mov	DWORD PTR [esi+4], 0

; 721  : 		_Myhead() = _Buyheadnode();

	call	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buyheadnode
	mov	DWORD PTR [esi], eax

; 705  : 		_Construct();
; 706  : 		}

	mov	eax, esi
	pop	esi
	ret	4
??0?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABU?$less@VCZString@Value@Json@@@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Min@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Min, COMDAT

; 697  : 		{	// return leftmost node in subtree at _Pnode

	push	ebp
	mov	ebp, esp

; 698  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));

	mov	ecx, DWORD PTR __Pnode$[ebp]

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN17@Min
	npad	2
$LL4@Min:

; 616  : 			_Pnode = _Left(_Pnode);

	mov	ecx, eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL4@Min
$LN17@Min:

; 698  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));

	mov	eax, ecx

; 699  : 		}

	pop	ebp
	ret	0
?_Min@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Max@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Max, COMDAT

; 692  : 		{	// return rightmost node in subtree at _Pnode

	push	ebp
	mov	ebp, esp

; 693  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));

	mov	ecx, DWORD PTR __Pnode$[ebp]

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx+8]

; 608  : 		while (!_Isnil(_Right(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN17@Max
	npad	1
$LL4@Max:

; 609  : 			_Pnode = _Right(_Pnode);

	mov	ecx, eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [ecx+8]

; 608  : 		while (!_Isnil(_Right(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL4@Max
$LN17@Max:

; 693  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));

	mov	eax, ecx

; 694  : 		}

	pop	ebp
	ret	0
?_Max@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAU?$pair@$$CBVCZString@Value@Json@@V23@@2@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAU?$pair@$$CBVCZString@Value@Json@@V23@@2@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Myval, COMDAT

; 687  : 		{	// return reference to value in node

	push	ebp
	mov	ebp, esp

; 603  : 		return ((reference)_Pnode->_Myval);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 16					; 00000010H

; 688  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 689  : 		}

	pop	ebp
	ret	0
?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAU?$pair@$$CBVCZString@Value@Json@@V23@@2@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Right, COMDAT

; 682  : 		{	// return reference to right pointer in node

	push	ebp
	mov	ebp, esp

; 598  : 		return ((_Nodepref)_Pnode->_Right);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 8

; 683  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 684  : 		}

	pop	ebp
	ret	0
?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Right
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Parent, COMDAT

; 677  : 		{	// return reference to parent pointer in node

	push	ebp
	mov	ebp, esp

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 4

; 678  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 679  : 		}

	pop	ebp
	ret	0
?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Parent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Left, COMDAT

; 672  : 		{	// return reference to left pointer in node

	push	ebp
	mov	ebp, esp

; 673  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));

	mov	eax, DWORD PTR __Pnode$[ebp]

; 674  : 		}

	pop	ebp
	ret	0
?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Left
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Isnil, COMDAT

; 667  : 		{	// return reference to nil flag in node

	push	ebp
	mov	ebp, esp

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 13					; 0000000dH

; 668  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 669  : 		}

	pop	ebp
	ret	0
?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Isnil
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Color, COMDAT

; 662  : 		{	// return reference to color in node

	push	ebp
	mov	ebp, esp

; 578  : 		return ((char&)_Pnode->_Color);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 12					; 0000000cH

; 663  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 664  : 		}

	pop	ebp
	ret	0
?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Color
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::max_size, COMDAT
; _this$ = ecx

; 1008 : 		return (_Mytraits::max_size(*this));

	mov	eax, 107374182				; 06666666H

; 1009 : 		}

	ret	4
?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::deallocate, COMDAT
; _this$ = ecx

; 986  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	40					; 00000028H
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH

; 987  : 		_Mybase::deallocate(_Ptr, _Count);
; 988  : 		}

	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::allocate, COMDAT
; _this$ = ecx

; 975  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp

; 977  : 		}

	pop	ebp

; 976  : 		return (_Mybase::allocate(_Count));

	jmp	?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::allocate
?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAE@$$QAU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAE@$$QAU01@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >, COMDAT
; _this$ = ecx

; 947  : 		}

	mov	eax, ecx
	ret	4
??0?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAE@$$QAU01@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >, COMDAT
; _this$ = ecx

; 937  : 		}

	mov	eax, ecx
	ret	0
??0?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QBE?AU12@U_Nil@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 1
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QBE?AU12@U_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::select_on_container_copy_construction, COMDAT
; _this$ = ecx

; 912  : 		{	// get allocator to use

	push	ebp
	mov	ebp, esp

; 913  : 		return (_Mytraits::select_on_container_copy_construction(*this));

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 914  : 		}

	pop	ebp
	ret	8
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@QBE?AU12@U_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SA?AV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SA?AV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@2@ABV32@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::select_on_container_copy_construction, COMDAT

; 874  : 		{	// get allocator to use

	push	ebp
	mov	ebp, esp

; 875  : 		return (_Al);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 876  : 		}

	pop	ebp
	ret	0
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SA?AV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@2@ABV32@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@2@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::max_size, COMDAT

; 869  : 		return (_Al.max_size());

	mov	eax, 107374182				; 06666666H

; 870  : 		}

	ret	0
?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@2@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QBEIXZ PROC ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::max_size, COMDAT
; _this$ = ecx

; 749  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 107374182				; 06666666H

; 750  : 		}

	ret	0
?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QBEIXZ ENDP ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::allocate, COMDAT
; _this$ = ecx

; 724  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp

; 51   : 	if (_Count == 0)

	mov	eax, DWORD PTR __Count$[ebp]
	test	eax, eax
	jne	SHORT $LN4@allocate
$LN12@allocate:

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 726  : 		}

	pop	ebp
	ret	4
$LN4@allocate:

; 55   : 	if ((size_t)(-1) / _Sz < _Count)

	cmp	eax, 107374182				; 06666666H
	jbe	SHORT $LN5@allocate

; 56   : 		_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN15@allocate:
$LN5@allocate:

; 57   : 	const size_t _User_size = _Count * _Sz;

	lea	eax, DWORD PTR [eax+eax*4]
	shl	eax, 3

; 58   : 
; 59   :  #if defined(_M_IX86) || defined(_M_X64)
; 60   : 	if (_Try_aligned_allocation
; 61   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN6@allocate

; 62   : 		{	// allocate large block
; 63   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 64   : 			"Big allocations should at least match vector register size");
; 65   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

	lea	ecx, DWORD PTR [eax+35]

; 66   : 		if (_Block_size <= _User_size)

	cmp	ecx, eax
	ja	SHORT $LN8@allocate

; 67   : 			_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN16@allocate:
$LN8@allocate:

; 68   : 		const uintptr_t _Ptr_container =
; 69   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

	push	ecx
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4

; 70   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

	test	ecx, ecx
	jne	SHORT $LN9@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN17@allocate:
$LN9@allocate:

; 71   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

	lea	eax, DWORD PTR [ecx+35]
	and	eax, -32				; ffffffe0H

; 72   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 73   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

	mov	DWORD PTR [eax-4], ecx

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 726  : 		}

	pop	ebp
	ret	4
$LN6@allocate:

; 83   : 		_Ptr = ::operator new(_User_size);

	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 84   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	eax, eax
	jne	SHORT $LN12@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@allocate:
$LN14@allocate:
	int	3
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::deallocate, COMDAT
; _this$ = ecx

; 719  : 		{	// deallocate object at _Ptr

	push	ebp
	mov	ebp, esp

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	40					; 00000028H
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH

; 721  : 		}

	pop	ebp
	ret	8
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAE@ABV01@@Z PROC ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >, COMDAT
; _this$ = ecx

; 704  : 		{	// construct by copying (do nothing)
; 705  : 		}

	mov	eax, ecx
	ret	4
??0?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >, COMDAT
; _this$ = ecx

; 700  : 		{	// construct default allocator (do nothing)
; 701  : 		}

	mov	eax, ecx
	ret	0
??0?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
;	COMDAT ??0ValueIteratorBase@Json@@QAE@XZ
_TEXT	SEGMENT
??0ValueIteratorBase@Json@@QAE@XZ PROC			; Json::ValueIteratorBase::ValueIteratorBase, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 38   : 		: _Ptr()

	mov	DWORD PTR [ecx], 0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl

; 18   : }

	mov	eax, ecx
	mov	BYTE PTR [ecx+4], 1
	ret	0
??0ValueIteratorBase@Json@@QAE@XZ ENDP			; Json::ValueIteratorBase::ValueIteratorBase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??_GValueAllocator@Json@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GValueAllocator@Json@@UAEPAXI@Z PROC			; Json::ValueAllocator::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	test	BYTE PTR ___flags$[ebp], 1
	push	esi
	mov	esi, ecx

; 56   : {

	mov	DWORD PTR [esi], OFFSET ??_7ValueAllocator@Json@@6B@
	je	SHORT $LN7@scalar
	push	4
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN7@scalar:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GValueAllocator@Json@@UAEPAXI@Z ENDP			; Json::ValueAllocator::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0ValueAllocator@Json@@QAE@XZ
_TEXT	SEGMENT
??0ValueAllocator@Json@@QAE@XZ PROC			; Json::ValueAllocator::ValueAllocator, COMDAT
; _this$ = ecx
	mov	DWORD PTR [ecx], OFFSET ??_7ValueAllocator@Json@@6B@
	mov	eax, ecx
	ret	0
??0ValueAllocator@Json@@QAE@XZ ENDP			; Json::ValueAllocator::ValueAllocator
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??1ValueAllocator@Json@@UAE@XZ
_TEXT	SEGMENT
??1ValueAllocator@Json@@UAE@XZ PROC			; Json::ValueAllocator::~ValueAllocator, COMDAT
; _this$ = ecx

; 56   : {

	mov	DWORD PTR [ecx], OFFSET ??_7ValueAllocator@Json@@6B@

; 57   : }

	ret	0
??1ValueAllocator@Json@@UAE@XZ ENDP			; Json::ValueAllocator::~ValueAllocator
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBEXPAVPathArgument@Json@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBEXPAVPathArgument@Json@@0@Z PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1794 : 		}

	ret	8
?_Orphan_range@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBEXPAVPathArgument@Json@@0@Z ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBEXXZ PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Xlen, COMDAT
; _this$ = ecx

; 1765 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
	int	3
?_Xlen@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBEXXZ ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T1 = -4						; size = 1
?_Tidy@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXXZ PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Tidy, COMDAT
; _this$ = ecx

; 1636 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, ecx

; 1637 : 		if (this->_Myfirst() != pointer())

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN2@Tidy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

	push	DWORD PTR $T1[ebp]
	push	esi
	push	DWORD PTR [esi+4]
	push	eax
	call	??$_Destroy_range1@V?$allocator@VPathArgument@Json@@@std@@PAVPathArgument@Json@@@std@@YAXPAVPathArgument@Json@@0AAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<Json::PathArgument>,Json::PathArgument *>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+8]
	sub	eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	32					; 00000020H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

	sar	eax, 5
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	ecx
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1643 : 			this->_Myfirst() = pointer();

	mov	DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	add	esp, 28					; 0000001cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1644 : 			this->_Mylast() = pointer();

	mov	DWORD PTR [esi+4], 0

; 1645 : 			this->_Myend() = pointer();

	mov	DWORD PTR [esi+8], 0
$LN2@Tidy:
	pop	esi

; 1646 : 			}
; 1647 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXXZ ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Reserve, COMDAT
; _this$ = ecx

; 1626 : 		{	// ensure room for _Count new elements, grow exponentially

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx

; 1627 : 		if (_Unused_capacity() < _Count)

	mov	ecx, DWORD PTR __Count$[ebp]
	push	edi

; 1048 : 		return (this->_Myend() - this->_Mylast());

	mov	edi, DWORD PTR [esi+8]
	mov	eax, edi
	mov	edx, DWORD PTR [esi+4]
	sub	eax, edx
	sar	eax, 5

; 1627 : 		if (_Unused_capacity() < _Count)

	cmp	eax, ecx
	jae	SHORT $LN2@Reserve

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	sub	edx, DWORD PTR [esi]
	push	ebx

; 1628 : 			{	// need more room, try to get it
; 1629 : 			if (max_size() - size() < _Count)

	mov	ebx, 134217727				; 07ffffffH

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	sar	edx, 5

; 1628 : 			{	// need more room, try to get it
; 1629 : 			if (max_size() - size() < _Count)

	mov	eax, ebx
	sub	eax, edx
	cmp	eax, ecx
	jae	SHORT $LN3@Reserve

; 1765 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN135@Reserve:
$LN3@Reserve:

; 1043 : 		return (this->_Myend() - this->_Myfirst());

	sub	edi, DWORD PTR [esi]

; 1630 : 				_Xlen();
; 1631 : 			_Reallocate(_Grow_to(size() + _Count));

	add	edx, ecx

; 1043 : 		return (this->_Myend() - this->_Myfirst());

	sar	edi, 5
	xor	ecx, ecx

; 1588 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

	mov	eax, edi
	shr	eax, 1
	sub	ebx, eax
	add	eax, edi
	cmp	ebx, edi
	cmovae	ecx, eax
	cmp	ecx, edx
	cmovae	edx, ecx

; 1630 : 				_Xlen();
; 1631 : 			_Reallocate(_Grow_to(size() + _Count));

	mov	ecx, esi
	push	edx
	call	?_Reallocate@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Reallocate
	pop	ebx
$LN2@Reserve:
	pop	edi
	pop	esi

; 1632 : 			}
; 1633 : 		}

	pop	ebp
	ret	4
$LN134@Reserve:
?_Reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
$T2 = -24						; size = 1
__Ptr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T3 = 8							; size = 1
__Count$ = 8						; size = 4
?_Reallocate@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Reallocate, COMDAT
; _this$ = ecx

; 1601 : 		{	// move to array of exactly _Count elements

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Reallocate@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 976  : 		return (_Mybase::allocate(_Count));

	mov	ebx, DWORD PTR __Count$[ebp]
	push	ebx
	call	?allocate@?$allocator@VPathArgument@Json@@@std@@QAEPAVPathArgument@Json@@I@Z ; std::allocator<Json::PathArgument>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	push	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 810  : 	return {};

	mov	BYTE PTR $T2[ebp], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	push	DWORD PTR $T2[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1602 : 		pointer _Ptr = this->_Getal().allocate(_Count);

	mov	DWORD PTR __Ptr$[ebp], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	push	esi
	push	eax
	push	DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1604 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	push	DWORD PTR [esi]
	call	??$_Uninitialized_move_al_unchecked1@PAVPathArgument@Json@@PAV12@V?$allocator@VPathArgument@Json@@@std@@@std@@YAPAVPathArgument@Json@@PAV12@00AAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_move_al_unchecked1<Json::PathArgument *,Json::PathArgument *,std::allocator<Json::PathArgument> >
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	mov	ecx, DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

	add	esp, 24					; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	mov	eax, DWORD PTR [esi]
	mov	edi, ecx
	sub	edi, eax

; 1609 : 		_CATCH_END
; 1610 : 
; 1611 : 		size_type _Size = size();
; 1612 : 		if (this->_Myfirst() != pointer())

	test	eax, eax
	je	SHORT $LN3@Reallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

	push	DWORD PTR $T3[ebp]
	push	esi
	push	ecx
	push	eax
	call	??$_Destroy_range1@V?$allocator@VPathArgument@Json@@@std@@PAVPathArgument@Json@@@std@@YAXPAVPathArgument@Json@@0AAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<Json::PathArgument>,Json::PathArgument *>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1615 : 			this->_Getal().deallocate(this->_Myfirst(),

	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+8]
	sub	eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	32					; 00000020H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1615 : 			this->_Getal().deallocate(this->_Myfirst(),

	sar	eax, 5
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	ecx
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 28					; 0000001cH
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1620 : 		this->_Myend() = _Ptr + _Count;

	mov	eax, DWORD PTR __Ptr$[ebp]

; 1621 : 		this->_Mylast() = _Ptr + _Size;

	and	edi, -32				; ffffffe0H
	shl	ebx, 5
	add	ebx, eax
	add	edi, eax
	mov	DWORD PTR [esi+8], ebx
	mov	DWORD PTR [esi+4], edi

; 1622 : 		this->_Myfirst() = _Ptr;

	mov	DWORD PTR [esi], eax

; 1623 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
__catch$?_Reallocate@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z$0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	32					; 00000020H
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1608 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN194@Reallocate:
$LN193@Reallocate:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Reallocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBE_NPBVPathArgument@Json@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBE_NPBVPathArgument@Json@@@Z PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Inside, COMDAT
; _this$ = ecx

; 1596 : 		{	// test if _Ptr points inside vector

	push	ebp
	mov	ebp, esp

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	jae	SHORT $LN3@Inside
	cmp	DWORD PTR [ecx], eax
	ja	SHORT $LN3@Inside
	mov	al, 1

; 1598 : 		}

	pop	ebp
	ret	4
$LN3@Inside:

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

	xor	al, al

; 1598 : 		}

	pop	ebp
	ret	4
?_Inside@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBE_NPBVPathArgument@Json@@@Z ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBEII@Z PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Grow_to, COMDAT
; _this$ = ecx

; 1585 : 		{	// grow by 50% or at least to _Count

	push	ebp
	mov	ebp, esp
	push	esi

; 1043 : 		return (this->_Myend() - this->_Myfirst());

	mov	esi, DWORD PTR [ecx+8]

; 1586 : 		size_type _Capacity = capacity();
; 1587 : 
; 1588 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

	mov	edx, 134217727				; 07ffffffH

; 1043 : 		return (this->_Myend() - this->_Myfirst());

	sub	esi, DWORD PTR [ecx]
	sar	esi, 5

; 1586 : 		size_type _Capacity = capacity();
; 1587 : 
; 1588 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

	mov	eax, esi
	shr	eax, 1
	sub	edx, eax
	lea	ecx, DWORD PTR [eax+esi]
	xor	eax, eax
	cmp	edx, esi
	pop	esi
	cmovae	eax, ecx

; 1589 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1590 : 		if (_Capacity < _Count)

	cmp	eax, DWORD PTR __Count$[ebp]
	cmovb	eax, DWORD PTR __Count$[ebp]

; 1591 : 			_Capacity = _Count;
; 1592 : 		return (_Capacity);
; 1593 : 		}

	pop	ebp
	ret	4
?_Grow_to@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IBEII@Z ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXPAVPathArgument@Json@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
$T1 = 12						; size = 1
__Last$ = 12						; size = 4
?_Destroy@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXPAVPathArgument@Json@@0@Z PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Destroy, COMDAT
; _this$ = ecx

; 1580 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

	push	DWORD PTR $T1[ebp]
	push	ecx
	push	DWORD PTR __Last$[ebp]
	push	DWORD PTR __First$[ebp]
	call	??$_Destroy_range1@V?$allocator@VPathArgument@Json@@@std@@PAVPathArgument@Json@@@std@@YAXPAVPathArgument@Json@@0AAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<Json::PathArgument>,Json::PathArgument *>
	add	esp, 16					; 00000010H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1582 : 		}

	pop	ebp
	ret	8
?_Destroy@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXPAVPathArgument@Json@@0@Z ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXABVPathArgument@Json@@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T4 = 8							; size = 4
$T5 = 8							; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXABVPathArgument@Json@@@Z PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::push_back, COMDAT
; _this$ = ecx

; 1276 : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXABVPathArgument@Json@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

	mov	edi, DWORD PTR __Val$[ebp]
	cmp	edi, eax
	jae	SHORT $LN2@push_back
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	ecx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

	cmp	ecx, edi
	ja	SHORT $LN2@push_back

; 1277 : 		if (_Inside(_STD addressof(_Val)))
; 1278 : 			{	// push back an element
; 1279 : 			size_type _Idx = _STD addressof(_Val) - _Unfancy(this->_Myfirst());
; 1280 : 			if (this->_Mylast() == this->_Myend())

	sub	edi, ecx
	cmp	eax, DWORD PTR [esi+8]
	jne	SHORT $LN4@push_back

; 1281 : 				_Reserve(1);

	push	1
	mov	ecx, esi
	call	?_Reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Reserve
$LN4@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	ebx, DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1283 : 			this->_Getal().construct(_Unfancy(this->_Mylast()),

	and	edi, -32				; ffffffe0H
	add	edi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	DWORD PTR $T5[ebp], ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR $T3[ebp], ebx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1287 : 		else

	jmp	SHORT $LN495@push_back
$LN2@push_back:

; 1288 : 			{	// push back a non-element
; 1289 : 			if (this->_Mylast() == this->_Myend())

	cmp	eax, DWORD PTR [esi+8]
	jne	SHORT $LN5@push_back

; 1290 : 				_Reserve(1);

	push	1
	mov	ecx, esi
	call	?_Reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Reserve
$LN5@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR $T4[ebp], ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR $T2[ebp], ebx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
$LN495@push_back:
	test	ebx, ebx
	je	SHORT $LN342@push_back
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 782  : 		assign(_Right, 0, npos);

	push	-1
	push	0

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [ebx+20], 15			; 0000000fH

; 782  : 		assign(_Right, 0, npos);

	mov	ecx, ebx

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [ebx+16], 0

; 782  : 		assign(_Right, 0, npos);

	push	edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [ebx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 782  : 		assign(_Right, 0, npos);

	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	eax, DWORD PTR [edi+24]
	mov	DWORD PTR [ebx+24], eax
	mov	eax, DWORD PTR [edi+28]
	mov	DWORD PTR [ebx+28], eax
$LN342@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1294 : 			++this->_Mylast();

	add	DWORD PTR [esi+4], 32			; 00000020H

; 1295 : 			}
; 1296 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXABVPathArgument@Json@@@Z$33:
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXABVPathArgument@Json@@@Z$89:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXABVPathArgument@Json@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXABVPathArgument@Json@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXABVPathArgument@Json@@@Z ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::push_back
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIXZ PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::max_size, COMDAT
; _this$ = ecx

; 1185 : 		return (this->_Getal().max_size());

	mov	eax, 134217727				; 07ffffffH

; 1186 : 		}

	ret	0
?max_size@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIXZ ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIXZ PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::size, COMDAT
; _this$ = ecx

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 5

; 1181 : 		}

	ret	0
?size@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIXZ ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?end@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@std@@@2@XZ PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::end, COMDAT
; _this$ = ecx

; 1072 : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp

; 46   : 		: _Ptr(_Parg)

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], ecx

; 1073 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1074 : 		}

	pop	ebp
	ret	4
?end@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@std@@@2@XZ ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?begin@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@std@@@2@XZ PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::begin, COMDAT
; _this$ = ecx

; 1062 : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp

; 46   : 		: _Ptr(_Parg)

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 1063 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1064 : 		}

	pop	ebp
	ret	4
?begin@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@std@@@2@XZ ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIXZ PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1048 : 		return (this->_Myend() - this->_Mylast());

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 5

; 1049 : 		}

	ret	0
?_Unused_capacity@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIXZ ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIXZ PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::capacity, COMDAT
; _this$ = ecx

; 1043 : 		return (this->_Myend() - this->_Myfirst());

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 5

; 1044 : 		}

	ret	0
?capacity@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIXZ ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 1
??1?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@XZ PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::~vector<Json::PathArgument,std::allocator<Json::PathArgument> >, COMDAT
; _this$ = ecx

; 975  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, ecx

; 1637 : 		if (this->_Myfirst() != pointer())

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN4@vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

	push	DWORD PTR $T1[ebp]
	push	esi
	push	DWORD PTR [esi+4]
	push	eax
	call	??$_Destroy_range1@V?$allocator@VPathArgument@Json@@@std@@PAVPathArgument@Json@@@std@@YAXPAVPathArgument@Json@@0AAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<Json::PathArgument>,Json::PathArgument *>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+8]
	sub	eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	32					; 00000020H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

	sar	eax, 5
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	ecx
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1643 : 			this->_Myfirst() = pointer();

	mov	DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	add	esp, 28					; 0000001cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1644 : 			this->_Mylast() = pointer();

	mov	DWORD PTR [esi+4], 0

; 1645 : 			this->_Myend() = pointer();

	mov	DWORD PTR [esi+8], 0
$LN4@vector:
	pop	esi

; 976  : 		_Tidy();
; 977  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@XZ ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::~vector<Json::PathArgument,std::allocator<Json::PathArgument> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEX$$QAVPathArgument@Json@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEX$$QAVPathArgument@Json@@@Z PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::push_back, COMDAT
; _this$ = ecx

; 896  : 		{	// insert by moving into element at end

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

	mov	edi, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [esi+4]
	cmp	edi, eax
	jae	SHORT $LN2@push_back
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, edi
	ja	SHORT $LN2@push_back

; 897  : 		if (_Inside(_STD addressof(_Val)))
; 898  : 			{	// push back an element
; 899  : 			size_type _Idx = _STD addressof(_Val) - _Unfancy(this->_Myfirst());
; 900  : 			if (this->_Mylast() == this->_Myend())

	sub	edi, ecx
	cmp	eax, DWORD PTR [esi+8]
	jne	SHORT $LN4@push_back

; 901  : 				_Reserve(1);

	push	1
	mov	ecx, esi
	call	?_Reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Reserve
$LN4@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ebx, DWORD PTR [esi+4]
	test	ebx, ebx
	je	SHORT $LN347@push_back
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 903  : 			this->_Getal().construct(_Unfancy(this->_Mylast()),

	and	edi, -32				; ffffffe0H
	add	edi, DWORD PTR [esi]

; 904  : 				_STD forward<value_type>(this->_Myfirst()[_Idx]));
; 905  : 			++this->_Mylast();
; 906  : 			}
; 907  : 		else

	jmp	SHORT $LN496@push_back
$LN2@push_back:

; 908  : 			{	// push back a non-element
; 909  : 			if (this->_Mylast() == this->_Myend())

	cmp	eax, DWORD PTR [esi+8]
	jne	SHORT $LN5@push_back

; 910  : 				_Reserve(1);

	push	1
	mov	ecx, esi
	call	?_Reserve@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Reserve
$LN5@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ebx, DWORD PTR [esi+4]
	test	ebx, ebx
	je	SHORT $LN347@push_back
$LN496@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [ebx+20], 15			; 0000000fH

; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	mov	ecx, ebx

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [ebx+16], 0

; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	push	edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [ebx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	call	?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
	mov	eax, DWORD PTR [edi+24]
	mov	DWORD PTR [ebx+24], eax
	mov	eax, DWORD PTR [edi+28]
	mov	DWORD PTR [ebx+28], eax
$LN347@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 914  : 			++this->_Mylast();

	add	DWORD PTR [esi+4], 32			; 00000020H
	pop	edi
	pop	esi
	pop	ebx

; 915  : 			}
; 916  : 		}

	pop	ebp
	ret	4
?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEX$$QAVPathArgument@Json@@@Z ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@XZ PROC ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::vector<Json::PathArgument,std::allocator<Json::PathArgument> >, COMDAT
; _this$ = ecx

; 485  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0

; 708  : 		}

	mov	eax, ecx

; 486  : 		_Mylast(),

	mov	DWORD PTR [ecx+4], 0

; 487  : 		_Myend()

	mov	DWORD PTR [ecx+8], 0

; 708  : 		}

	ret	0
??0?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@XZ ENDP ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::vector<Json::PathArgument,std::allocator<Json::PathArgument> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Json::PathArgument> >,std::_Vector_val<std::_Simple_types<Json::PathArgument> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 320  : 		return (_Myval2);

	mov	eax, ecx

; 321  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Json::PathArgument> >,std::_Vector_val<std::_Simple_types<Json::PathArgument> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Json::PathArgument> >,std::_Vector_val<std::_Simple_types<Json::PathArgument> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 315  : 		return (_Myval2);

	mov	eax, ecx

; 316  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Json::PathArgument> >,std::_Vector_val<std::_Simple_types<Json::PathArgument> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Json::PathArgument> >,std::_Vector_val<std::_Simple_types<Json::PathArgument> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 300  : 		return (*this);

	mov	eax, ecx

; 301  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Json::PathArgument> >,std::_Vector_val<std::_Simple_types<Json::PathArgument> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Json::PathArgument> >,std::_Vector_val<std::_Simple_types<Json::PathArgument> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 295  : 		return (*this);

	mov	eax, ecx

; 296  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Json::PathArgument> >,std::_Vector_val<std::_Simple_types<Json::PathArgument> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<Json::PathArgument> >::_Vector_val<std::_Simple_types<Json::PathArgument> >, COMDAT
; _this$ = ecx

; 485  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0

; 489  : 		}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	0
??0?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<Json::PathArgument> >::_Vector_val<std::_Simple_types<Json::PathArgument> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBEABQAVPathArgument@Json@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBEABQAVPathArgument@Json@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Myend, COMDAT
; _this$ = ecx

; 668  : 		return (_Get_data()._Myend);

	lea	eax, DWORD PTR [ecx+8]

; 669  : 		}

	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBEABQAVPathArgument@Json@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAEAAPAVPathArgument@Json@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAEAAPAVPathArgument@Json@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Myend, COMDAT
; _this$ = ecx

; 663  : 		return (_Get_data()._Myend);

	lea	eax, DWORD PTR [ecx+8]

; 664  : 		}

	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAEAAPAVPathArgument@Json@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBEABQAVPathArgument@Json@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBEABQAVPathArgument@Json@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Mylast, COMDAT
; _this$ = ecx

; 658  : 		return (_Get_data()._Mylast);

	lea	eax, DWORD PTR [ecx+4]

; 659  : 		}

	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBEABQAVPathArgument@Json@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAEAAPAVPathArgument@Json@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAEAAPAVPathArgument@Json@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Mylast, COMDAT
; _this$ = ecx

; 653  : 		return (_Get_data()._Mylast);

	lea	eax, DWORD PTR [ecx+4]

; 654  : 		}

	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAEAAPAVPathArgument@Json@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBEABQAVPathArgument@Json@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBEABQAVPathArgument@Json@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Myfirst, COMDAT
; _this$ = ecx

; 648  : 		return (_Get_data()._Myfirst);

	mov	eax, ecx

; 649  : 		}

	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBEABQAVPathArgument@Json@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAEAAPAVPathArgument@Json@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAEAAPAVPathArgument@Json@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Myfirst, COMDAT
; _this$ = ecx

; 643  : 		return (_Get_data()._Myfirst);

	mov	eax, ecx

; 644  : 		}

	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAEAAPAVPathArgument@Json@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Get_data, COMDAT
; _this$ = ecx

; 638  : 		return (_Mypair._Get_second());

	mov	eax, ecx

; 639  : 		}

	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Get_data, COMDAT
; _this$ = ecx

; 633  : 		return (_Mypair._Get_second());

	mov	eax, ecx

; 634  : 		}

	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VPathArgument@Json@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Getal, COMDAT
; _this$ = ecx

; 628  : 		return (_Mypair._Get_first());

	mov	eax, ecx

; 629  : 		}

	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Getal, COMDAT
; _this$ = ecx

; 623  : 		return (_Mypair._Get_first());

	mov	eax, ecx

; 624  : 		}

	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 613  : 		_Get_data()._Orphan_all();
; 614  : 		}

	ret	0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Vector_alloc<std::_Vec_base_types<Json::PathArgument,std::allocator<Json::PathArgument> > >, COMDAT
; _this$ = ecx

; 485  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0

; 521  : 		}

	mov	eax, ecx

; 486  : 		_Mylast(),

	mov	DWORD PTR [ecx+4], 0

; 487  : 		_Myend()

	mov	DWORD PTR [ecx+8], 0

; 521  : 		}

	ret	0
??0?$_Vector_alloc@U?$_Vec_base_types@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument,std::allocator<Json::PathArgument> > >::_Vector_alloc<std::_Vec_base_types<Json::PathArgument,std::allocator<Json::PathArgument> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<Json::PathArgument> >::max_size, COMDAT
; _this$ = ecx

; 1008 : 		return (_Mytraits::max_size(*this));

	mov	eax, 134217727				; 07ffffffH

; 1009 : 		}

	ret	4
?max_size@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<Json::PathArgument> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@I@Z PROC ; std::_Wrap_alloc<std::allocator<Json::PathArgument> >::deallocate, COMDAT
; _this$ = ecx

; 986  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	32					; 00000020H
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH

; 987  : 		_Mybase::deallocate(_Ptr, _Count);
; 988  : 		}

	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXPAVPathArgument@Json@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<Json::PathArgument> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEPAVPathArgument@Json@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEPAVPathArgument@Json@@I@Z PROC ; std::_Wrap_alloc<std::allocator<Json::PathArgument> >::allocate, COMDAT
; _this$ = ecx

; 975  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp

; 977  : 		}

	pop	ebp

; 976  : 		return (_Mybase::allocate(_Count));

	jmp	?allocate@?$allocator@VPathArgument@Json@@@std@@QAEPAVPathArgument@Json@@I@Z ; std::allocator<Json::PathArgument>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEPAVPathArgument@Json@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<Json::PathArgument> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<Json::PathArgument> >::_Wrap_alloc<std::allocator<Json::PathArgument> >, COMDAT
; _this$ = ecx

; 937  : 		}

	mov	eax, ecx
	ret	0
??0?$_Wrap_alloc@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<Json::PathArgument> >::_Wrap_alloc<std::allocator<Json::PathArgument> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAIABV?$allocator@VPathArgument@Json@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAIABV?$allocator@VPathArgument@Json@@@2@@Z PROC ; std::allocator_traits<std::allocator<Json::PathArgument> >::max_size, COMDAT

; 869  : 		return (_Al.max_size());

	mov	eax, 134217727				; 07ffffffH

; 870  : 		}

	ret	0
?max_size@?$allocator_traits@V?$allocator@VPathArgument@Json@@@std@@@std@@SAIABV?$allocator@VPathArgument@Json@@@2@@Z ENDP ; std::allocator_traits<std::allocator<Json::PathArgument> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@VPathArgument@Json@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@VPathArgument@Json@@@std@@QBEIXZ PROC ; std::allocator<Json::PathArgument>::max_size, COMDAT
; _this$ = ecx

; 749  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 134217727				; 07ffffffH

; 750  : 		}

	ret	0
?max_size@?$allocator@VPathArgument@Json@@@std@@QBEIXZ ENDP ; std::allocator<Json::PathArgument>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@VPathArgument@Json@@@std@@QAEPAVPathArgument@Json@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@VPathArgument@Json@@@std@@QAEPAVPathArgument@Json@@I@Z PROC ; std::allocator<Json::PathArgument>::allocate, COMDAT
; _this$ = ecx

; 724  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp

; 51   : 	if (_Count == 0)

	mov	eax, DWORD PTR __Count$[ebp]
	test	eax, eax
	jne	SHORT $LN4@allocate
$LN12@allocate:

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 726  : 		}

	pop	ebp
	ret	4
$LN4@allocate:

; 55   : 	if ((size_t)(-1) / _Sz < _Count)

	cmp	eax, 134217727				; 07ffffffH
	jbe	SHORT $LN5@allocate

; 56   : 		_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN15@allocate:
$LN5@allocate:

; 57   : 	const size_t _User_size = _Count * _Sz;

	shl	eax, 5

; 58   : 
; 59   :  #if defined(_M_IX86) || defined(_M_X64)
; 60   : 	if (_Try_aligned_allocation
; 61   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN6@allocate

; 62   : 		{	// allocate large block
; 63   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 64   : 			"Big allocations should at least match vector register size");
; 65   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

	lea	ecx, DWORD PTR [eax+35]

; 66   : 		if (_Block_size <= _User_size)

	cmp	ecx, eax
	ja	SHORT $LN8@allocate

; 67   : 			_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN16@allocate:
$LN8@allocate:

; 68   : 		const uintptr_t _Ptr_container =
; 69   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

	push	ecx
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4

; 70   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

	test	ecx, ecx
	jne	SHORT $LN9@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN17@allocate:
$LN9@allocate:

; 71   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

	lea	eax, DWORD PTR [ecx+35]
	and	eax, -32				; ffffffe0H

; 72   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 73   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

	mov	DWORD PTR [eax-4], ecx

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 726  : 		}

	pop	ebp
	ret	4
$LN6@allocate:

; 83   : 		_Ptr = ::operator new(_User_size);

	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 84   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	eax, eax
	jne	SHORT $LN12@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@allocate:
$LN14@allocate:
	int	3
?allocate@?$allocator@VPathArgument@Json@@@std@@QAEPAVPathArgument@Json@@I@Z ENDP ; std::allocator<Json::PathArgument>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@I@Z PROC ; std::allocator<Json::PathArgument>::deallocate, COMDAT
; _this$ = ecx

; 719  : 		{	// deallocate object at _Ptr

	push	ebp
	mov	ebp, esp

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	32					; 00000020H
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH

; 721  : 		}

	pop	ebp
	ret	8
?deallocate@?$allocator@VPathArgument@Json@@@std@@QAEXPAVPathArgument@Json@@I@Z ENDP ; std::allocator<Json::PathArgument>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@VPathArgument@Json@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@VPathArgument@Json@@@std@@QAE@XZ PROC	; std::allocator<Json::PathArgument>::allocator<Json::PathArgument>, COMDAT
; _this$ = ecx

; 700  : 		{	// construct default allocator (do nothing)
; 701  : 		}

	mov	eax, ecx
	ret	0
??0?$allocator@VPathArgument@Json@@@std@@QAE@XZ ENDP	; std::allocator<Json::PathArgument>::allocator<Json::PathArgument>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?invalidPath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
_TEXT	SEGMENT
_path$ = 8						; size = 4
_location$ = 12						; size = 4
?invalidPath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z PROC ; Json::Path::invalidPath, COMDAT
; _this$ = ecx

; 1627 :    // Error: invalid path.
; 1628 : }

	ret	8
?invalidPath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ENDP ; Json::Path::invalidPath
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?addPathInArg@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@AAV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@std@@@4@W4Kind@PathArgument@2@@Z
_TEXT	SEGMENT
_path$ = 8						; size = 4
_in$ = 12						; size = 4
_itInArg$ = 16						; size = 4
_kind$ = 20						; size = 4
?addPathInArg@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@AAV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@std@@@4@W4Kind@PathArgument@2@@Z PROC ; Json::Path::addPathInArg, COMDAT
; _this$ = ecx

; 1607 : {

	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 214  : 		return (_Ptr == _Right._Ptr);

	mov	edx, DWORD PTR _itInArg$[ebp]

; 46   : 		: _Ptr(_Parg)

	mov	eax, DWORD PTR _in$[ebp]

; 214  : 		return (_Ptr == _Right._Ptr);

	mov	edx, DWORD PTR [edx]
	cmp	edx, DWORD PTR [eax+4]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1608 :    if ( itInArg == in.end() )

	je	SHORT $LN5@addPathInA

; 1609 :    {
; 1610 :       // Error: missing argument %d
; 1611 :    }
; 1612 :    else if ( (*itInArg)->kind_ != kind )

	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+28]
	cmp	eax, DWORD PTR _kind$[ebp]
	jne	SHORT $LN5@addPathInA

; 1613 :    {
; 1614 :       // Error: bad argument type
; 1615 :    }
; 1616 :    else
; 1617 :    {
; 1618 :       args_.push_back( **itInArg );

	push	edx
	call	?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXABVPathArgument@Json@@@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::push_back
$LN5@addPathInA:

; 1619 :    }
; 1620 : }

	pop	ebp
	ret	16					; 00000010H
?addPathInArg@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@AAV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@std@@@4@W4Kind@PathArgument@2@@Z ENDP ; Json::Path::addPathInArg
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBEXPAPBVPathArgument@Json@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBEXPAPBVPathArgument@Json@@0@Z PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1794 : 		}

	ret	8
?_Orphan_range@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBEXPAPBVPathArgument@Json@@0@Z ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBEXXZ PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Xlen, COMDAT
; _this$ = ecx

; 1765 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
	int	3
?_Xlen@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBEXXZ ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXXZ PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Tidy, COMDAT
; _this$ = ecx

; 1636 : 		{	// free all storage

	push	esi
	mov	esi, ecx

; 1637 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN2@Tidy

; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

	mov	eax, DWORD PTR [esi+8]
	sub	eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

	sar	eax, 2
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	ecx
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1643 : 			this->_Myfirst() = pointer();

	mov	DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1644 : 			this->_Mylast() = pointer();

	mov	DWORD PTR [esi+4], 0

; 1645 : 			this->_Myend() = pointer();

	mov	DWORD PTR [esi+8], 0
$LN2@Tidy:
	pop	esi

; 1646 : 			}
; 1647 : 		}

	ret	0
?_Tidy@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXXZ ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXI@Z PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Reserve, COMDAT
; _this$ = ecx

; 1626 : 		{	// ensure room for _Count new elements, grow exponentially

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx

; 1627 : 		if (_Unused_capacity() < _Count)

	mov	ecx, DWORD PTR __Count$[ebp]
	push	edi

; 1048 : 		return (this->_Myend() - this->_Mylast());

	mov	edi, DWORD PTR [esi+8]
	mov	eax, edi
	mov	edx, DWORD PTR [esi+4]
	sub	eax, edx
	sar	eax, 2

; 1627 : 		if (_Unused_capacity() < _Count)

	cmp	eax, ecx
	jae	SHORT $LN2@Reserve

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	sub	edx, DWORD PTR [esi]
	push	ebx

; 1628 : 			{	// need more room, try to get it
; 1629 : 			if (max_size() - size() < _Count)

	mov	ebx, 1073741823				; 3fffffffH

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	sar	edx, 2

; 1628 : 			{	// need more room, try to get it
; 1629 : 			if (max_size() - size() < _Count)

	mov	eax, ebx
	sub	eax, edx
	cmp	eax, ecx
	jae	SHORT $LN3@Reserve

; 1765 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN135@Reserve:
$LN3@Reserve:

; 1043 : 		return (this->_Myend() - this->_Myfirst());

	sub	edi, DWORD PTR [esi]

; 1630 : 				_Xlen();
; 1631 : 			_Reallocate(_Grow_to(size() + _Count));

	add	edx, ecx

; 1043 : 		return (this->_Myend() - this->_Myfirst());

	sar	edi, 2
	xor	ecx, ecx

; 1588 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

	mov	eax, edi
	shr	eax, 1
	sub	ebx, eax
	add	eax, edi
	cmp	ebx, edi
	cmovae	ecx, eax
	cmp	ecx, edx
	cmovae	edx, ecx

; 1630 : 				_Xlen();
; 1631 : 			_Reallocate(_Grow_to(size() + _Count));

	mov	ecx, esi
	push	edx
	call	?_Reallocate@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Reallocate
	pop	ebx
$LN2@Reserve:
	pop	edi
	pop	esi

; 1632 : 			}
; 1633 : 		}

	pop	ebp
	ret	4
$LN134@Reserve:
?_Reserve@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXI@Z ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reallocate@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXI@Z PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Reallocate, COMDAT
; _this$ = ecx

; 1601 : 		{	// move to array of exactly _Count elements

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 976  : 		return (_Mybase::allocate(_Count));

	push	DWORD PTR __Count$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1601 : 		{	// move to array of exactly _Count elements

	mov	edi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 976  : 		return (_Mybase::allocate(_Count));

	call	?allocate@?$allocator@PBVPathArgument@Json@@@std@@QAEPAPBVPathArgument@Json@@I@Z ; std::allocator<Json::PathArgument const *>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2302 : 	const char * const _First_ch = reinterpret_cast<const char *>(_First);

	mov	esi, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1602 : 		pointer _Ptr = this->_Getal().allocate(_Count);

	mov	ebx, eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2305 : 	const size_t _Count = _Last_ch - _First_ch;

	mov	edx, DWORD PTR [edi+4]
	sub	edx, esi

; 2306 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	push	edx
	push	esi
	push	ebx
	call	DWORD PTR __imp__memmove
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	mov	ecx, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2306 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	mov	esi, DWORD PTR [edi+4]
	sub	esi, ecx
	sar	esi, 2

; 1603 : 
; 1604 : 		_TRY_BEGIN
; 1605 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1606 : 		_CATCH_ALL
; 1607 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1608 : 		_RERAISE;
; 1609 : 		_CATCH_END
; 1610 : 
; 1611 : 		size_type _Size = size();
; 1612 : 		if (this->_Myfirst() != pointer())

	test	ecx, ecx
	je	SHORT $LN3@Reallocate

; 1615 : 			this->_Getal().deallocate(this->_Myfirst(),

	mov	eax, DWORD PTR [edi+8]
	sub	eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1615 : 			this->_Getal().deallocate(this->_Myfirst(),

	sar	eax, 2
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	ecx
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1620 : 		this->_Myend() = _Ptr + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ebx+eax*4]
	mov	DWORD PTR [edi+8], eax

; 1621 : 		this->_Mylast() = _Ptr + _Size;

	lea	eax, DWORD PTR [ebx+esi*4]
	mov	DWORD PTR [edi+4], eax

; 1622 : 		this->_Myfirst() = _Ptr;

	mov	DWORD PTR [edi], ebx
	pop	edi
	pop	esi
	pop	ebx

; 1623 : 		}

	pop	ebp
	ret	4
?_Reallocate@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXI@Z ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Reallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBE_NPBQBVPathArgument@Json@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBE_NPBQBVPathArgument@Json@@@Z PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Inside, COMDAT
; _this$ = ecx

; 1596 : 		{	// test if _Ptr points inside vector

	push	ebp
	mov	ebp, esp

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	jae	SHORT $LN3@Inside
	cmp	DWORD PTR [ecx], eax
	ja	SHORT $LN3@Inside
	mov	al, 1

; 1598 : 		}

	pop	ebp
	ret	4
$LN3@Inside:

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

	xor	al, al

; 1598 : 		}

	pop	ebp
	ret	4
?_Inside@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBE_NPBQBVPathArgument@Json@@@Z ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBEII@Z PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1585 : 		{	// grow by 50% or at least to _Count

	push	ebp
	mov	ebp, esp
	push	esi

; 1043 : 		return (this->_Myend() - this->_Myfirst());

	mov	esi, DWORD PTR [ecx+8]

; 1586 : 		size_type _Capacity = capacity();
; 1587 : 
; 1588 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

	mov	edx, 1073741823				; 3fffffffH

; 1043 : 		return (this->_Myend() - this->_Myfirst());

	sub	esi, DWORD PTR [ecx]
	sar	esi, 2

; 1586 : 		size_type _Capacity = capacity();
; 1587 : 
; 1588 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

	mov	eax, esi
	shr	eax, 1
	sub	edx, eax
	lea	ecx, DWORD PTR [eax+esi]
	xor	eax, eax
	cmp	edx, esi
	pop	esi
	cmovae	eax, ecx

; 1589 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1590 : 		if (_Capacity < _Count)

	cmp	eax, DWORD PTR __Count$[ebp]
	cmovb	eax, DWORD PTR __Count$[ebp]

; 1591 : 			_Capacity = _Count;
; 1592 : 		return (_Capacity);
; 1593 : 		}

	pop	ebp
	ret	4
?_Grow_to@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IBEII@Z ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXPAPBVPathArgument@Json@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXPAPBVPathArgument@Json@@0@Z PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Destroy, COMDAT
; _this$ = ecx

; 1581 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1582 : 		}

	ret	8
?_Destroy@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXPAPBVPathArgument@Json@@0@Z ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIXZ PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::max_size, COMDAT
; _this$ = ecx

; 1185 : 		return (this->_Getal().max_size());

	mov	eax, 1073741823				; 3fffffffH

; 1186 : 		}

	ret	0
?max_size@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIXZ ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIXZ PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::size, COMDAT
; _this$ = ecx

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1181 : 		}

	ret	0
?size@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIXZ ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?end@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@std@@@2@XZ PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::end, COMDAT
; _this$ = ecx

; 1072 : 		{	// return iterator for end of nonmutable sequence

	push	ebp
	mov	ebp, esp

; 46   : 		: _Ptr(_Parg)

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], ecx

; 1073 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1074 : 		}

	pop	ebp
	ret	4
?end@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@std@@@2@XZ ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?begin@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@std@@@2@XZ PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::begin, COMDAT
; _this$ = ecx

; 1062 : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp

; 46   : 		: _Ptr(_Parg)

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 1063 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1064 : 		}

	pop	ebp
	ret	4
?begin@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@std@@@2@XZ ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIXZ PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1048 : 		return (this->_Myend() - this->_Mylast());

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 1049 : 		}

	ret	0
?_Unused_capacity@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIXZ ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIXZ PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::capacity, COMDAT
; _this$ = ecx

; 1043 : 		return (this->_Myend() - this->_Myfirst());

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 1044 : 		}

	ret	0
?capacity@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIXZ ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@XZ PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::~vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >, COMDAT
; _this$ = ecx

; 975  : 		{	// destroy the object

	push	esi
	mov	esi, ecx

; 1637 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN4@vector

; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

	mov	eax, DWORD PTR [esi+8]
	sub	eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

	sar	eax, 2
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	ecx
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1643 : 			this->_Myfirst() = pointer();

	mov	DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1644 : 			this->_Mylast() = pointer();

	mov	DWORD PTR [esi+4], 0

; 1645 : 			this->_Myend() = pointer();

	mov	DWORD PTR [esi+8], 0
$LN4@vector:
	pop	esi

; 976  : 		_Tidy();
; 977  : 		}

	ret	0
??1?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@XZ ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::~vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEX$$QAPBVPathArgument@Json@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEX$$QAPBVPathArgument@Json@@@Z PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::push_back, COMDAT
; _this$ = ecx

; 896  : 		{	// insert by moving into element at end

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	push	edi

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

	mov	edi, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [esi+4]
	cmp	edi, eax
	jae	SHORT $LN2@push_back
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, edi
	ja	SHORT $LN2@push_back

; 897  : 		if (_Inside(_STD addressof(_Val)))
; 898  : 			{	// push back an element
; 899  : 			size_type _Idx = _STD addressof(_Val) - _Unfancy(this->_Myfirst());

	sub	edi, ecx
	sar	edi, 2

; 900  : 			if (this->_Mylast() == this->_Myend())

	cmp	eax, DWORD PTR [esi+8]
	jne	SHORT $LN4@push_back

; 901  : 				_Reserve(1);

	push	1
	mov	ecx, esi
	call	?_Reserve@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Reserve
$LN4@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR [esi+4]
	test	ecx, ecx
	je	SHORT $LN215@push_back
	mov	eax, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 914  : 			++this->_Mylast();

	add	DWORD PTR [esi+4], 4
	pop	edi
	pop	esi

; 915  : 			}
; 916  : 		}

	pop	ebp
	ret	4
$LN2@push_back:

; 902  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 903  : 			this->_Getal().construct(_Unfancy(this->_Mylast()),
; 904  : 				_STD forward<value_type>(this->_Myfirst()[_Idx]));
; 905  : 			++this->_Mylast();
; 906  : 			}
; 907  : 		else
; 908  : 			{	// push back a non-element
; 909  : 			if (this->_Mylast() == this->_Myend())

	cmp	eax, DWORD PTR [esi+8]
	jne	SHORT $LN5@push_back

; 910  : 				_Reserve(1);

	push	1
	mov	ecx, esi
	call	?_Reserve@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Reserve
$LN5@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR [esi+4]
	test	ecx, ecx
	je	SHORT $LN215@push_back
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [ecx], eax
$LN215@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 914  : 			++this->_Mylast();

	add	DWORD PTR [esi+4], 4
	pop	edi
	pop	esi

; 915  : 			}
; 916  : 		}

	pop	ebp
	ret	4
?push_back@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEX$$QAPBVPathArgument@Json@@@Z ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@XZ PROC ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >, COMDAT
; _this$ = ecx

; 485  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0

; 708  : 		}

	mov	eax, ecx

; 486  : 		_Mylast(),

	mov	DWORD PTR [ecx+4], 0

; 487  : 		_Myend()

	mov	DWORD PTR [ecx+8], 0

; 708  : 		}

	ret	0
??0?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@XZ ENDP ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Json::PathArgument const *> >,std::_Vector_val<std::_Simple_types<Json::PathArgument const *> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 320  : 		return (_Myval2);

	mov	eax, ecx

; 321  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Json::PathArgument const *> >,std::_Vector_val<std::_Simple_types<Json::PathArgument const *> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Json::PathArgument const *> >,std::_Vector_val<std::_Simple_types<Json::PathArgument const *> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 315  : 		return (_Myval2);

	mov	eax, ecx

; 316  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Json::PathArgument const *> >,std::_Vector_val<std::_Simple_types<Json::PathArgument const *> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Json::PathArgument const *> >,std::_Vector_val<std::_Simple_types<Json::PathArgument const *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 300  : 		return (*this);

	mov	eax, ecx

; 301  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Json::PathArgument const *> >,std::_Vector_val<std::_Simple_types<Json::PathArgument const *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Json::PathArgument const *> >,std::_Vector_val<std::_Simple_types<Json::PathArgument const *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 295  : 		return (*this);

	mov	eax, ecx

; 296  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Json::PathArgument const *> >,std::_Vector_val<std::_Simple_types<Json::PathArgument const *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<Json::PathArgument const *> >::_Vector_val<std::_Simple_types<Json::PathArgument const *> >, COMDAT
; _this$ = ecx

; 485  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0

; 489  : 		}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	0
??0?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<Json::PathArgument const *> >::_Vector_val<std::_Simple_types<Json::PathArgument const *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QBEABQAPBVPathArgument@Json@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QBEABQAPBVPathArgument@Json@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Myend, COMDAT
; _this$ = ecx

; 668  : 		return (_Get_data()._Myend);

	lea	eax, DWORD PTR [ecx+8]

; 669  : 		}

	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QBEABQAPBVPathArgument@Json@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QAEAAPAPBVPathArgument@Json@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QAEAAPAPBVPathArgument@Json@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Myend, COMDAT
; _this$ = ecx

; 663  : 		return (_Get_data()._Myend);

	lea	eax, DWORD PTR [ecx+8]

; 664  : 		}

	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QAEAAPAPBVPathArgument@Json@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QBEABQAPBVPathArgument@Json@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QBEABQAPBVPathArgument@Json@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Mylast, COMDAT
; _this$ = ecx

; 658  : 		return (_Get_data()._Mylast);

	lea	eax, DWORD PTR [ecx+4]

; 659  : 		}

	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QBEABQAPBVPathArgument@Json@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QAEAAPAPBVPathArgument@Json@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QAEAAPAPBVPathArgument@Json@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Mylast, COMDAT
; _this$ = ecx

; 653  : 		return (_Get_data()._Mylast);

	lea	eax, DWORD PTR [ecx+4]

; 654  : 		}

	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QAEAAPAPBVPathArgument@Json@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QBEABQAPBVPathArgument@Json@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QBEABQAPBVPathArgument@Json@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Myfirst, COMDAT
; _this$ = ecx

; 648  : 		return (_Get_data()._Myfirst);

	mov	eax, ecx

; 649  : 		}

	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QBEABQAPBVPathArgument@Json@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QAEAAPAPBVPathArgument@Json@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QAEAAPAPBVPathArgument@Json@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Myfirst, COMDAT
; _this$ = ecx

; 643  : 		return (_Get_data()._Myfirst);

	mov	eax, ecx

; 644  : 		}

	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QAEAAPAPBVPathArgument@Json@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Get_data, COMDAT
; _this$ = ecx

; 638  : 		return (_Mypair._Get_second());

	mov	eax, ecx

; 639  : 		}

	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Get_data, COMDAT
; _this$ = ecx

; 633  : 		return (_Mypair._Get_second());

	mov	eax, ecx

; 634  : 		}

	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PBVPathArgument@Json@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Getal, COMDAT
; _this$ = ecx

; 628  : 		return (_Mypair._Get_first());

	mov	eax, ecx

; 629  : 		}

	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Getal, COMDAT
; _this$ = ecx

; 623  : 		return (_Mypair._Get_first());

	mov	eax, ecx

; 624  : 		}

	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 613  : 		_Get_data()._Orphan_all();
; 614  : 		}

	ret	0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Vector_alloc<std::_Vec_base_types<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >, COMDAT
; _this$ = ecx

; 485  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0

; 521  : 		}

	mov	eax, ecx

; 486  : 		_Mylast(),

	mov	DWORD PTR [ecx+4], 0

; 487  : 		_Myend()

	mov	DWORD PTR [ecx+8], 0

; 521  : 		}

	ret	0
??0?$_Vector_alloc@U?$_Vec_base_types@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >::_Vector_alloc<std::_Vec_base_types<Json::PathArgument const *,std::allocator<Json::PathArgument const *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<Json::PathArgument const *> >::max_size, COMDAT
; _this$ = ecx

; 1008 : 		return (_Mytraits::max_size(*this));

	mov	eax, 1073741823				; 3fffffffH

; 1009 : 		}

	ret	4
?max_size@?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<Json::PathArgument const *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEXPAPBVPathArgument@Json@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEXPAPBVPathArgument@Json@@I@Z PROC ; std::_Wrap_alloc<std::allocator<Json::PathArgument const *> >::deallocate, COMDAT
; _this$ = ecx

; 986  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	4
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH

; 987  : 		_Mybase::deallocate(_Ptr, _Count);
; 988  : 		}

	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEXPAPBVPathArgument@Json@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<Json::PathArgument const *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEPAPBVPathArgument@Json@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEPAPBVPathArgument@Json@@I@Z PROC ; std::_Wrap_alloc<std::allocator<Json::PathArgument const *> >::allocate, COMDAT
; _this$ = ecx

; 975  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp

; 977  : 		}

	pop	ebp

; 976  : 		return (_Mybase::allocate(_Count));

	jmp	?allocate@?$allocator@PBVPathArgument@Json@@@std@@QAEPAPBVPathArgument@Json@@I@Z ; std::allocator<Json::PathArgument const *>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAEPAPBVPathArgument@Json@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<Json::PathArgument const *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<Json::PathArgument const *> >::_Wrap_alloc<std::allocator<Json::PathArgument const *> >, COMDAT
; _this$ = ecx

; 937  : 		}

	mov	eax, ecx
	ret	0
??0?$_Wrap_alloc@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<Json::PathArgument const *> >::_Wrap_alloc<std::allocator<Json::PathArgument const *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@PBVPathArgument@Json@@@std@@@std@@SAIABV?$allocator@PBVPathArgument@Json@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@PBVPathArgument@Json@@@std@@@std@@SAIABV?$allocator@PBVPathArgument@Json@@@2@@Z PROC ; std::allocator_traits<std::allocator<Json::PathArgument const *> >::max_size, COMDAT

; 869  : 		return (_Al.max_size());

	mov	eax, 1073741823				; 3fffffffH

; 870  : 		}

	ret	0
?max_size@?$allocator_traits@V?$allocator@PBVPathArgument@Json@@@std@@@std@@SAIABV?$allocator@PBVPathArgument@Json@@@2@@Z ENDP ; std::allocator_traits<std::allocator<Json::PathArgument const *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@PBVPathArgument@Json@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PBVPathArgument@Json@@@std@@QBEIXZ PROC ; std::allocator<Json::PathArgument const *>::max_size, COMDAT
; _this$ = ecx

; 749  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 1073741823				; 3fffffffH

; 750  : 		}

	ret	0
?max_size@?$allocator@PBVPathArgument@Json@@@std@@QBEIXZ ENDP ; std::allocator<Json::PathArgument const *>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@PBVPathArgument@Json@@@std@@QAEPAPBVPathArgument@Json@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PBVPathArgument@Json@@@std@@QAEPAPBVPathArgument@Json@@I@Z PROC ; std::allocator<Json::PathArgument const *>::allocate, COMDAT
; _this$ = ecx

; 724  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp

; 51   : 	if (_Count == 0)

	mov	eax, DWORD PTR __Count$[ebp]
	test	eax, eax
	jne	SHORT $LN4@allocate
$LN12@allocate:

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 726  : 		}

	pop	ebp
	ret	4
$LN4@allocate:

; 55   : 	if ((size_t)(-1) / _Sz < _Count)

	cmp	eax, 1073741823				; 3fffffffH
	jbe	SHORT $LN5@allocate

; 56   : 		_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN15@allocate:
$LN5@allocate:

; 57   : 	const size_t _User_size = _Count * _Sz;

	shl	eax, 2

; 58   : 
; 59   :  #if defined(_M_IX86) || defined(_M_X64)
; 60   : 	if (_Try_aligned_allocation
; 61   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN6@allocate

; 62   : 		{	// allocate large block
; 63   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 64   : 			"Big allocations should at least match vector register size");
; 65   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

	lea	ecx, DWORD PTR [eax+35]

; 66   : 		if (_Block_size <= _User_size)

	cmp	ecx, eax
	ja	SHORT $LN8@allocate

; 67   : 			_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN16@allocate:
$LN8@allocate:

; 68   : 		const uintptr_t _Ptr_container =
; 69   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

	push	ecx
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4

; 70   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

	test	ecx, ecx
	jne	SHORT $LN9@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN17@allocate:
$LN9@allocate:

; 71   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

	lea	eax, DWORD PTR [ecx+35]
	and	eax, -32				; ffffffe0H

; 72   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 73   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

	mov	DWORD PTR [eax-4], ecx

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 726  : 		}

	pop	ebp
	ret	4
$LN6@allocate:

; 83   : 		_Ptr = ::operator new(_User_size);

	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 84   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	eax, eax
	jne	SHORT $LN12@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@allocate:
$LN14@allocate:
	int	3
?allocate@?$allocator@PBVPathArgument@Json@@@std@@QAEPAPBVPathArgument@Json@@I@Z ENDP ; std::allocator<Json::PathArgument const *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PBVPathArgument@Json@@@std@@QAEXPAPBVPathArgument@Json@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@PBVPathArgument@Json@@@std@@QAEXPAPBVPathArgument@Json@@I@Z PROC ; std::allocator<Json::PathArgument const *>::deallocate, COMDAT
; _this$ = ecx

; 719  : 		{	// deallocate object at _Ptr

	push	ebp
	mov	ebp, esp

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	4
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH

; 721  : 		}

	pop	ebp
	ret	8
?deallocate@?$allocator@PBVPathArgument@Json@@@std@@QAEXPAPBVPathArgument@Json@@I@Z ENDP ; std::allocator<Json::PathArgument const *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PBVPathArgument@Json@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PBVPathArgument@Json@@@std@@QAE@XZ PROC	; std::allocator<Json::PathArgument const *>::allocator<Json::PathArgument const *>, COMDAT
; _this$ = ecx

; 700  : 		{	// construct default allocator (do nothing)
; 701  : 		}

	mov	eax, ecx
	ret	0
??0?$allocator@PBVPathArgument@Json@@@std@@QAE@XZ ENDP	; std::allocator<Json::PathArgument const *>::allocator<Json::PathArgument const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z
_TEXT	SEGMENT
_end$1$ = -124						; size = 4
$T2 = -120						; size = 4
$T3 = -116						; size = 4
$T4 = -116						; size = 4
tv3790 = -116						; size = 4
_beginName$1$ = -116					; size = 4
__Capacity$1$ = -112					; size = 4
__Capacity$1$ = -112					; size = 4
_this$GSCopy$1$ = -108					; size = 4
$T5 = -104						; size = 32
$T6 = -72						; size = 24
$T7 = -48						; size = 32
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_path$ = 8						; size = 4
_in$ = 12						; size = 4
?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z PROC ; Json::Path::makePath, COMDAT
; _this$ = ecx

; 1561 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	edx, ecx
	mov	DWORD PTR _this$GSCopy$1$[ebp], edx
	mov	eax, DWORD PTR _path$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 521  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN36@makePath
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	edi, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 521  : 		return (this->_BUF_SIZE <= _Myres

	jmp	SHORT $LN37@makePath
$LN36@makePath:
	mov	edi, eax
$LN37@makePath:

; 1760 : 		return (this->_Mysize());

	mov	eax, DWORD PTR [eax+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

	mov	ecx, DWORD PTR _in$[ebp]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1563 :    const char *end = current + path.length();

	lea	ebx, DWORD PTR [eax+edi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

	mov	esi, DWORD PTR [ecx]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1563 :    const char *end = current + path.length();

	mov	DWORD PTR _end$1$[ebp], ebx

; 1564 :    InArgs::const_iterator itInArg = in.begin();
; 1565 :    while ( current != end )

	cmp	edi, ebx
	je	$LN1761@makePath
$LL2@makePath:

; 1566 :    {
; 1567 :       if ( *current == '[' )

	mov	al, BYTE PTR [edi]
	cmp	al, 91					; 0000005bH
	jne	$LN9@makePath

; 1568 :       {
; 1569 :          ++current;

	inc	edi

; 1570 :          if ( *current == '%' )

	cmp	BYTE PTR [edi], 37			; 00000025H
	jne	SHORT $LN11@makePath
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 214  : 		return (_Ptr == _Right._Ptr);

	cmp	esi, DWORD PTR [ecx+4]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1608 :    if ( itInArg == in.end() )

	je	$LN1479@makePath

; 1609 :    {
; 1610 :       // Error: missing argument %d
; 1611 :    }
; 1612 :    else if ( (*itInArg)->kind_ != kind )

	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax+28], 1
	jne	$LN1479@makePath

; 1613 :    {
; 1614 :       // Error: bad argument type
; 1615 :    }
; 1616 :    else
; 1617 :    {
; 1618 :       args_.push_back( **itInArg );

	push	eax
	mov	ecx, edx
	call	?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXABVPathArgument@Json@@@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::push_back
	cmp	edi, ebx
	lea	eax, DWORD PTR [edi+1]
	cmove	eax, edi
	mov	edi, eax

; 1581 :       }

	jmp	$LN18@makePath
$LN11@makePath:

; 1571 :             addPathInArg( path, in, itInArg, PathArgument::kindIndex );
; 1572 :          else
; 1573 :          {
; 1574 :             Value::UInt index = 0;

	xor	ecx, ecx

; 1575 :             for ( ; current != end && *current >= '0'  &&  *current <= '9'; ++current )

	cmp	edi, ebx
	je	SHORT $LN5@makePath
$LL6@makePath:
	mov	al, BYTE PTR [edi]
	cmp	al, 48					; 00000030H
	jl	SHORT $LN5@makePath
	cmp	al, 57					; 00000039H
	jg	SHORT $LN5@makePath

; 1576 :                index = index * 10 + Value::UInt(*current - '0');

	lea	ecx, DWORD PTR [ecx+ecx*4]
	movsx	eax, al
	inc	edi
	lea	ecx, DWORD PTR [ecx-24]
	lea	ecx, DWORD PTR [eax+ecx*2]
	cmp	edi, ebx
	jne	SHORT $LL6@makePath
$LN5@makePath:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR $T7[ebp+20], 15		; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR $T7[ebp+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR $T7[ebp], 0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1519 :    : index_( index )

	mov	DWORD PTR $T7[ebp+24], ecx

; 1520 :    , kind_( kindIndex )

	mov	DWORD PTR $T7[ebp+28], 1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	ecx, DWORD PTR [edx+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

	lea	eax, DWORD PTR $T7[ebp]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1577 :             args_.push_back( index );

	mov	DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

	cmp	eax, ecx
	jae	$LN238@makePath
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [edx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

	lea	ebx, DWORD PTR $T7[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	DWORD PTR $T2[ebp], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

	cmp	eax, ebx
	ja	$LN238@makePath

; 900  : 			if (this->_Mylast() == this->_Myend())

	sub	ebx, eax
	mov	eax, DWORD PTR [edx+8]
	sar	ebx, 5
	mov	DWORD PTR $T4[ebp], ebx
	mov	DWORD PTR __Capacity$1$[ebp], eax
	cmp	ecx, eax
	jne	SHORT $LN305@makePath

; 1048 : 		return (this->_Myend() - this->_Mylast());

	sub	eax, ecx
	sar	eax, 5

; 1627 : 		if (_Unused_capacity() < _Count)

	cmp	eax, 1
	jae	SHORT $LN305@makePath

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	sub	ecx, DWORD PTR $T2[ebp]

; 1629 : 			if (max_size() - size() < _Count)

	mov	eax, 134217727				; 07ffffffH

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	sar	ecx, 5

; 1629 : 			if (max_size() - size() < _Count)

	sub	eax, ecx
	cmp	eax, 1
	jb	$LN1750@makePath

; 1043 : 		return (this->_Myend() - this->_Myfirst());

	mov	edx, DWORD PTR __Capacity$1$[ebp]

; 1631 : 			_Reallocate(_Grow_to(size() + _Count));

	lea	ebx, DWORD PTR [ecx+1]

; 1043 : 		return (this->_Myend() - this->_Myfirst());

	sub	edx, DWORD PTR $T2[ebp]

; 1588 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

	mov	ecx, 134217727				; 07ffffffH

; 1043 : 		return (this->_Myend() - this->_Myfirst());

	sar	edx, 5

; 1588 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

	mov	eax, edx

; 1043 : 		return (this->_Myend() - this->_Myfirst());

	mov	DWORD PTR __Capacity$1$[ebp], edx

; 1588 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

	shr	eax, 1
	sub	ecx, eax
	add	eax, edx
	xor	edx, edx
	cmp	ecx, DWORD PTR __Capacity$1$[ebp]

; 1631 : 			_Reallocate(_Grow_to(size() + _Count));

	mov	ecx, DWORD PTR _this$GSCopy$1$[ebp]
	cmovae	edx, eax
	cmp	edx, ebx
	cmovae	ebx, edx
	push	ebx
	call	?_Reallocate@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Reallocate
	mov	ebx, DWORD PTR $T4[ebp]
	mov	edx, DWORD PTR _this$GSCopy$1$[ebp]
$LN305@makePath:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR [edx+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 903  : 			this->_Getal().construct(_Unfancy(this->_Mylast()),

	shl	ebx, 5
	add	ebx, DWORD PTR [edx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR $T3[ebp], ecx
	test	ecx, ecx
	je	$LN1085@makePath
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [ecx+16], 0

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN627@makePath
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jmp	SHORT $LN628@makePath
$LN627@makePath:
	mov	eax, ecx
$LN628@makePath:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 962  : 		if (_Right._Myres() < this->_BUF_SIZE)

	cmp	DWORD PTR [ebx+20], 16			; 00000010H
	jae	SHORT $LN638@makePath

; 963  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,

	mov	eax, DWORD PTR [ebx+16]
	add	eax, 1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 553  : 		return (_Count == 0 ? _First1

	je	SHORT $LN639@makePath
	push	eax
	push	ebx
	push	ecx
	call	DWORD PTR __imp__memmove
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 965  : 		else

	mov	ecx, DWORD PTR $T3[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 553  : 		return (_Count == 0 ? _First1

	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 965  : 		else

	mov	edx, DWORD PTR _this$GSCopy$1$[ebp]
	jmp	SHORT $LN639@makePath
$LN638@makePath:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 968  : 			_Right._Bx()._Ptr = pointer();

	mov	DWORD PTR [ebx], 0
$LN639@makePath:

; 969  : 			}
; 970  : 		this->_Mysize() = _Right._Mysize();

	mov	eax, DWORD PTR [ebx+16]
	mov	DWORD PTR [ecx+16], eax

; 971  : 		this->_Myres() = _Right._Myres();

	mov	eax, DWORD PTR [ebx+20]
	mov	DWORD PTR [ecx+20], eax

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [ebx+20], 15			; 0000000fH

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [ebx+20], 16			; 00000010H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [ebx+16], 0

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN867@makePath
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
	mov	eax, DWORD PTR [ebx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR [ebx+28]
	mov	DWORD PTR [ecx+28], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 907  : 		else

	jmp	$LN1085@makePath
$LN867@makePath:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

	mov	eax, ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
	mov	eax, DWORD PTR [ebx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	eax, DWORD PTR [ebx+28]
	mov	DWORD PTR [ecx+28], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 907  : 		else

	jmp	$LN1085@makePath
$LN238@makePath:

; 908  : 			{	// push back a non-element
; 909  : 			if (this->_Mylast() == this->_Myend())

	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR __Capacity$1$[ebp], eax
	cmp	ecx, eax
	jne	SHORT $LN902@makePath

; 1048 : 		return (this->_Myend() - this->_Mylast());

	sub	eax, ecx
	sar	eax, 5

; 1627 : 		if (_Unused_capacity() < _Count)

	cmp	eax, 1
	jae	SHORT $LN902@makePath

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	mov	eax, DWORD PTR [edx]
	sub	ecx, eax
	mov	DWORD PTR tv3790[ebp], eax

; 1629 : 			if (max_size() - size() < _Count)

	mov	eax, 134217727				; 07ffffffH

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

	sar	ecx, 5

; 1629 : 			if (max_size() - size() < _Count)

	sub	eax, ecx
	cmp	eax, 1
	jb	$LN1750@makePath

; 1043 : 		return (this->_Myend() - this->_Myfirst());

	mov	edx, DWORD PTR __Capacity$1$[ebp]

; 1631 : 			_Reallocate(_Grow_to(size() + _Count));

	lea	ebx, DWORD PTR [ecx+1]

; 1043 : 		return (this->_Myend() - this->_Myfirst());

	sub	edx, DWORD PTR tv3790[ebp]

; 1588 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

	mov	ecx, 134217727				; 07ffffffH

; 1043 : 		return (this->_Myend() - this->_Myfirst());

	sar	edx, 5

; 1588 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

	mov	eax, edx

; 1043 : 		return (this->_Myend() - this->_Myfirst());

	mov	DWORD PTR __Capacity$1$[ebp], edx

; 1588 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

	shr	eax, 1
	sub	ecx, eax
	add	eax, edx
	xor	edx, edx
	cmp	ecx, DWORD PTR __Capacity$1$[ebp]

; 1631 : 			_Reallocate(_Grow_to(size() + _Count));

	mov	ecx, DWORD PTR _this$GSCopy$1$[ebp]
	cmovae	edx, eax
	cmp	edx, ebx
	cmovae	ebx, edx
	push	ebx
	call	?_Reallocate@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::_Reallocate
	mov	edx, DWORD PTR _this$GSCopy$1$[ebp]
$LN902@makePath:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ebx, DWORD PTR [edx+4]
	test	ebx, ebx
	je	SHORT $LN1085@makePath
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [ebx+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [ebx+16], 0

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [ebx+20], 16			; 00000010H
	jb	SHORT $LN1214@makePath
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jmp	SHORT $LN1215@makePath
$LN1214@makePath:
	mov	eax, ebx
$LN1215@makePath:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 962  : 		if (_Right._Myres() < this->_BUF_SIZE)

	cmp	DWORD PTR $T7[ebp+20], 16		; 00000010H
	jae	SHORT $LN1225@makePath

; 963  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,

	mov	eax, DWORD PTR $T7[ebp+16]
	add	eax, 1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 553  : 		return (_Count == 0 ? _First1

	je	SHORT $LN1226@makePath
	push	eax
	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	push	ebx
	call	DWORD PTR __imp__memmove
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 965  : 		else

	mov	edx, DWORD PTR _this$GSCopy$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 553  : 		return (_Count == 0 ? _First1

	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 965  : 		else

	jmp	SHORT $LN1226@makePath
$LN1225@makePath:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR $T7[ebp]
	mov	DWORD PTR [ebx], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 968  : 			_Right._Bx()._Ptr = pointer();

	mov	DWORD PTR $T7[ebp], 0
$LN1226@makePath:

; 969  : 			}
; 970  : 		this->_Mysize() = _Right._Mysize();

	mov	eax, DWORD PTR $T7[ebp+16]
	mov	DWORD PTR [ebx+16], eax

; 971  : 		this->_Myres() = _Right._Myres();

	mov	eax, DWORD PTR $T7[ebp+20]
	mov	DWORD PTR [ebx+20], eax
	mov	eax, DWORD PTR $T7[ebp+24]

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR $T7[ebp+20], 15		; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR $T7[ebp+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR $T7[ebp], 0
	mov	DWORD PTR [ebx+24], eax
	mov	eax, DWORD PTR $T7[ebp+28]
	mov	DWORD PTR [ebx+28], eax
$LN1085@makePath:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 914  : 			++this->_Mylast();

	add	DWORD PTR [edx+4], 32			; 00000020H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

	mov	eax, DWORD PTR $T7[ebp+20]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1577 :             args_.push_back( index );

	mov	DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

	cmp	eax, 16					; 00000010H
	jb	SHORT $LN1764@makePath
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR $T7[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN1764@makePath:
	mov	ebx, DWORD PTR _end$1$[ebp]
$LN1479@makePath:
	cmp	edi, ebx
	lea	eax, DWORD PTR [edi+1]
	cmove	eax, edi
	mov	edi, eax
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1581 :       }

	jmp	$LN18@makePath
$LN9@makePath:

; 1582 :       else if ( *current == '%' )

	cmp	al, 37					; 00000025H
	jne	SHORT $LN15@makePath
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 214  : 		return (_Ptr == _Right._Ptr);

	cmp	esi, DWORD PTR [ecx+4]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1608 :    if ( itInArg == in.end() )

	je	SHORT $LN1584@makePath

; 1609 :    {
; 1610 :       // Error: missing argument %d
; 1611 :    }
; 1612 :    else if ( (*itInArg)->kind_ != kind )

	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax+28], 2
	jne	SHORT $LN1584@makePath

; 1613 :    {
; 1614 :       // Error: bad argument type
; 1615 :    }
; 1616 :    else
; 1617 :    {
; 1618 :       args_.push_back( **itInArg );

	push	eax
	mov	ecx, edx
	call	?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEXABVPathArgument@Json@@@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::push_back
$LN1584@makePath:

; 1583 :       {
; 1584 :          addPathInArg( path, in, itInArg, PathArgument::kindKey );
; 1585 :          ++current;

	inc	edi
	jmp	$LN18@makePath
$LN15@makePath:

; 1586 :       }
; 1587 :       else if ( *current == '.' )

	cmp	al, 46					; 0000002eH
	jne	SHORT $LN17@makePath

; 1588 :       {
; 1589 :          ++current;

	inc	edi

; 1590 :       }
; 1591 :       else

	jmp	$LN18@makePath
$LN17@makePath:

; 1592 :       {
; 1593 :          const char *beginName = current;

	mov	ecx, edi
	mov	DWORD PTR _beginName$1$[ebp], ecx

; 1594 :          while ( current != end  &&  !strchr( "[.", *current ) )

	cmp	edi, ebx
	je	SHORT $LN8@makePath
	npad	6
$LL7@makePath:
	movsx	eax, BYTE PTR [edi]
	push	eax
	push	OFFSET ??_C@_02GLFAOOJA@?$FL?4?$AA@
	call	DWORD PTR __imp__strchr
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1763@makePath

; 1595 :             ++current;

	inc	edi
	cmp	edi, ebx
	jne	SHORT $LL7@makePath
$LN1763@makePath:
	mov	ecx, DWORD PTR _beginName$1$[ebp]
$LN8@makePath:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR $T6[ebp+20], 15		; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR $T6[ebp+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR $T6[ebp], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 905  : 		if (_First != _Last)

	cmp	ecx, edi
	je	SHORT $LN1740@makePath

; 906  : 			assign(_First, _Last - _First);

	mov	eax, edi
	sub	eax, ecx
	push	eax
	push	ecx
	lea	ecx, DWORD PTR $T6[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN1740@makePath:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1596 :          args_.push_back( std::string( beginName, current ) );

	lea	eax, DWORD PTR $T6[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	call	??0PathArgument@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Json::PathArgument::PathArgument
	mov	ecx, DWORD PTR _this$GSCopy$1$[ebp]
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	call	?push_back@?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAEX$$QAVPathArgument@Json@@@Z ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::push_back
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1PathArgument@Json@@QAE@XZ
	lea	ecx, DWORD PTR $T6[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN18@makePath:

; 1564 :    InArgs::const_iterator itInArg = in.begin();
; 1565 :    while ( current != end )

	cmp	edi, ebx
	je	SHORT $LN1761@makePath
	mov	edx, DWORD PTR _this$GSCopy$1$[ebp]
	mov	ecx, DWORD PTR _in$[ebp]
	jmp	$LL2@makePath
$LN1750@makePath:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1765 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN1767@makePath:
$LN1761@makePath:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1599 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
$LN1766@makePath:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z$0:
	lea	ecx, DWORD PTR $T7[ebp]
	jmp	??1PathArgument@Json@@QAE@XZ
__unwindfunclet$?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z$1:
	lea	ecx, DWORD PTR $T6[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z$2:
	lea	ecx, DWORD PTR $T5[ebp]
	jmp	??1PathArgument@Json@@QAE@XZ
__ehhandler$?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-128]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z ENDP ; Json::Path::makePath
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?make@Path@Json@@QBEAAVValue@2@AAV32@@Z
_TEXT	SEGMENT
_root$ = 8						; size = 4
?make@Path@Json@@QBEAAVValue@2@AAV32@@Z PROC		; Json::Path::make, COMDAT
; _this$ = ecx

; 1692 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	edi, ecx

; 1693 :    Value *node = &root;

	mov	ecx, DWORD PTR _root$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

	mov	esi, DWORD PTR [edi]

; 214  : 		return (_Ptr == _Right._Ptr);

	cmp	esi, DWORD PTR [edi+4]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1694 :    for ( Args::const_iterator it = args_.begin(); it != args_.end(); ++it )

	je	SHORT $LN98@make
$LL4@make:

; 1695 :    {
; 1696 :       const PathArgument &arg = *it;
; 1697 :       if ( arg.kind_ == PathArgument::kindIndex )

	mov	eax, DWORD PTR [esi+28]
	cmp	eax, 1
	jne	SHORT $LN5@make

; 1698 :       {
; 1699 :          if ( !node->isArray() )
; 1700 :          {
; 1701 :             // Error: node is not an array at position ...
; 1702 :          }
; 1703 :          node = &((*node)[arg.index_]);

	push	DWORD PTR [esi+24]
	call	??AValue@Json@@QAEAAV01@I@Z		; Json::Value::operator[]
	jmp	SHORT $LN99@make
$LN5@make:

; 1704 :       }
; 1705 :       else if ( arg.kind_ == PathArgument::kindKey )

	cmp	eax, 2
	jne	SHORT $LN2@make
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 521  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN88@make
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 521  : 		return (this->_BUF_SIZE <= _Myres

	jmp	SHORT $LN89@make
$LN88@make:
	mov	eax, esi
$LN89@make:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1017 :    return resolveReference( key, false );

	push	0
	push	eax
	call	?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z ; Json::Value::resolveReference
$LN99@make:

; 1706 :       {
; 1707 :          if ( !node->isObject() )
; 1708 :          {
; 1709 :             // Error: node is not an object at position...
; 1710 :          }
; 1711 :          node = &((*node)[arg.key_]);

	mov	ecx, eax
$LN2@make:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 113  : 		++_Ptr;

	add	esi, 32					; 00000020H

; 214  : 		return (_Ptr == _Right._Ptr);

	cmp	esi, DWORD PTR [edi+4]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1694 :    for ( Args::const_iterator it = args_.begin(); it != args_.end(); ++it )

	jne	SHORT $LL4@make
$LN98@make:
	pop	edi

; 1712 :       }
; 1713 :    }
; 1714 :    return *node;

	mov	eax, ecx
	pop	esi

; 1715 : }

	pop	ebp
	ret	4
?make@Path@Json@@QBEAAVValue@2@AAV32@@Z ENDP		; Json::Path::make
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?resolve@Path@Json@@QBE?AVValue@2@ABV32@0@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$1$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_root$ = 12						; size = 4
_defaultValue$ = 16					; size = 4
?resolve@Path@Json@@QBE?AVValue@2@ABV32@0@Z PROC	; Json::Path::resolve, COMDAT
; _this$ = ecx

; 1666 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	eax, ecx
	mov	DWORD PTR $T1[ebp], 0
	push	ebx
	push	esi
	push	edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

	mov	esi, DWORD PTR [eax]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1667 :    const Value *node = &root;

	mov	edi, DWORD PTR _root$[ebp]
	mov	DWORD PTR _this$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 214  : 		return (_Ptr == _Right._Ptr);

	cmp	esi, DWORD PTR [eax+4]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1668 :    for ( Args::const_iterator it = args_.begin(); it != args_.end(); ++it )

	je	SHORT $LN3@resolve
	npad	1
$LL4@resolve:

; 1669 :    {
; 1670 :       const PathArgument &arg = *it;
; 1671 :       if ( arg.kind_ == PathArgument::kindIndex )

	mov	eax, DWORD PTR [esi+28]
	cmp	eax, 1
	jne	SHORT $LN5@resolve

; 1315 :    return type_ == nullValue  ||  type_ == arrayValue;

	mov	al, BYTE PTR [edi+8]
	test	al, al
	je	SHORT $LN71@resolve
	cmp	al, 6
	jne	SHORT $LN99@resolve
$LN71@resolve:

; 1057 :    return index < size();

	mov	ebx, DWORD PTR [esi+24]
	mov	ecx, edi
	call	?size@Value@Json@@QBEIXZ		; Json::Value::size
	cmp	ebx, eax

; 1672 :       {
; 1673 :          if ( !node->isArray()  ||  node->isValidIndex( arg.index_ ) )

	jb	SHORT $LN99@resolve

; 1675 :          node = &((*node)[arg.index_]);

	push	ebx
	mov	ecx, edi
	call	??AValue@Json@@QBEABV01@I@Z		; Json::Value::operator[]
	mov	edi, eax
	jmp	SHORT $LN2@resolve
$LN5@resolve:

; 1676 :       }
; 1677 :       else if ( arg.kind_ == PathArgument::kindKey )

	cmp	eax, 2
	jne	SHORT $LN2@resolve

; 1322 :    return type_ == nullValue  ||  type_ == objectValue;

	mov	al, BYTE PTR [edi+8]
	test	al, al
	je	SHORT $LN77@resolve
	cmp	al, 7
	jne	SHORT $LN99@resolve
$LN77@resolve:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 521  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN94@resolve
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 521  : 		return (this->_BUF_SIZE <= _Myres

	jmp	SHORT $LN95@resolve
$LN94@resolve:
	mov	eax, esi
$LN95@resolve:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1091 :    return (*this)[ key.c_str() ];

	push	eax
	mov	ecx, edi
	call	??AValue@Json@@QBEABV01@PBD@Z		; Json::Value::operator[]

; 1678 :       {
; 1679 :          if ( !node->isObject() )
; 1680 :             return defaultValue;
; 1681 :          node = &((*node)[arg.key_]);

	mov	edi, eax

; 1682 :          if ( node == &Value::null )

	cmp	edi, OFFSET ?null@Value@Json@@2V12@B	; Json::Value::null
	je	SHORT $LN99@resolve
$LN2@resolve:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 214  : 		return (_Ptr == _Right._Ptr);

	mov	eax, DWORD PTR _this$1$[ebp]

; 113  : 		++_Ptr;

	add	esi, 32					; 00000020H

; 214  : 		return (_Ptr == _Right._Ptr);

	cmp	esi, DWORD PTR [eax+4]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1668 :    for ( Args::const_iterator it = args_.begin(); it != args_.end(); ++it )

	jne	SHORT $LL4@resolve
$LN3@resolve:

; 1683 :             return defaultValue;
; 1684 :       }
; 1685 :    }
; 1686 :    return *node;

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edi
	call	??0Value@Json@@QAE@ABV01@@Z		; Json::Value::Value
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx

; 1687 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN99@resolve:

; 1674 :             return defaultValue;

	push	DWORD PTR _defaultValue$[ebp]

; 1683 :             return defaultValue;
; 1684 :       }
; 1685 :    }
; 1686 :    return *node;

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Value@Json@@QAE@ABV01@@Z		; Json::Value::Value
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx

; 1687 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?resolve@Path@Json@@QBE?AVValue@2@ABV32@0@Z ENDP	; Json::Path::resolve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?resolve@Path@Json@@QBEABVValue@2@ABV32@@Z
_TEXT	SEGMENT
_key$2 = -24						; size = 8
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_root$ = 8						; size = 4
?resolve@Path@Json@@QBEABVValue@2@ABV32@@Z PROC		; Json::Path::resolve, COMDAT
; _this$ = ecx

; 1633 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?resolve@Path@Json@@QBEABVValue@2@ABV32@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	eax, ecx
	mov	DWORD PTR _this$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

	mov	esi, DWORD PTR [eax]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1634 :    const Value *node = &root;

	mov	edi, DWORD PTR _root$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 214  : 		return (_Ptr == _Right._Ptr);

	cmp	esi, DWORD PTR [eax+4]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1635 :    for ( Args::const_iterator it = args_.begin(); it != args_.end(); ++it )

	je	$LN266@resolve
	npad	5
$LL4@resolve:

; 1636 :    {
; 1637 :       const PathArgument &arg = *it;
; 1638 :       if ( arg.kind_ == PathArgument::kindIndex )

	mov	eax, DWORD PTR [esi+28]
	cmp	eax, 1
	jne	SHORT $LN5@resolve

; 1315 :    return type_ == nullValue  ||  type_ == arrayValue;

	mov	bl, BYTE PTR [edi+8]
	test	bl, bl
	je	SHORT $LN69@resolve
	cmp	bl, 6
	jne	SHORT $LN8@resolve
$LN69@resolve:

; 1057 :    return index < size();

	mov	ecx, edi
	call	?size@Value@Json@@QBEIXZ		; Json::Value::size
$LN8@resolve:

; 1639 :       {
; 1640 :          if ( !node->isArray()  ||  node->isValidIndex( arg.index_ ) )
; 1641 :          {
; 1642 :             // Error: unable to resolve path (array value expected at position...
; 1643 :          }
; 1644 :          node = &((*node)[arg.index_]);

	mov	eax, DWORD PTR [esi+24]

; 999  :    if ( type_ == nullValue )

	test	bl, bl
	jne	SHORT $LN74@resolve

; 1000 :       return null;

	mov	edi, OFFSET ?null@Value@Json@@2V12@B	; Json::Value::null
	jmp	SHORT $LN2@resolve
$LN74@resolve:

; 1001 : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 1002 :    CZString key( index );
; 1003 :    ObjectValues::const_iterator it = value_.map_->find( key );

	mov	edi, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1538 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

	mov	ecx, edi
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 176  :    , index_( index )

	mov	DWORD PTR _key$2[ebp+4], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1538 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

	lea	eax, DWORD PTR _key$2[ebp]
	push	eax
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 175  :    : cstr_( 0 )

	mov	DWORD PTR _key$2[ebp], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1538 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

	call	??$_Lbound@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lbound<Json::Value::CZString>

; 43   : 		: _Ptr(_Pnode)

	mov	ecx, DWORD PTR [edi]

; 336  : 		return (this->_Ptr == _Right._Ptr);

	cmp	eax, ecx

; 1482 : 		return (_Where == end()

	je	SHORT $LN82@resolve
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 222  :    return index_ < other.index_;

	mov	edx, DWORD PTR [esi+24]
	cmp	edx, DWORD PTR [eax+20]
	setl	dl
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1482 : 		return (_Where == end()

	test	dl, dl
	je	SHORT $LN161@resolve
$LN82@resolve:

; 43   : 		: _Ptr(_Pnode)

	mov	eax, ecx
$LN161@resolve:

; 336  : 		return (this->_Ptr == _Right._Ptr);

	cmp	eax, ecx
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1004 :    if ( it == value_.map_->end() )

	jne	SHORT $LN75@resolve

; 200  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 1005 :       return null;

	mov	edi, OFFSET ?null@Value@Json@@2V12@B	; Json::Value::null
	jmp	SHORT $LN2@resolve
$LN75@resolve:

; 1006 :    return (*it).second;

	lea	edi, DWORD PTR [eax+24]

; 200  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 1011 : }

	jmp	SHORT $LN2@resolve
$LN5@resolve:

; 1645 :       }
; 1646 :       else if ( arg.kind_ == PathArgument::kindKey )

	cmp	eax, 2
	jne	SHORT $LN2@resolve
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 521  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN257@resolve
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 521  : 		return (this->_BUF_SIZE <= _Myres

	jmp	SHORT $LN258@resolve
$LN257@resolve:
	mov	eax, esi
$LN258@resolve:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1091 :    return (*this)[ key.c_str() ];

	push	eax
	mov	ecx, edi
	call	??AValue@Json@@QBEABV01@PBD@Z		; Json::Value::operator[]

; 1647 :       {
; 1648 :          if ( !node->isObject() )
; 1649 :          {
; 1650 :             // Error: unable to resolve path (object value expected at position...)
; 1651 :          }
; 1652 :          node = &((*node)[arg.key_]);

	mov	edi, eax
$LN2@resolve:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 214  : 		return (_Ptr == _Right._Ptr);

	mov	eax, DWORD PTR _this$1$[ebp]

; 113  : 		++_Ptr;

	add	esi, 32					; 00000020H

; 214  : 		return (_Ptr == _Right._Ptr);

	cmp	esi, DWORD PTR [eax+4]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1635 :    for ( Args::const_iterator it = args_.begin(); it != args_.end(); ++it )

	jne	$LL4@resolve
$LN266@resolve:

; 1653 :          if ( node == &Value::null )
; 1654 :          {
; 1655 :             // Error: unable to resolve path (object has no member named '' at position...)
; 1656 :          }
; 1657 :       }
; 1658 :    }
; 1659 :    return *node;

	mov	eax, edi

; 1660 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?resolve@Path@Json@@QBEABVValue@2@ABV32@@Z$42:
	call	___std_terminate
	ret	0
__unwindfunclet$?resolve@Path@Json@@QBEABVValue@2@ABV32@@Z$43:
	call	___std_terminate
	ret	0
__ehhandler$?resolve@Path@Json@@QBEABVValue@2@ABV32@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?resolve@Path@Json@@QBEABVValue@2@ABV32@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?resolve@Path@Json@@QBEABVValue@2@ABV32@@Z ENDP		; Json::Path::resolve
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0Path@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVPathArgument@1@1111@Z
_TEXT	SEGMENT
_in$ = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_path$ = 8						; size = 4
$T2 = 12						; size = 4
$T3 = 12						; size = 4
$T4 = 12						; size = 4
$T5 = 12						; size = 4
_a1$ = 12						; size = 4
_a2$ = 16						; size = 4
_a3$ = 20						; size = 4
_a4$ = 24						; size = 4
_a5$ = 28						; size = 4
??0Path@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVPathArgument@1@1111@Z PROC ; Json::Path::Path, COMDAT
; _this$ = ecx

; 1547 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Path@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVPathArgument@1@1111@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	ebx, ecx
	mov	DWORD PTR _this$[ebp], ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 485  : 		: _Myfirst(),

	mov	DWORD PTR [ebx], 0

; 486  : 		_Mylast(),

	mov	DWORD PTR [ebx+4], 0

; 487  : 		_Myend()

	mov	DWORD PTR [ebx+8], 0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1547 : {

	mov	DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 485  : 		: _Myfirst(),

	mov	DWORD PTR _in$[ebp], 0

; 486  : 		_Mylast(),

	mov	DWORD PTR _in$[ebp+4], 0

; 487  : 		_Myend()

	mov	DWORD PTR _in$[ebp+8], 0

; 910  : 				_Reserve(1);

	push	1
	lea	ecx, DWORD PTR _in$[ebp]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1548 :    InArgs in;

	mov	BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 910  : 				_Reserve(1);

	call	?_Reserve@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Reserve
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR _in$[ebp+4]
	test	ecx, ecx
	je	SHORT $LN237@Path
	mov	eax, DWORD PTR _a1$[ebp]
	mov	DWORD PTR [ecx], eax
$LN237@Path:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1550 :    in.push_back( &a2 );

	mov	edi, DWORD PTR _a2$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

	lea	eax, DWORD PTR $T5[ebp]
	mov	edx, DWORD PTR _in$[ebp]

; 914  : 			++this->_Mylast();

	add	ecx, 4
	mov	DWORD PTR _in$[ebp+4], ecx
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1550 :    in.push_back( &a2 );

	mov	DWORD PTR $T5[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

	cmp	eax, ecx
	jae	SHORT $LN254@Path
	cmp	edx, eax
	ja	SHORT $LN254@Path

; 899  : 			size_type _Idx = _STD addressof(_Val) - _Unfancy(this->_Myfirst());

	mov	esi, DWORD PTR _in$[ebp+8]
	mov	edi, eax
	sub	edi, edx
	sar	edi, 2

; 900  : 			if (this->_Mylast() == this->_Myend())

	cmp	ecx, esi
	jne	SHORT $LN256@Path

; 901  : 				_Reserve(1);

	push	1
	lea	ecx, DWORD PTR _in$[ebp]
	call	?_Reserve@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Reserve
	mov	esi, DWORD PTR _in$[ebp+8]
	mov	ecx, DWORD PTR _in$[ebp+4]
	mov	edx, DWORD PTR _in$[ebp]
$LN256@Path:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	ecx, ecx
	je	SHORT $LN467@Path
	mov	eax, DWORD PTR [edx+edi*4]
	mov	DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 907  : 		else

	jmp	SHORT $LN467@Path
$LN254@Path:

; 908  : 			{	// push back a non-element
; 909  : 			if (this->_Mylast() == this->_Myend())

	mov	esi, DWORD PTR _in$[ebp+8]
	cmp	ecx, esi
	jne	SHORT $LN257@Path

; 910  : 				_Reserve(1);

	push	1
	lea	ecx, DWORD PTR _in$[ebp]
	call	?_Reserve@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Reserve
	mov	esi, DWORD PTR _in$[ebp+8]
	mov	ecx, DWORD PTR _in$[ebp+4]
	mov	edx, DWORD PTR _in$[ebp]
$LN257@Path:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	ecx, ecx
	je	SHORT $LN467@Path
	mov	DWORD PTR [ecx], edi
$LN467@Path:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1551 :    in.push_back( &a3 );

	mov	edi, DWORD PTR _a3$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

	lea	eax, DWORD PTR $T4[ebp]

; 914  : 			++this->_Mylast();

	add	ecx, 4
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1551 :    in.push_back( &a3 );

	mov	DWORD PTR $T4[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 914  : 			++this->_Mylast();

	mov	DWORD PTR _in$[ebp+4], ecx

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

	cmp	eax, ecx
	jae	SHORT $LN484@Path
	cmp	edx, eax
	ja	SHORT $LN484@Path

; 899  : 			size_type _Idx = _STD addressof(_Val) - _Unfancy(this->_Myfirst());

	mov	edi, eax
	sub	edi, edx
	sar	edi, 2

; 900  : 			if (this->_Mylast() == this->_Myend())

	cmp	ecx, esi
	jne	SHORT $LN486@Path

; 901  : 				_Reserve(1);

	push	1
	lea	ecx, DWORD PTR _in$[ebp]
	call	?_Reserve@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Reserve
	mov	esi, DWORD PTR _in$[ebp+8]
	mov	ecx, DWORD PTR _in$[ebp+4]
	mov	edx, DWORD PTR _in$[ebp]
$LN486@Path:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	ecx, ecx
	je	SHORT $LN697@Path
	mov	eax, DWORD PTR [edx+edi*4]
	mov	DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 907  : 		else

	jmp	SHORT $LN697@Path
$LN484@Path:

; 908  : 			{	// push back a non-element
; 909  : 			if (this->_Mylast() == this->_Myend())

	cmp	ecx, esi
	jne	SHORT $LN487@Path

; 910  : 				_Reserve(1);

	push	1
	lea	ecx, DWORD PTR _in$[ebp]
	call	?_Reserve@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Reserve
	mov	esi, DWORD PTR _in$[ebp+8]
	mov	ecx, DWORD PTR _in$[ebp+4]
	mov	edx, DWORD PTR _in$[ebp]
$LN487@Path:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	ecx, ecx
	je	SHORT $LN697@Path
	mov	DWORD PTR [ecx], edi
$LN697@Path:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1552 :    in.push_back( &a4 );

	mov	edi, DWORD PTR _a4$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

	lea	eax, DWORD PTR $T3[ebp]

; 914  : 			++this->_Mylast();

	add	ecx, 4
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1552 :    in.push_back( &a4 );

	mov	DWORD PTR $T3[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 914  : 			++this->_Mylast();

	mov	DWORD PTR _in$[ebp+4], ecx

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

	cmp	eax, ecx
	jae	SHORT $LN714@Path
	cmp	edx, eax
	ja	SHORT $LN714@Path

; 899  : 			size_type _Idx = _STD addressof(_Val) - _Unfancy(this->_Myfirst());

	mov	edi, eax
	sub	edi, edx
	sar	edi, 2

; 900  : 			if (this->_Mylast() == this->_Myend())

	cmp	ecx, esi
	jne	SHORT $LN716@Path

; 901  : 				_Reserve(1);

	push	1
	lea	ecx, DWORD PTR _in$[ebp]
	call	?_Reserve@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Reserve
	mov	esi, DWORD PTR _in$[ebp+8]
	mov	ecx, DWORD PTR _in$[ebp+4]
	mov	edx, DWORD PTR _in$[ebp]
$LN716@Path:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	ecx, ecx
	je	SHORT $LN927@Path
	mov	eax, DWORD PTR [edx+edi*4]
	mov	DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 907  : 		else

	jmp	SHORT $LN927@Path
$LN714@Path:

; 908  : 			{	// push back a non-element
; 909  : 			if (this->_Mylast() == this->_Myend())

	cmp	ecx, esi
	jne	SHORT $LN717@Path

; 910  : 				_Reserve(1);

	push	1
	lea	ecx, DWORD PTR _in$[ebp]
	call	?_Reserve@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Reserve
	mov	esi, DWORD PTR _in$[ebp+8]
	mov	ecx, DWORD PTR _in$[ebp+4]
	mov	edx, DWORD PTR _in$[ebp]
$LN717@Path:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	ecx, ecx
	je	SHORT $LN927@Path
	mov	DWORD PTR [ecx], edi
$LN927@Path:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1553 :    in.push_back( &a5 );

	mov	edi, DWORD PTR _a5$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

	lea	eax, DWORD PTR $T2[ebp]

; 914  : 			++this->_Mylast();

	add	ecx, 4
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1553 :    in.push_back( &a5 );

	mov	DWORD PTR $T2[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 914  : 			++this->_Mylast();

	mov	DWORD PTR _in$[ebp+4], ecx

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

	cmp	eax, ecx
	jae	SHORT $LN944@Path
	cmp	edx, eax
	ja	SHORT $LN944@Path

; 899  : 			size_type _Idx = _STD addressof(_Val) - _Unfancy(this->_Myfirst());

	mov	edi, eax
	sub	edi, edx
	sar	edi, 2

; 900  : 			if (this->_Mylast() == this->_Myend())

	cmp	ecx, esi
	jne	SHORT $LN946@Path

; 901  : 				_Reserve(1);

	push	1
	lea	ecx, DWORD PTR _in$[ebp]
	call	?_Reserve@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Reserve
	mov	ecx, DWORD PTR _in$[ebp+4]
	mov	edx, DWORD PTR _in$[ebp]
$LN946@Path:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	ecx, ecx
	je	SHORT $LN1157@Path
	mov	eax, DWORD PTR [edx+edi*4]
	mov	DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 907  : 		else

	jmp	SHORT $LN1157@Path
$LN944@Path:

; 908  : 			{	// push back a non-element
; 909  : 			if (this->_Mylast() == this->_Myend())

	cmp	ecx, esi
	jne	SHORT $LN947@Path

; 910  : 				_Reserve(1);

	push	1
	lea	ecx, DWORD PTR _in$[ebp]
	call	?_Reserve@?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@IAEXI@Z ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::_Reserve
	mov	ecx, DWORD PTR _in$[ebp+4]
$LN947@Path:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	ecx, ecx
	je	SHORT $LN1157@Path
	mov	DWORD PTR [ecx], edi
$LN1157@Path:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1554 :    makePath( path, in );

	lea	eax, DWORD PTR _in$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 914  : 			++this->_Mylast();

	add	ecx, 4
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1554 :    makePath( path, in );

	push	eax
	push	DWORD PTR _path$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 914  : 			++this->_Mylast();

	mov	DWORD PTR _in$[ebp+4], ecx
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1554 :    makePath( path, in );

	mov	ecx, ebx
	call	?makePath@Path@Json@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@4@@Z ; Json::Path::makePath
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1637 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR _in$[ebp]
	test	ecx, ecx
	je	SHORT $LN1275@Path

; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

	mov	eax, DWORD PTR _in$[ebp+8]
	sub	eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

	sar	eax, 2
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	ecx
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN1275@Path:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1555 : }

	mov	eax, ebx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Path@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVPathArgument@1@1111@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$vector@VPathArgument@Json@@V?$allocator@VPathArgument@Json@@@std@@@std@@QAE@XZ ; std::vector<Json::PathArgument,std::allocator<Json::PathArgument> >::~vector<Json::PathArgument,std::allocator<Json::PathArgument> >
__unwindfunclet$??0Path@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVPathArgument@1@1111@Z$1:
	lea	ecx, DWORD PTR _in$[ebp]
	jmp	??1?$vector@PBVPathArgument@Json@@V?$allocator@PBVPathArgument@Json@@@std@@@std@@QAE@XZ ; std::vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >::~vector<Json::PathArgument const *,std::allocator<Json::PathArgument const *> >
__ehhandler$??0Path@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVPathArgument@1@1111@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Path@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVPathArgument@1@1111@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Path@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVPathArgument@1@1111@Z ENDP ; Json::Path::Path
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ??_GPathArgument@Json@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GPathArgument@Json@@QAEPAXI@Z PROC			; Json::PathArgument::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN13@scalar
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN13@scalar:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 15			; 0000000fH

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], 0

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN105@scalar
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jmp	SHORT $LN106@scalar
$LN105@scalar:
	mov	eax, esi
$LN106@scalar:
	test	BYTE PTR ___flags$[ebp], 1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
	je	SHORT $LN112@scalar
	push	32					; 00000020H
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN112@scalar:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GPathArgument@Json@@QAEPAXI@Z ENDP			; Json::PathArgument::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0PathArgument@Json@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0PathArgument@Json@@QAE@$$QAV01@@Z PROC		; Json::PathArgument::PathArgument, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi

; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	mov	esi, DWORD PTR ___that$[ebp]
	push	edi
	mov	edi, ecx
	push	esi

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [edi+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [edi+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	call	?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
	mov	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
	mov	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], eax
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0PathArgument@Json@@QAE@$$QAV01@@Z ENDP		; Json::PathArgument::PathArgument
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0PathArgument@Json@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0PathArgument@Json@@QAE@ABV01@@Z PROC			; Json::PathArgument::PathArgument, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi

; 782  : 		assign(_Right, 0, npos);

	mov	esi, DWORD PTR ___that$[ebp]
	push	edi
	mov	edi, ecx
	push	-1
	push	0
	push	esi

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [edi+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [edi+16], 0
	mov	DWORD PTR _this$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 782  : 		assign(_Right, 0, npos);

	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
	mov	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], eax
	mov	eax, edi
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0PathArgument@Json@@QAE@ABV01@@Z ENDP			; Json::PathArgument::PathArgument
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ??1PathArgument@Json@@QAE@XZ
_TEXT	SEGMENT
??1PathArgument@Json@@QAE@XZ PROC			; Json::PathArgument::~PathArgument, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN9@PathArgume
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN9@PathArgume:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 15			; 0000000fH

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], 0

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN101@PathArgume
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
	ret	0
$LN101@PathArgume:
	mov	BYTE PTR [esi], 0
	pop	esi
	ret	0
??1PathArgument@Json@@QAE@XZ ENDP			; Json::PathArgument::~PathArgument
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0PathArgument@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_key$ = 8						; size = 4
??0PathArgument@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::PathArgument::PathArgument, COMDAT
; _this$ = ecx

; 1535 : {

	push	ebp
	mov	ebp, esp
	push	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 521  : 		return (this->_BUF_SIZE <= _Myres

	mov	edx, DWORD PTR _key$[ebp]
	push	esi
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1535 : {

	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 521  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [edx+20], 16			; 00000010H
	jb	SHORT $LN17@PathArgume
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	edx, DWORD PTR [edx]
$LN17@PathArgume:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [esi], 0

; 523  : 		return (*_First == 0 ? 0

	cmp	BYTE PTR [edx], 0
	jne	SHORT $LN135@PathArgume
	xor	ecx, ecx
	jmp	SHORT $LN136@PathArgume
$LN135@PathArgume:
	mov	ecx, edx
	push	edi
	lea	edi, DWORD PTR [ecx+1]
$LL137@PathArgume:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL137@PathArgume
	sub	ecx, edi
	pop	edi
$LN136@PathArgume:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	ecx
	push	edx
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1534 :    , kind_( kindKey )

	mov	DWORD PTR [esi+28], 2

; 1536 : }

	mov	eax, esi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0PathArgument@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::PathArgument::PathArgument
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0PathArgument@Json@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_key$ = 8						; size = 4
??0PathArgument@Json@@QAE@PBD@Z PROC			; Json::PathArgument::PathArgument, COMDAT
; _this$ = ecx

; 1528 : {

	push	ebp
	mov	ebp, esp
	push	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 523  : 		return (*_First == 0 ? 0

	mov	edx, DWORD PTR _key$[ebp]
	push	esi
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1528 : {

	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [esi], 0

; 523  : 		return (*_First == 0 ? 0

	cmp	BYTE PTR [edx], 0
	jne	SHORT $LN118@PathArgume
	xor	ecx, ecx
	jmp	SHORT $LN119@PathArgume
$LN118@PathArgume:
	mov	ecx, edx
	push	edi
	lea	edi, DWORD PTR [ecx+1]
	npad	3
$LL120@PathArgume:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL120@PathArgume
	sub	ecx, edi
	pop	edi
$LN119@PathArgume:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	ecx
	push	edx
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1527 :    , kind_( kindKey )

	mov	DWORD PTR [esi+28], 2

; 1529 : }

	mov	eax, esi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0PathArgument@Json@@QAE@PBD@Z ENDP			; Json::PathArgument::PathArgument
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0PathArgument@Json@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??0PathArgument@Json@@QAE@I@Z PROC			; Json::PathArgument::PathArgument, COMDAT
; _this$ = ecx

; 1521 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1519 :    : index_( index )

	mov	eax, DWORD PTR _index$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [ecx], 0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1519 :    : index_( index )

	mov	DWORD PTR [ecx+24], eax

; 1522 : }

	mov	eax, ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR [ecx+28], 1
	mov	esp, ebp
	pop	ebp
	ret	4
??0PathArgument@Json@@QAE@I@Z ENDP			; Json::PathArgument::PathArgument
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0PathArgument@Json@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0PathArgument@Json@@QAE@XZ PROC			; Json::PathArgument::PathArgument, COMDAT
; _this$ = ecx

; 1514 : {

	push	ebp
	mov	ebp, esp
	push	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [ecx+20], 15			; 0000000fH
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1515 : }

	mov	eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [ecx], 0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1514 : {

	mov	DWORD PTR _this$[ebp], ecx

; 1513 :    : kind_( kindNone )

	mov	DWORD PTR [ecx+28], 0

; 1515 : }

	mov	esp, ebp
	pop	ebp
	ret	0
??0PathArgument@Json@@QAE@XZ ENDP			; Json::PathArgument::PathArgument
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??_ECommentInfo@Value@Json@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECommentInfo@Value@Json@@QAEPAXI@Z PROC		; Json::Value::CommentInfo::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??_ECommentInfo@Value@Json@@QAEPAXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	ebx, DWORD PTR ___flags$[ebp]
	test	bl, 2
	je	SHORT $LN2@vector
	push	OFFSET ??1CommentInfo@Value@Json@@QAE@XZ ; Json::Value::CommentInfo::~CommentInfo
	push	DWORD PTR [esi-4]
	lea	edi, DWORD PTR [esi-4]
	push	4
	push	esi
	call	??_M@YGXPAXIIP6EX0@Z@Z
	test	bl, 1
	je	SHORT $LN3@vector
	mov	ecx, DWORD PTR [edi]
	lea	ecx, DWORD PTR [ecx*4+4]
	push	ecx
	push	edi
	call	??_V@YAXPAXI@Z				; operator delete[]
	add	esp, 8
$LN3@vector:
	mov	eax, edi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN2@vector:

; 145  :    if ( comment_ )

	cmp	DWORD PTR [esi], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	je	SHORT $LN7@vector

; 146  :       valueAllocator()->releaseStringValue( comment_ );

	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+16]
$LN7@vector:
	test	bl, 1
	je	SHORT $LN4@vector
	push	4
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN4@vector:
	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_ECommentInfo@Value@Json@@QAEPAXI@Z$0:
	call	___std_terminate
	ret	0
__ehhandler$??_ECommentInfo@Value@Json@@QAEPAXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??_ECommentInfo@Value@Json@@QAEPAXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??_ECommentInfo@Value@Json@@QAEPAXI@Z ENDP		; Json::Value::CommentInfo::`vector deleting destructor'
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_exception.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\stdexcept
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?setComment@CommentInfo@Value@Json@@QAEXPBD@Z
_TEXT	SEGMENT
$T1 = -20						; size = 12
__InitData$2 = -8					; size = 8
_text$ = 8						; size = 4
?setComment@CommentInfo@Value@Json@@QAEXPBD@Z PROC	; Json::Value::CommentInfo::setComment, COMDAT
; _this$ = ecx

; 152  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	esi, ecx
	push	edi

; 153  :    if ( comment_ )

	cmp	DWORD PTR [esi], 0
	je	SHORT $LN2@setComment

; 154  :       valueAllocator()->releaseStringValue( comment_ );

	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+16]
$LN2@setComment:

; 156  :    JSON_ASSERT_MESSAGE( text[0]=='\0' || text[0]=='/', "Comments must start with /");

	mov	edi, DWORD PTR _text$[ebp]
	mov	al, BYTE PTR [edi]
	test	al, al
	je	SHORT $LN3@setComment
	cmp	al, 47					; 0000002fH
	jne	SHORT $LN10@setComment
$LN3@setComment:

; 157  :    // It seems that /**/ style comments are acceptable as well.
; 158  :    comment_ = valueAllocator()->duplicateStringValue( text );

	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	-1
	push	edi
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+12]
	pop	edi
	mov	DWORD PTR [esi], eax
	pop	esi

; 159  : }

	mov	esp, ebp
	pop	ebp
	ret	4
$LN10@setComment:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_exception.h

; 55   :         __std_exception_copy(&_InitData, &_Data);

	lea	eax, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR $T1[ebp], OFFSET ??_7exception@std@@6B@
	push	eax
	lea	eax, DWORD PTR __InitData$2[ebp]
	mov	DWORD PTR __InitData$2[ebp], OFFSET ??_C@_0BL@DKGNIMPN@Comments?5must?5start?5with?5?1?$AA@
	xorps	xmm0, xmm0

; 54   :         __std_exception_data _InitData = { _Message, true };

	mov	BYTE PTR __InitData$2[ebp+4], 1

; 55   :         __std_exception_copy(&_InitData, &_Data);

	push	eax
	movq	QWORD PTR $T1[ebp+4], xmm0
	call	DWORD PTR __imp____std_exception_copy
	add	esp, 8
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\stdexcept

; 168  : 		{	// construct from message string

	mov	DWORD PTR $T1[ebp], OFFSET ??_7runtime_error@std@@6B@
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 156  :    JSON_ASSERT_MESSAGE( text[0]=='\0' || text[0]=='/', "Comments must start with /");

	lea	eax, DWORD PTR $T1[ebp]
	push	OFFSET __TI2?AVruntime_error@std@@
	push	eax
	call	__CxxThrowException@8
$LN12@setComment:
$LN9@setComment:
	int	3
?setComment@CommentInfo@Value@Json@@QAEXPBD@Z ENDP	; Json::Value::CommentInfo::setComment
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??1CommentInfo@Value@Json@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CommentInfo@Value@Json@@QAE@XZ PROC			; Json::Value::CommentInfo::~CommentInfo, COMDAT
; _this$ = ecx

; 144  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CommentInfo@Value@Json@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx

; 145  :    if ( comment_ )

	cmp	DWORD PTR [esi], 0
	je	SHORT $LN2@CommentInf

; 146  :       valueAllocator()->releaseStringValue( comment_ );

	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+16]
$LN2@CommentInf:

; 147  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CommentInfo@Value@Json@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CommentInfo@Value@Json@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CommentInfo@Value@Json@@QAE@XZ ENDP			; Json::Value::CommentInfo::~CommentInfo
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0CommentInfo@Value@Json@@QAE@XZ
_TEXT	SEGMENT
??0CommentInfo@Value@Json@@QAE@XZ PROC			; Json::Value::CommentInfo::CommentInfo, COMDAT
; _this$ = ecx

; 139  :    : comment_( 0 )

	mov	DWORD PTR [ecx], 0

; 141  : }

	mov	eax, ecx
	ret	0
??0CommentInfo@Value@Json@@QAE@XZ ENDP			; Json::Value::CommentInfo::CommentInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z
_TEXT	SEGMENT
_defaultValue$ = -64					; size = 24
$T2 = -40						; size = 16
_actualKey$ = -24					; size = 8
$T3 = -20						; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T4 = 8							; size = 4
_key$ = 8						; size = 4
_allocate$1$ = 12					; size = 4
_isStatic$ = 12						; size = 1
?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z PROC	; Json::Value::resolveReference, COMDAT
; _this$ = ecx

; 1024 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	DWORD PTR _this$1$[ebp], esi

; 1025 :    JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue );
; 1026 :    if ( type_ == nullValue )

	cmp	BYTE PTR [esi+8], 0
	jne	SHORT $LN2@resolveRef
	mov	eax, DWORD PTR $T2[ebp+8]
	and	eax, -505				; fffffe07H

; 271  :    , comments_( 0 )

	mov	DWORD PTR $T2[ebp+12], 0
	or	eax, 7

; 272  : # ifdef JSON_VALUE_USE_INTERNAL_MAP
; 273  :    , itemIsUsed_( 0 )
; 274  : #endif
; 275  : {
; 276  :    switch ( type )
; 277  :    {
; 278  :    case nullValue:
; 279  :       break;
; 280  :    case intValue:
; 281  :    case uintValue:
; 282  :       value_.int_ = 0;
; 283  :       break;
; 284  :    case realValue:
; 285  :       value_.real_ = 0.0;
; 286  :       break;
; 287  :    case stringValue:
; 288  :       value_.string_ = 0;
; 289  :       break;
; 290  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 291  :    case arrayValue:
; 292  :    case objectValue:
; 293  :       value_.map_ = new ObjectValues();

	push	8
	mov	DWORD PTR $T2[ebp+8], eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	eax, eax
	je	SHORT $LN20@resolveRef
	mov	ecx, eax
	call	??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
	jmp	SHORT $LN21@resolveRef
$LN20@resolveRef:
	xor	eax, eax
$LN21@resolveRef:
	mov	DWORD PTR $T2[ebp], eax

; 1027 :       *this = Value( objectValue );

	lea	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	push	eax
	mov	ecx, esi
	call	??4Value@Json@@QAEAAV01@ABV01@@Z	; Json::Value::operator=
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value
$LN2@resolveRef:

; 181  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 

	mov	ebx, DWORD PTR _key$[ebp]

; 1029 :    CZString actualKey( key, isStatic ? CZString::noDuplication 

	xor	ecx, ecx
	cmp	BYTE PTR _isStatic$[ebp], cl
	mov	eax, 2

; 181  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 

	mov	DWORD PTR _actualKey$[ebp], ebx

; 1029 :    CZString actualKey( key, isStatic ? CZString::noDuplication 

	cmovne	eax, ecx
	mov	DWORD PTR _allocate$1$[ebp], eax

; 183  :    , index_( allocate )

	mov	DWORD PTR _actualKey$[ebp+4], eax

; 1030 :                                      : CZString::duplicateOnCopy );
; 1031 :    ObjectValues::iterator it = value_.map_->lower_bound( actualKey );

	mov	edi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1538 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

	lea	eax, DWORD PTR _actualKey$[ebp]
	push	eax
	mov	ecx, edi
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1029 :    CZString actualKey( key, isStatic ? CZString::noDuplication 

	mov	DWORD PTR __$EHRec$[ebp+8], 2
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1538 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

	call	??$_Lbound@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lbound<Json::Value::CZString>

; 43   : 		: _Ptr(_Pnode)

	mov	esi, eax

; 336  : 		return (this->_Ptr == _Right._Ptr);

	cmp	esi, DWORD PTR [edi]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1032 :    if ( it != value_.map_->end()  &&  (*it).first == actualKey )

	je	SHORT $LN3@resolveRef

; 228  :    if ( cstr_ )

	mov	eax, DWORD PTR [esi+16]
	test	eax, eax
	je	SHORT $LN89@resolveRef

; 229  :       return strcmp( cstr_, other.cstr_ ) == 0;

	mov	ecx, ebx
$LL144@resolveRef:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN145@resolveRef
	test	dl, dl
	je	SHORT $LN146@resolveRef
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN145@resolveRef
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL144@resolveRef
$LN146@resolveRef:
	xor	eax, eax
	test	eax, eax
	mov	eax, DWORD PTR _allocate$1$[ebp]
	jmp	SHORT $LN151@resolveRef
$LN145@resolveRef:
	sbb	eax, eax
	or	eax, 1
	test	eax, eax
	mov	eax, DWORD PTR _allocate$1$[ebp]
	jmp	SHORT $LN151@resolveRef
$LN89@resolveRef:

; 230  :    return index_ == other.index_;

	mov	eax, DWORD PTR _allocate$1$[ebp]
	cmp	DWORD PTR [esi+20], eax
$LN151@resolveRef:
	sete	cl

; 1032 :    if ( it != value_.map_->end()  &&  (*it).first == actualKey )

	test	cl, cl
	jne	$LN138@resolveRef
$LN3@resolveRef:

; 188  : : cstr_( other.index_ != noDuplication &&  other.cstr_ != 0

	mov	eax, DWORD PTR _allocate$1$[ebp]
	test	eax, eax
	je	SHORT $LN106@resolveRef
	test	ebx, ebx
	je	SHORT $LN106@resolveRef
	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	ebx
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+4]
	mov	ecx, eax
	mov	eax, DWORD PTR _allocate$1$[ebp]
	jmp	SHORT $LN107@resolveRef
$LN106@resolveRef:
	mov	ecx, ebx
$LN107@resolveRef:
	mov	DWORD PTR _defaultValue$[ebp], ecx

; 189  :                 ?  valueAllocator()->makeMemberName( other.cstr_ )
; 190  :                 : other.cstr_ )
; 191  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	test	ebx, ebx
	je	SHORT $LN108@resolveRef
	xor	ecx, ecx
	test	eax, eax
	setne	cl
	jmp	SHORT $LN109@resolveRef
$LN108@resolveRef:
	mov	ecx, eax
$LN109@resolveRef:
	mov	DWORD PTR _defaultValue$[ebp+4], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 171  : 				second(_STD forward<_Other2>(_Val2))

	push	OFFSET ?null@Value@Json@@2V12@B		; Json::Value::null
	lea	ecx, DWORD PTR _defaultValue$[ebp+8]
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	call	??0Value@Json@@QAE@ABV01@@Z		; Json::Value::Value
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1036 :    it = value_.map_->insert( it, defaultValue );

	mov	edi, DWORD PTR _this$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1084 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

	lea	eax, DWORD PTR _defaultValue$[ebp]
	push	eax
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1035 :    ObjectValues::value_type defaultValue( actualKey, null );

	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 1036 :    it = value_.map_->insert( it, defaultValue );

	mov	edi, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1084 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

	mov	ecx, edi
	call	??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>

; 1085 : 		return (_Insert_hint(_Where,

	push	eax

; 603  : 		return ((reference)_Pnode->_Myval);

	add	eax, 16					; 00000010H

; 1085 : 		return (_Insert_hint(_Where,

	mov	ecx, edi
	push	eax
	push	esi
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??$_Insert_hint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_hint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
	lea	ecx, DWORD PTR _defaultValue$[ebp+8]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 198  :    if ( cstr_  &&  index_ == duplicate )

	cmp	DWORD PTR _defaultValue$[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	je	SHORT $LN137@resolveRef
	cmp	DWORD PTR _defaultValue$[ebp+4], 1
	jne	SHORT $LN137@resolveRef

; 199  :       valueAllocator()->releaseMemberName( const_cast<char *>( cstr_ ) );

	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	DWORD PTR _defaultValue$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+8]
$LN137@resolveRef:
	mov	esi, DWORD PTR $T4[ebp]
	mov	eax, DWORD PTR _allocate$1$[ebp]
$LN138@resolveRef:

; 197  : {

	add	esi, 24					; 00000018H
	mov	DWORD PTR __$EHRec$[ebp+8], 6

; 198  :    if ( cstr_  &&  index_ == duplicate )

	test	ebx, ebx
	je	SHORT $LN148@resolveRef
	cmp	eax, 1
	jne	SHORT $LN148@resolveRef

; 199  :       valueAllocator()->releaseMemberName( const_cast<char *>( cstr_ ) );

	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	ebx
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	call	DWORD PTR [edx+8]
$LN148@resolveRef:

; 1037 :    Value &value = (*it).second;
; 1038 :    return value;

	mov	eax, esi

; 1039 : #else
; 1040 :    return value_.map_->resolveReference( key, isStatic );
; 1041 : #endif
; 1042 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z$3:
	push	8
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z$0:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1Value@Json@@QAE@XZ			; Json::Value::~Value
__unwindfunclet$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z$1:
	lea	ecx, DWORD PTR _actualKey$[ebp]
	jmp	??1CZString@Value@Json@@QAE@XZ		; Json::Value::CZString::~CZString
__unwindfunclet$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z$15:
	lea	ecx, DWORD PTR _defaultValue$[ebp]
	jmp	??1CZString@Value@Json@@QAE@XZ		; Json::Value::CZString::~CZString
__unwindfunclet$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z$2:
	lea	ecx, DWORD PTR _defaultValue$[ebp]
	jmp	??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ
__unwindfunclet$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z$22:
	call	___std_terminate
	ret	0
__unwindfunclet$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z$23:
	call	___std_terminate
	ret	0
__ehhandler$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z ENDP	; Json::Value::resolveReference
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?end@Value@Json@@QAE?AVValueIterator@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@Value@Json@@QAE?AVValueIterator@2@XZ PROC		; Json::Value::end, COMDAT
; _this$ = ecx

; 1475 : {

	push	ebp
	mov	ebp, esp

; 1476 :    switch ( type_ )

	movsx	eax, BYTE PTR [ecx+8]
	add	eax, -6					; fffffffaH
	cmp	eax, 1
	ja	SHORT $LN5@end

; 1477 :    {
; 1478 : #ifdef JSON_VALUE_USE_INTERNAL_MAP
; 1479 :    case arrayValue:
; 1480 :       if ( value_.array_ )
; 1481 :       {
; 1482 :          ValueInternalArray::IteratorState it;
; 1483 :          value_.array_->makeEndIterator( it );
; 1484 :          return iterator( it );
; 1485 :       }
; 1486 :       break;
; 1487 :    case objectValue:
; 1488 :       if ( value_.map_ )
; 1489 :       {
; 1490 :          ValueInternalMap::IteratorState it;
; 1491 :          value_.map_->makeEndIterator( it );
; 1492 :          return iterator( it );
; 1493 :       }
; 1494 :       break;
; 1495 : #else
; 1496 :    case arrayValue:
; 1497 :    case objectValue:
; 1498 :       if ( value_.map_ )

	mov	ecx, DWORD PTR [ecx]
	test	ecx, ecx
	je	SHORT $LN5@end
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl

; 30   :    : current_( current )

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 31   :    , isNull_( false )

	mov	BYTE PTR [eax+4], 0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1506 : }

	pop	ebp
	ret	4
$LN5@end:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 38   : 		: _Ptr()

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], 0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl

; 16   :    , isNull_( true )

	mov	BYTE PTR [eax+4], 1
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1506 : }

	pop	ebp
	ret	4
?end@Value@Json@@QAE?AVValueIterator@2@XZ ENDP		; Json::Value::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?begin@Value@Json@@QAE?AVValueIterator@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@Value@Json@@QAE?AVValueIterator@2@XZ PROC	; Json::Value::begin, COMDAT
; _this$ = ecx

; 1440 : {

	push	ebp
	mov	ebp, esp

; 1441 :    switch ( type_ )

	movsx	eax, BYTE PTR [ecx+8]
	add	eax, -6					; fffffffaH
	cmp	eax, 1
	ja	SHORT $LN5@begin

; 1442 :    {
; 1443 : #ifdef JSON_VALUE_USE_INTERNAL_MAP
; 1444 :    case arrayValue:
; 1445 :       if ( value_.array_ )
; 1446 :       {
; 1447 :          ValueInternalArray::IteratorState it;
; 1448 :          value_.array_->makeBeginIterator( it );
; 1449 :          return iterator( it );
; 1450 :       }
; 1451 :       break;
; 1452 :    case objectValue:
; 1453 :       if ( value_.map_ )
; 1454 :       {
; 1455 :          ValueInternalMap::IteratorState it;
; 1456 :          value_.map_->makeBeginIterator( it );
; 1457 :          return iterator( it );
; 1458 :       }
; 1459 :       break;
; 1460 : #else
; 1461 :    case arrayValue:
; 1462 :    case objectValue:
; 1463 :       if ( value_.map_ )

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN5@begin
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	eax, DWORD PTR [eax]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl

; 30   :    : current_( current )

	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx

; 31   :    , isNull_( false )

	mov	BYTE PTR [eax+4], 0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1471 : }

	pop	ebp
	ret	4
$LN5@begin:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 38   : 		: _Ptr()

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], 0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl

; 16   :    , isNull_( true )

	mov	BYTE PTR [eax+4], 1
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1471 : }

	pop	ebp
	ret	4
?begin@Value@Json@@QAE?AVValueIterator@2@XZ ENDP	; Json::Value::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?end@Value@Json@@QBE?AVValueConstIterator@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@Value@Json@@QBE?AVValueConstIterator@2@XZ PROC	; Json::Value::end, COMDAT
; _this$ = ecx

; 1404 : {

	push	ebp
	mov	ebp, esp

; 1405 :    switch ( type_ )

	movsx	eax, BYTE PTR [ecx+8]
	add	eax, -6					; fffffffaH
	cmp	eax, 1
	ja	SHORT $LN5@end

; 1406 :    {
; 1407 : #ifdef JSON_VALUE_USE_INTERNAL_MAP
; 1408 :    case arrayValue:
; 1409 :       if ( value_.array_ )
; 1410 :       {
; 1411 :          ValueInternalArray::IteratorState it;
; 1412 :          value_.array_->makeEndIterator( it );
; 1413 :          return const_iterator( it );
; 1414 :       }
; 1415 :       break;
; 1416 :    case objectValue:
; 1417 :       if ( value_.map_ )
; 1418 :       {
; 1419 :          ValueInternalMap::IteratorState it;
; 1420 :          value_.map_->makeEndIterator( it );
; 1421 :          return const_iterator( it );
; 1422 :       }
; 1423 :       break;
; 1424 : #else
; 1425 :    case arrayValue:
; 1426 :    case objectValue:
; 1427 :       if ( value_.map_ )

	mov	ecx, DWORD PTR [ecx]
	test	ecx, ecx
	je	SHORT $LN5@end
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl

; 30   :    : current_( current )

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 31   :    , isNull_( false )

	mov	BYTE PTR [eax+4], 0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1435 : }

	pop	ebp
	ret	4
$LN5@end:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 38   : 		: _Ptr()

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], 0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl

; 16   :    , isNull_( true )

	mov	BYTE PTR [eax+4], 1
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1435 : }

	pop	ebp
	ret	4
?end@Value@Json@@QBE?AVValueConstIterator@2@XZ ENDP	; Json::Value::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?begin@Value@Json@@QBE?AVValueConstIterator@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@Value@Json@@QBE?AVValueConstIterator@2@XZ PROC	; Json::Value::begin, COMDAT
; _this$ = ecx

; 1369 : {

	push	ebp
	mov	ebp, esp

; 1370 :    switch ( type_ )

	movsx	eax, BYTE PTR [ecx+8]
	add	eax, -6					; fffffffaH
	cmp	eax, 1
	ja	SHORT $LN5@begin

; 1371 :    {
; 1372 : #ifdef JSON_VALUE_USE_INTERNAL_MAP
; 1373 :    case arrayValue:
; 1374 :       if ( value_.array_ )
; 1375 :       {
; 1376 :          ValueInternalArray::IteratorState it;
; 1377 :          value_.array_->makeBeginIterator( it );
; 1378 :          return const_iterator( it );
; 1379 :       }
; 1380 :       break;
; 1381 :    case objectValue:
; 1382 :       if ( value_.map_ )
; 1383 :       {
; 1384 :          ValueInternalMap::IteratorState it;
; 1385 :          value_.map_->makeBeginIterator( it );
; 1386 :          return const_iterator( it );
; 1387 :       }
; 1388 :       break;
; 1389 : #else
; 1390 :    case arrayValue:
; 1391 :    case objectValue:
; 1392 :       if ( value_.map_ )

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN5@begin
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	eax, DWORD PTR [eax]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl

; 30   :    : current_( current )

	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx

; 31   :    , isNull_( false )

	mov	BYTE PTR [eax+4], 0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1400 : }

	pop	ebp
	ret	4
$LN5@begin:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 38   : 		: _Ptr()

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], 0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_valueiterator.inl

; 16   :    , isNull_( true )

	mov	BYTE PTR [eax+4], 1
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1400 : }

	pop	ebp
	ret	4
?begin@Value@Json@@QBE?AVValueConstIterator@2@XZ ENDP	; Json::Value::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?toStyledString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
$T2 = -96						; size = 4
_writer$ = -92						; size = 76
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?toStyledString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; Json::Value::toStyledString, COMDAT
; _this$ = ecx

; 1361 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?toStyledString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]

; 1362 :    StyledWriter writer;

	lea	ecx, DWORD PTR _writer$[ebp]
	mov	DWORD PTR $T2[ebp], 0
	call	??0StyledWriter@Json@@QAE@XZ		; Json::StyledWriter::StyledWriter

; 1363 :    return writer.write( *this );

	push	esi
	push	edi
	lea	ecx, DWORD PTR _writer$[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	call	?write@StyledWriter@Json@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVValue@2@@Z ; Json::StyledWriter::write
	lea	ecx, DWORD PTR _writer$[ebp]
	call	??1StyledWriter@Json@@UAE@XZ		; Json::StyledWriter::~StyledWriter
	mov	eax, edi

; 1364 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?toStyledString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0:
	lea	ecx, DWORD PTR _writer$[ebp]
	jmp	??1StyledWriter@Json@@UAE@XZ		; Json::StyledWriter::~StyledWriter
__ehhandler$?toStyledString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?toStyledString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?toStyledString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; Json::Value::toStyledString
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?getComment@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_placement$ = 12					; size = 4
?getComment@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z PROC ; Json::Value::getComment, COMDAT
; _this$ = ecx

; 1352 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1347 :    return comments_ != 0  &&  comments_[placement].comment_ != 0;

	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR $T1[ebp], 0
	push	esi
	test	edx, edx
	je	SHORT $LN2@getComment
	mov	eax, DWORD PTR _placement$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	test	edx, edx
	je	SHORT $LN2@getComment
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [esi+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [esi], 0

; 523  : 		return (*_First == 0 ? 0

	cmp	BYTE PTR [edx], 0
	jne	SHORT $LN124@getComment
	xor	ecx, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	ecx
	push	edx
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1355 :    return "";

	mov	eax, esi
	pop	esi

; 1356 : }

	mov	esp, ebp
	pop	ebp
	ret	8
$LN124@getComment:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 523  : 		return (*_First == 0 ? 0

	mov	ecx, edx
	push	edi
	lea	edi, DWORD PTR [ecx+1]
$LL243@getComment:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL243@getComment
	sub	ecx, edi
	pop	edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	ecx
	push	edx
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1355 :    return "";

	mov	eax, esi
	pop	esi

; 1356 : }

	mov	esp, ebp
	pop	ebp
	ret	8
$LN2@getComment:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]

; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	ecx, esi
	push	0
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1355 :    return "";

	mov	eax, esi
	pop	esi

; 1356 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?getComment@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ENDP ; Json::Value::getComment
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?hasComment@Value@Json@@QBE_NW4CommentPlacement@2@@Z
_TEXT	SEGMENT
_placement$ = 8						; size = 4
?hasComment@Value@Json@@QBE_NW4CommentPlacement@2@@Z PROC ; Json::Value::hasComment, COMDAT
; _this$ = ecx

; 1346 : {

	push	ebp
	mov	ebp, esp

; 1347 :    return comments_ != 0  &&  comments_[placement].comment_ != 0;

	mov	ecx, DWORD PTR [ecx+12]
	test	ecx, ecx
	je	SHORT $LN3@hasComment
	mov	eax, DWORD PTR _placement$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN3@hasComment
	mov	al, 1

; 1348 : }

	pop	ebp
	ret	4
$LN3@hasComment:

; 1347 :    return comments_ != 0  &&  comments_[placement].comment_ != 0;

	xor	al, al

; 1348 : }

	pop	ebp
	ret	4
?hasComment@Value@Json@@QBE_NW4CommentPlacement@2@@Z ENDP ; Json::Value::hasComment
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?setComment@Value@Json@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z
_TEXT	SEGMENT
_comment$ = 8						; size = 4
_placement$ = 12					; size = 4
?setComment@Value@Json@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z PROC ; Json::Value::setComment, COMDAT
; _this$ = ecx

; 1339 : {

	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 521  : 		return (this->_BUF_SIZE <= _Myres

	mov	eax, DWORD PTR _comment$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN17@setComment
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [eax]
$LN17@setComment:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1340 :    setComment( comment.c_str(), placement );

	mov	DWORD PTR _comment$[ebp], eax

; 1341 : }

	pop	ebp

; 1340 :    setComment( comment.c_str(), placement );

	jmp	?setComment@Value@Json@@QAEXPBDW4CommentPlacement@2@@Z ; Json::Value::setComment
?setComment@Value@Json@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4CommentPlacement@2@@Z ENDP ; Json::Value::setComment
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?setComment@Value@Json@@QAEXPBDW4CommentPlacement@2@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_comment$ = 8						; size = 4
_placement$ = 12					; size = 4
?setComment@Value@Json@@QAEXPBDW4CommentPlacement@2@@Z PROC ; Json::Value::setComment, COMDAT
; _this$ = ecx

; 1329 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?setComment@Value@Json@@QAEXPBDW4CommentPlacement@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	edi, ecx

; 1330 :    if ( !comments_ )

	cmp	DWORD PTR [edi+12], 0
	jne	SHORT $LN2@setComment

; 1331 :       comments_ = new CommentInfo[numberOfCommentPlacement];

	push	16					; 00000010H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	eax, eax
	je	SHORT $LN4@setComment
	push	OFFSET ??1CommentInfo@Value@Json@@QAE@XZ ; Json::Value::CommentInfo::~CommentInfo
	push	OFFSET ??0CommentInfo@Value@Json@@QAE@XZ ; Json::Value::CommentInfo::CommentInfo
	push	3
	lea	esi, DWORD PTR [eax+4]
	mov	DWORD PTR [eax], 3
	push	4
	push	esi
	call	??_L@YGXPAXIIP6EX0@Z1@Z
	jmp	SHORT $LN5@setComment
$LN4@setComment:
	xor	esi, esi
$LN5@setComment:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	DWORD PTR [edi+12], esi
$LN2@setComment:

; 1332 :    comments_[placement].setComment( comment );

	mov	ecx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR _placement$[ebp]
	push	DWORD PTR _comment$[ebp]
	lea	ecx, DWORD PTR [ecx+eax*4]
	call	?setComment@CommentInfo@Value@Json@@QAEXPBD@Z ; Json::Value::CommentInfo::setComment

; 1333 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?setComment@Value@Json@@QAEXPBDW4CommentPlacement@2@@Z$0:
	push	16					; 00000010H
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??_V@YAXPAXI@Z				; operator delete[]
	add	esp, 8
	ret	0
__ehhandler$?setComment@Value@Json@@QAEXPBDW4CommentPlacement@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?setComment@Value@Json@@QAEXPBDW4CommentPlacement@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?setComment@Value@Json@@QAEXPBDW4CommentPlacement@2@@Z ENDP ; Json::Value::setComment
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ
_TEXT	SEGMENT
$T2 = -60						; size = 4
___$ReturnUdt$GSCopy$1$ = -56				; size = 4
_members$ = -52						; size = 12
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ PROC ; Json::Value::getMemberNames, COMDAT
; _this$ = ecx

; 1206 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	edi, ecx

; 1207 :    JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue );
; 1208 :    if ( type_ == nullValue )

	cmp	BYTE PTR [edi+8], 0
	mov	ebx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], ebx
	mov	DWORD PTR $T2[ebp], 0
	jne	SHORT $LN5@getMemberN
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 485  : 		: _Myfirst(),

	mov	DWORD PTR [ebx], 0

; 486  : 		_Mylast(),

	mov	DWORD PTR [ebx+4], 0

; 487  : 		_Myend()

	mov	DWORD PTR [ebx+8], 0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1209 :        return Value::Members();

	jmp	$LN671@getMemberN
$LN5@getMemberN:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 485  : 		: _Myfirst(),

	mov	DWORD PTR _members$[ebp], 0

; 486  : 		_Mylast(),

	mov	DWORD PTR _members$[ebp+4], 0

; 487  : 		_Myend()

	mov	DWORD PTR _members$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 925  : 		return (_Mypair._Get_second()._Get_second());

	mov	eax, DWORD PTR [edi]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1210 :    Members members;

	mov	DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1171 : 		return (this->_Mysize());

	mov	eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1033 : 		if (capacity() < _Count)

	test	eax, eax
	je	SHORT $LN45@getMemberN

; 1034 : 			{	// something to do, check and reallocate
; 1035 : 			if (max_size() < _Count)

	cmp	eax, 178956970				; 0aaaaaaaH
	jbe	SHORT $LN46@getMemberN

; 1765 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN672@getMemberN:
$LN46@getMemberN:

; 1037 : 			_Reallocate(_Count);

	push	eax
	lea	ecx, DWORD PTR _members$[ebp]
	call	?_Reallocate@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Reallocate
$LN45@getMemberN:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1213 :    ObjectValues::const_iterator it = value_.map_->begin();

	mov	edi, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 588  : 		return ((_Nodepref)_Pnode->_Left);

	mov	esi, DWORD PTR [edi]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1214 :    ObjectValues::const_iterator itEnd = value_.map_->end();

	mov	edi, DWORD PTR [edi]
	mov	esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 336  : 		return (this->_Ptr == _Right._Ptr);

	cmp	esi, edi
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1215 :    for ( ; it != itEnd; ++it )

	je	$LN3@getMemberN
	npad	7
$LL169@getMemberN:

; 244  :    return cstr_;

	mov	edx, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR $T3[ebp+20], 15		; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR $T3[ebp+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR $T3[ebp], 0

; 523  : 		return (*_First == 0 ? 0

	cmp	BYTE PTR [edx], 0
	jne	SHORT $LN319@getMemberN
	xor	ecx, ecx
	jmp	SHORT $LN320@getMemberN
$LN319@getMemberN:
	mov	ecx, edx
	lea	ebx, DWORD PTR [ecx+1]
$LL667@getMemberN:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL667@getMemberN
	sub	ecx, ebx
$LN320@getMemberN:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	ecx
	push	edx
	lea	ecx, DWORD PTR $T3[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1216 :       members.push_back( std::string( (*it).first.c_str() ) );

	lea	eax, DWORD PTR $T3[ebp]
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	push	eax
	lea	ecx, DWORD PTR _members$[ebp]
	call	?push_back@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::push_back
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

	mov	eax, DWORD PTR $T3[ebp+20]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1216 :       members.push_back( std::string( (*it).first.c_str() ) );

	mov	BYTE PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

	cmp	eax, 16					; 00000010H
	jb	SHORT $LN327@getMemberN
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR $T3[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN327@getMemberN:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 60   : 		if (_Mytree::_Isnil(_Ptr))

	cmp	BYTE PTR [esi+13], 0
	jne	SHORT $LN660@getMemberN

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [esi+8]

; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN657@getMemberN

; 63   : 			_Ptr = _Mytree::_Min(

	mov	esi, eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [esi]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN660@getMemberN
	npad	6
$LL180@getMemberN:

; 616  : 			_Pnode = _Left(_Pnode);

	mov	esi, eax

; 583  : 		return ((char&)_Pnode->_Isnil);

	mov	eax, DWORD PTR [esi]

; 615  : 		while (!_Isnil(_Left(_Pnode)))

	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL180@getMemberN

; 65   : 		else

	jmp	SHORT $LN660@getMemberN
$LN657@getMemberN:

; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

	mov	eax, DWORD PTR [esi+4]
	cmp	BYTE PTR [eax+13], 0
	jne	SHORT $LN165@getMemberN
$LL164@getMemberN:
	cmp	esi, DWORD PTR [eax+8]
	jne	SHORT $LN165@getMemberN

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

	mov	esi, eax
	mov	eax, DWORD PTR [eax+4]
	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LL164@getMemberN
$LN165@getMemberN:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

	mov	esi, eax
$LN660@getMemberN:

; 336  : 		return (this->_Ptr == _Right._Ptr);

	cmp	esi, edi
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1215 :    for ( ; it != itEnd; ++it )

	jne	$LL169@getMemberN
	mov	ebx, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
$LN3@getMemberN:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 870  : 		this->_Myfirst() = _Right._Myfirst();

	mov	eax, DWORD PTR _members$[ebp]
	mov	DWORD PTR [ebx], eax

; 871  : 		this->_Mylast() = _Right._Mylast();

	mov	eax, DWORD PTR _members$[ebp+4]
	mov	DWORD PTR [ebx+4], eax

; 872  : 		this->_Myend() = _Right._Myend();

	mov	eax, DWORD PTR _members$[ebp+8]
	mov	DWORD PTR [ebx+8], eax
$LN671@getMemberN:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1225 :    return members;

	mov	eax, ebx

; 1226 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
$LN670@getMemberN:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ$1:
	lea	ecx, DWORD PTR _members$[ebp]
	jmp	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ$2:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?getMemberNames@Value@Json@@QBE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ ENDP ; Json::Value::getMemberNames
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isMember@Value@Json@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_key$ = 8						; size = 4
?isMember@Value@Json@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::Value::isMember, COMDAT
; _this$ = ecx

; 1191 : {

	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 521  : 		return (this->_BUF_SIZE <= _Myres

	mov	eax, DWORD PTR _key$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN17@isMember
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [eax]
$LN17@isMember:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1184 :    const Value *value = &((*this)[key]);

	push	eax
	call	??AValue@Json@@QBEABV01@PBD@Z		; Json::Value::operator[]

; 1185 :    return value != &null;

	xor	ecx, ecx
	cmp	eax, OFFSET ?null@Value@Json@@2V12@B	; Json::Value::null
	setne	al

; 1192 :    return isMember( key.c_str() );
; 1193 : }

	pop	ebp
	ret	4
?isMember@Value@Json@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::Value::isMember
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isMember@Value@Json@@QBE_NPBD@Z
_TEXT	SEGMENT
_key$ = 8						; size = 4
?isMember@Value@Json@@QBE_NPBD@Z PROC			; Json::Value::isMember, COMDAT
; _this$ = ecx

; 1183 : {

	push	ebp
	mov	ebp, esp

; 1184 :    const Value *value = &((*this)[key]);

	push	DWORD PTR _key$[ebp]
	call	??AValue@Json@@QBEABV01@PBD@Z		; Json::Value::operator[]

; 1185 :    return value != &null;

	xor	ecx, ecx
	cmp	eax, OFFSET ?null@Value@Json@@2V12@B	; Json::Value::null
	setne	al

; 1186 : }

	pop	ebp
	ret	4
?isMember@Value@Json@@QBE_NPBD@Z ENDP			; Json::Value::isMember
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?removeMember@Value@Json@@QAE?AV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_key$ = 12						; size = 4
?removeMember@Value@Json@@QAE?AV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::Value::removeMember, COMDAT
; _this$ = ecx

; 1168 : {

	push	ebp
	mov	ebp, esp
	push	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 521  : 		return (this->_BUF_SIZE <= _Myres

	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR $T1[ebp], 0
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN19@removeMemb
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [eax]
$LN19@removeMemb:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1169 :    return removeMember( key.c_str() );

	push	eax
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	?removeMember@Value@Json@@QAE?AV12@PBD@Z ; Json::Value::removeMember
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1170 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?removeMember@Value@Json@@QAE?AV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::Value::removeMember
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?removeMember@Value@Json@@QAE?AV12@PBD@Z
_TEXT	SEGMENT
_old$ = -40						; size = 16
_actualKey$ = -24					; size = 8
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
$T3 = 12						; size = 4
_key$ = 12						; size = 4
?removeMember@Value@Json@@QAE?AV12@PBD@Z PROC		; Json::Value::removeMember, COMDAT
; _this$ = ecx

; 1142 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?removeMember@Value@Json@@QAE?AV12@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	ebx, ecx

; 1143 :    JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue );
; 1144 :    if ( type_ == nullValue )

	cmp	BYTE PTR [ebx+8], 0
	mov	DWORD PTR $T2[ebp], 0
	jne	SHORT $LN2@removeMemb

; 1145 :       return null;

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	OFFSET ?null@Value@Json@@2V12@B		; Json::Value::null
	call	??0Value@Json@@QAE@ABV01@@Z		; Json::Value::Value
	jmp	$LN185@removeMemb
$LN2@removeMemb:

; 181  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 

	mov	edi, DWORD PTR _key$[ebp]
	mov	DWORD PTR _actualKey$[ebp], edi

; 182  :                                   : cstr )
; 183  :    , index_( allocate )

	mov	DWORD PTR _actualKey$[ebp+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1538 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

	lea	ecx, DWORD PTR _actualKey$[ebp]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1147 :    CZString actualKey( key, CZString::noDuplication );

	mov	DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1538 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

	push	ecx
	mov	ecx, DWORD PTR [ebx]
	call	??$_Lbound@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lbound<Json::Value::CZString>

; 43   : 		: _Ptr(_Pnode)

	mov	edx, DWORD PTR [ebx]
	mov	esi, eax
	mov	eax, DWORD PTR [edx]

; 336  : 		return (this->_Ptr == _Right._Ptr);

	cmp	esi, eax

; 1482 : 		return (_Where == end()

	je	SHORT $LN15@removeMemb
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    if ( cstr_ )

	test	edi, edi
	je	SHORT $LN91@removeMemb

; 221  :       return strcmp( cstr_, other.cstr_ ) < 0;

	mov	ecx, DWORD PTR [esi+16]
	npad	7
$LL180@removeMemb:
	mov	dl, BYTE PTR [edi]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN181@removeMemb
	test	dl, dl
	je	SHORT $LN182@removeMemb
	mov	dl, BYTE PTR [edi+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN181@removeMemb
	add	edi, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL180@removeMemb
$LN182@removeMemb:
	mov	edx, DWORD PTR [ebx]
	xor	ecx, ecx
	test	ecx, ecx
	sets	cl
	jmp	SHORT $LN90@removeMemb
$LN181@removeMemb:
	mov	edx, DWORD PTR [ebx]
	sbb	ecx, ecx
	or	ecx, 1
	test	ecx, ecx
	sets	cl
	jmp	SHORT $LN90@removeMemb
$LN91@removeMemb:

; 222  :    return index_ < other.index_;

	cmp	DWORD PTR [esi+20], 0
	setg	cl
$LN90@removeMemb:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1482 : 		return (_Where == end()

	test	cl, cl
	je	SHORT $LN94@removeMemb
$LN15@removeMemb:

; 43   : 		: _Ptr(_Pnode)

	mov	esi, eax
$LN94@removeMemb:

; 336  : 		return (this->_Ptr == _Right._Ptr);

	cmp	esi, DWORD PTR [edx]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1149 :    if ( it == value_.map_->end() )

	jne	SHORT $LN3@removeMemb

; 1150 :       return null;

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	OFFSET ?null@Value@Json@@2V12@B		; Json::Value::null
	call	??0Value@Json@@QAE@ABV01@@Z		; Json::Value::Value
	jmp	SHORT $LN185@removeMemb
$LN3@removeMemb:

; 1151 :    Value old(it->second);

	lea	eax, DWORD PTR [esi+24]
	push	eax
	lea	ecx, DWORD PTR _old$[ebp]
	call	??0Value@Json@@QAE@ABV01@@Z		; Json::Value::Value

; 1152 :    value_.map_->erase(it);

	mov	ecx, DWORD PTR [ebx]
	lea	eax, DWORD PTR $T3[ebp]
	push	esi
	push	eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	call	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase

; 1153 :    return old;

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	lea	eax, DWORD PTR _old$[ebp]
	push	eax
	call	??0Value@Json@@QAE@ABV01@@Z		; Json::Value::Value
	lea	ecx, DWORD PTR _old$[ebp]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value
$LN185@removeMemb:
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1154 : #else
; 1155 :    Value *value = value_.map_->find( key );
; 1156 :    if (value){
; 1157 :       Value old(*value);
; 1158 :       value_.map_.remove( key );
; 1159 :       return old;
; 1160 :    } else {
; 1161 :       return null;
; 1162 :    }
; 1163 : #endif
; 1164 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?removeMember@Value@Json@@QAE?AV12@PBD@Z$1:
	lea	ecx, DWORD PTR _actualKey$[ebp]
	jmp	??1CZString@Value@Json@@QAE@XZ		; Json::Value::CZString::~CZString
__unwindfunclet$?removeMember@Value@Json@@QAE?AV12@PBD@Z$32:
	call	___std_terminate
	ret	0
__unwindfunclet$?removeMember@Value@Json@@QAE?AV12@PBD@Z$2:
	lea	ecx, DWORD PTR _old$[ebp]
	jmp	??1Value@Json@@QAE@XZ			; Json::Value::~Value
__unwindfunclet$?removeMember@Value@Json@@QAE?AV12@PBD@Z$34:
	call	___std_terminate
	ret	0
__ehhandler$?removeMember@Value@Json@@QAE?AV12@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?removeMember@Value@Json@@QAE?AV12@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?removeMember@Value@Json@@QAE?AV12@PBD@Z ENDP		; Json::Value::removeMember
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?get@Value@Json@@QBE?AV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_key$ = 12						; size = 4
_defaultValue$ = 16					; size = 4
?get@Value@Json@@QBE?AV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z PROC ; Json::Value::get, COMDAT
; _this$ = ecx

; 1136 : {

	push	ebp
	mov	ebp, esp
	push	ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 521  : 		return (this->_BUF_SIZE <= _Myres

	mov	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR $T1[ebp], 0
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN19@get
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [eax]
$LN19@get:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1137 :    return get( key.c_str(), defaultValue );

	push	DWORD PTR _defaultValue$[ebp]
	push	eax
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	?get@Value@Json@@QBE?AV12@PBDABV12@@Z	; Json::Value::get
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1138 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?get@Value@Json@@QBE?AV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV12@@Z ENDP ; Json::Value::get
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?get@Value@Json@@QBE?AV12@PBDABV12@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_key$ = 12						; size = 4
_defaultValue$ = 16					; size = 4
?get@Value@Json@@QBE?AV12@PBDABV12@@Z PROC		; Json::Value::get, COMDAT
; _this$ = ecx

; 1127 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1128 :    const Value *value = &((*this)[key]);

	push	DWORD PTR _key$[ebp]
	mov	DWORD PTR $T1[ebp], 0
	call	??AValue@Json@@QBEABV01@PBD@Z		; Json::Value::operator[]

; 1129 :    return value == &null ? defaultValue : *value;

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	cmp	eax, OFFSET ?null@Value@Json@@2V12@B	; Json::Value::null
	cmove	eax, DWORD PTR _defaultValue$[ebp]
	push	eax
	call	??0Value@Json@@QAE@ABV01@@Z		; Json::Value::Value
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1130 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?get@Value@Json@@QBE?AV12@PBDABV12@@Z ENDP		; Json::Value::get
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\include\json\value.h
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??AValue@Json@@QAEAAV01@ABVStaticString@1@@Z
_TEXT	SEGMENT
_key$ = 8						; size = 4
??AValue@Json@@QAEAAV01@ABVStaticString@1@@Z PROC	; Json::Value::operator[], COMDAT
; _this$ = ecx

; 1096 : {

	push	ebp
	mov	ebp, esp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\include\json\value.h

; 72   :          return str_;

	mov	eax, DWORD PTR _key$[ebp]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1097 :    return resolveReference( key, true );

	push	1
	push	DWORD PTR [eax]
	call	?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z ; Json::Value::resolveReference

; 1098 : }

	pop	ebp
	ret	4
??AValue@Json@@QAEAAV01@ABVStaticString@1@@Z ENDP	; Json::Value::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??AValue@Json@@QBEABV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_key$ = 8						; size = 4
??AValue@Json@@QBEABV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::Value::operator[], COMDAT
; _this$ = ecx

; 1090 : {

	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 521  : 		return (this->_BUF_SIZE <= _Myres

	mov	eax, DWORD PTR _key$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN17@operator
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [eax]
$LN17@operator:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1091 :    return (*this)[ key.c_str() ];

	mov	DWORD PTR _key$[ebp], eax

; 1092 : }

	pop	ebp

; 1091 :    return (*this)[ key.c_str() ];

	jmp	??AValue@Json@@QBEABV01@PBD@Z		; Json::Value::operator[]
??AValue@Json@@QBEABV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::Value::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??AValue@Json@@QAEAAV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_key$ = 8						; size = 4
??AValue@Json@@QAEAAV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::Value::operator[], COMDAT
; _this$ = ecx

; 1083 : {

	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 521  : 		return (this->_BUF_SIZE <= _Myres

	mov	eax, DWORD PTR _key$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN17@operator
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [eax]
$LN17@operator:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1017 :    return resolveReference( key, false );

	push	0
	push	eax
	call	?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z ; Json::Value::resolveReference

; 1084 :    return (*this)[ key.c_str() ];
; 1085 : }

	pop	ebp
	ret	4
??AValue@Json@@QAEAAV01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::Value::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??AValue@Json@@QBEABV01@PBD@Z
_TEXT	SEGMENT
_actualKey$ = -20					; size = 8
__$EHRec$ = -12						; size = 12
_key$ = 8						; size = 4
??AValue@Json@@QBEABV01@PBD@Z PROC			; Json::Value::operator[], COMDAT
; _this$ = ecx

; 1064 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??AValue@Json@@QBEABV01@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1065 :    JSON_ASSERT( type_ == nullValue  ||  type_ == objectValue );
; 1066 :    if ( type_ == nullValue )

	cmp	BYTE PTR [ecx+8], 0
	jne	SHORT $LN2@operator

; 1067 :       return null;

	mov	eax, OFFSET ?null@Value@Json@@2V12@B	; Json::Value::null

; 1074 : #else
; 1075 :    const Value *value = value_.map_->find( key );
; 1076 :    return value ? *value : null;
; 1077 : #endif
; 1078 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN2@operator:

; 1068 : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 1069 :    CZString actualKey( key, CZString::noDuplication );
; 1070 :    ObjectValues::const_iterator it = value_.map_->find( actualKey );

	mov	edi, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1538 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

	lea	eax, DWORD PTR _actualKey$[ebp]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 181  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 

	mov	esi, DWORD PTR _key$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1538 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

	mov	ecx, edi
	push	eax
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 181  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 

	mov	DWORD PTR _actualKey$[ebp], esi

; 182  :                                   : cstr )
; 183  :    , index_( allocate )

	mov	DWORD PTR _actualKey$[ebp+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1538 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

	call	??$_Lbound@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lbound<Json::Value::CZString>

; 43   : 		: _Ptr(_Pnode)

	mov	ecx, DWORD PTR [edi]

; 336  : 		return (this->_Ptr == _Right._Ptr);

	cmp	eax, ecx

; 1482 : 		return (_Where == end()

	je	SHORT $LN13@operator
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 220  :    if ( cstr_ )

	test	esi, esi
	je	SHORT $LN89@operator

; 221  :       return strcmp( cstr_, other.cstr_ ) < 0;

	mov	edx, DWORD PTR [eax+16]
	npad	2
$LL165@operator:
	mov	bl, BYTE PTR [esi]
	cmp	bl, BYTE PTR [edx]
	jne	SHORT $LN166@operator
	test	bl, bl
	je	SHORT $LN167@operator
	mov	bl, BYTE PTR [esi+1]
	cmp	bl, BYTE PTR [edx+1]
	jne	SHORT $LN166@operator
	add	esi, 2
	add	edx, 2
	test	bl, bl
	jne	SHORT $LL165@operator
$LN167@operator:
	xor	edx, edx
	test	edx, edx
	sets	dl
	jmp	SHORT $LN88@operator
$LN166@operator:
	sbb	edx, edx
	or	edx, 1
	test	edx, edx
	sets	dl
	jmp	SHORT $LN88@operator
$LN89@operator:

; 222  :    return index_ < other.index_;

	cmp	DWORD PTR [eax+20], 0
	setg	dl
$LN88@operator:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1482 : 		return (_Where == end()

	test	dl, dl
	je	SHORT $LN92@operator
$LN13@operator:

; 43   : 		: _Ptr(_Pnode)

	mov	eax, ecx
$LN92@operator:

; 336  : 		return (this->_Ptr == _Right._Ptr);

	cmp	eax, ecx
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1071 :    if ( it == value_.map_->end() )

	jne	SHORT $LN3@operator
	mov	eax, OFFSET ?null@Value@Json@@2V12@B	; Json::Value::null
	jmp	SHORT $LN6@operator
$LN3@operator:

; 1072 :       return null;
; 1073 :    return (*it).second;

	add	eax, 24					; 00000018H
$LN6@operator:

; 1074 : #else
; 1075 :    const Value *value = value_.map_->find( key );
; 1076 :    return value ? *value : null;
; 1077 : #endif
; 1078 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??AValue@Json@@QBEABV01@PBD@Z$30:
	call	___std_terminate
	ret	0
__ehhandler$??AValue@Json@@QBEABV01@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??AValue@Json@@QBEABV01@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??AValue@Json@@QBEABV01@PBD@Z ENDP			; Json::Value::operator[]
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??AValue@Json@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
_key$ = 8						; size = 4
??AValue@Json@@QAEAAV01@PBD@Z PROC			; Json::Value::operator[], COMDAT
; _this$ = ecx

; 1016 : {

	push	ebp
	mov	ebp, esp

; 1017 :    return resolveReference( key, false );

	push	0
	push	DWORD PTR _key$[ebp]
	call	?resolveReference@Value@Json@@AAEAAV12@PBD_N@Z ; Json::Value::resolveReference

; 1018 : }

	pop	ebp
	ret	4
??AValue@Json@@QAEAAV01@PBD@Z ENDP			; Json::Value::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?append@Value@Json@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?append@Value@Json@@QAEAAV12@ABV12@@Z PROC		; Json::Value::append, COMDAT
; _this$ = ecx

; 1119 : {

	push	ebp
	mov	ebp, esp
	push	esi

; 1120 :    return (*this)[size()] = value;

	push	DWORD PTR _value$[ebp]
	mov	esi, ecx
	call	?size@Value@Json@@QBEIXZ		; Json::Value::size
	push	eax
	mov	ecx, esi
	call	??AValue@Json@@QAEAAV01@I@Z		; Json::Value::operator[]
	mov	ecx, eax
	call	??4Value@Json@@QAEAAV01@ABV01@@Z	; Json::Value::operator=
	pop	esi

; 1121 : }

	pop	ebp
	ret	4
?append@Value@Json@@QAEAAV12@ABV12@@Z ENDP		; Json::Value::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isValidIndex@Value@Json@@QBE_NI@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
?isValidIndex@Value@Json@@QBE_NI@Z PROC			; Json::Value::isValidIndex, COMDAT
; _this$ = ecx

; 1056 : {

	push	ebp
	mov	ebp, esp

; 1057 :    return index < size();

	call	?size@Value@Json@@QBEIXZ		; Json::Value::size
	cmp	DWORD PTR _index$[ebp], eax
	setb	al

; 1058 : }

	pop	ebp
	ret	4
?isValidIndex@Value@Json@@QBE_NI@Z ENDP			; Json::Value::isValidIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?get@Value@Json@@QBE?AV12@IABV12@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_index$ = 12						; size = 4
_defaultValue$ = 16					; size = 4
?get@Value@Json@@QBE?AV12@IABV12@@Z PROC		; Json::Value::get, COMDAT
; _this$ = ecx

; 1048 : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 1049 :    const Value *value = &((*this)[index]);

	push	DWORD PTR _index$[ebp]
	mov	DWORD PTR $T1[ebp], 0
	call	??AValue@Json@@QBEABV01@I@Z		; Json::Value::operator[]

; 1050 :    return value == &null ? defaultValue : *value;

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	cmp	eax, OFFSET ?null@Value@Json@@2V12@B	; Json::Value::null
	cmove	eax, DWORD PTR _defaultValue$[ebp]
	push	eax
	call	??0Value@Json@@QAE@ABV01@@Z		; Json::Value::Value
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1051 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?get@Value@Json@@QBE?AV12@IABV12@@Z ENDP		; Json::Value::get
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??AValue@Json@@QBEABV01@I@Z
_TEXT	SEGMENT
_key$ = -20						; size = 8
__$EHRec$ = -12						; size = 12
_index$ = 8						; size = 4
??AValue@Json@@QBEABV01@I@Z PROC			; Json::Value::operator[], COMDAT
; _this$ = ecx

; 997  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??AValue@Json@@QBEABV01@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 998  :    JSON_ASSERT( type_ == nullValue  ||  type_ == arrayValue );
; 999  :    if ( type_ == nullValue )

	cmp	BYTE PTR [ecx+8], 0
	jne	SHORT $LN2@operator

; 1000 :       return null;

	mov	eax, OFFSET ?null@Value@Json@@2V12@B	; Json::Value::null

; 1007 : #else
; 1008 :    Value *value = value_.array_->find( index );
; 1009 :    return value ? *value : null;
; 1010 : #endif
; 1011 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
$LN2@operator:

; 1001 : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 1002 :    CZString key( index );
; 1003 :    ObjectValues::const_iterator it = value_.map_->find( key );

	mov	esi, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1538 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

	lea	eax, DWORD PTR _key$[ebp]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 176  :    , index_( index )

	mov	edi, DWORD PTR _index$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1538 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

	mov	ecx, esi
	push	eax
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 175  :    : cstr_( 0 )

	mov	DWORD PTR _key$[ebp], 0

; 176  :    , index_( index )

	mov	DWORD PTR _key$[ebp+4], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1538 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

	call	??$_Lbound@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lbound<Json::Value::CZString>

; 43   : 		: _Ptr(_Pnode)

	mov	ecx, DWORD PTR [esi]

; 336  : 		return (this->_Ptr == _Right._Ptr);

	cmp	eax, ecx

; 1482 : 		return (_Where == end()

	je	SHORT $LN11@operator
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 222  :    return index_ < other.index_;

	cmp	edi, DWORD PTR [eax+20]
	setl	dl
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1482 : 		return (_Where == end()

	test	dl, dl
	je	SHORT $LN90@operator
$LN11@operator:

; 43   : 		: _Ptr(_Pnode)

	mov	eax, ecx
$LN90@operator:

; 336  : 		return (this->_Ptr == _Right._Ptr);

	cmp	eax, ecx
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 1004 :    if ( it == value_.map_->end() )

	jne	SHORT $LN3@operator
	mov	eax, OFFSET ?null@Value@Json@@2V12@B	; Json::Value::null
	jmp	SHORT $LN6@operator
$LN3@operator:

; 1005 :       return null;
; 1006 :    return (*it).second;

	add	eax, 24					; 00000018H
$LN6@operator:

; 1007 : #else
; 1008 :    Value *value = value_.array_->find( index );
; 1009 :    return value ? *value : null;
; 1010 : #endif
; 1011 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??AValue@Json@@QBEABV01@I@Z$30:
	call	___std_terminate
	ret	0
__ehhandler$??AValue@Json@@QBEABV01@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??AValue@Json@@QBEABV01@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??AValue@Json@@QBEABV01@I@Z ENDP			; Json::Value::operator[]
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??AValue@Json@@QAEAAV01@I@Z
_TEXT	SEGMENT
_defaultValue$ = -60					; size = 24
$T2 = -36						; size = 16
_key$ = -20						; size = 8
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T4 = 8							; size = 4
_index$ = 8						; size = 4
??AValue@Json@@QAEAAV01@I@Z PROC			; Json::Value::operator[], COMDAT
; _this$ = ecx

; 976  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??AValue@Json@@QAEAAV01@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	ebx, ecx

; 977  :    JSON_ASSERT( type_ == nullValue  ||  type_ == arrayValue );
; 978  :    if ( type_ == nullValue )

	cmp	BYTE PTR [ebx+8], 0
	jne	SHORT $LN2@operator
	mov	eax, DWORD PTR $T2[ebp+8]
	and	eax, -506				; fffffe06H

; 271  :    , comments_( 0 )

	mov	DWORD PTR $T2[ebp+12], 0
	or	eax, 6

; 272  : # ifdef JSON_VALUE_USE_INTERNAL_MAP
; 273  :    , itemIsUsed_( 0 )
; 274  : #endif
; 275  : {
; 276  :    switch ( type )
; 277  :    {
; 278  :    case nullValue:
; 279  :       break;
; 280  :    case intValue:
; 281  :    case uintValue:
; 282  :       value_.int_ = 0;
; 283  :       break;
; 284  :    case realValue:
; 285  :       value_.real_ = 0.0;
; 286  :       break;
; 287  :    case stringValue:
; 288  :       value_.string_ = 0;
; 289  :       break;
; 290  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 291  :    case arrayValue:
; 292  :    case objectValue:
; 293  :       value_.map_ = new ObjectValues();

	push	8
	mov	DWORD PTR $T2[ebp+8], eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	eax, eax
	je	SHORT $LN20@operator
	mov	ecx, eax
	call	??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
	jmp	SHORT $LN21@operator
$LN20@operator:
	xor	eax, eax
$LN21@operator:
	mov	DWORD PTR $T2[ebp], eax

; 979  :       *this = Value( arrayValue );

	lea	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	push	eax
	mov	ecx, ebx
	call	??4Value@Json@@QAEAAV01@ABV01@@Z	; Json::Value::operator=
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value
$LN2@operator:

; 176  :    , index_( index )

	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR _key$[ebp], 0
	mov	DWORD PTR _key$[ebp+4], eax

; 982  :    ObjectValues::iterator it = value_.map_->lower_bound( key );

	mov	edi, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1538 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

	lea	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, edi
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 981  :    CZString key( index );

	mov	DWORD PTR __$EHRec$[ebp+8], 2
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1538 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));

	call	??$_Lbound@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Lbound<Json::Value::CZString>

; 43   : 		: _Ptr(_Pnode)

	mov	esi, eax

; 336  : 		return (this->_Ptr == _Right._Ptr);

	cmp	esi, DWORD PTR [edi]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 983  :    if ( it != value_.map_->end()  &&  (*it).first == key )

	je	SHORT $LN3@operator

; 228  :    if ( cstr_ )

	mov	eax, DWORD PTR [esi+16]
	test	eax, eax
	je	SHORT $LN87@operator

; 229  :       return strcmp( cstr_, other.cstr_ ) == 0;

	xor	ecx, ecx
$LL142@operator:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN143@operator
	test	dl, dl
	je	SHORT $LN144@operator
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN143@operator
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL142@operator
$LN144@operator:
	xor	eax, eax
	test	eax, eax
	jmp	SHORT $LN147@operator
$LN143@operator:
	sbb	eax, eax
	or	eax, 1
	test	eax, eax
	jmp	SHORT $LN147@operator
$LN87@operator:

; 230  :    return index_ == other.index_;

	mov	eax, DWORD PTR _index$[ebp]
	cmp	DWORD PTR [esi+20], eax
$LN147@operator:
	sete	al

; 983  :    if ( it != value_.map_->end()  &&  (*it).first == key )

	test	al, al
	jne	SHORT $LN136@operator
$LN3@operator:

; 191  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR _defaultValue$[ebp], 0
	mov	DWORD PTR _defaultValue$[ebp+4], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 171  : 				second(_STD forward<_Other2>(_Val2))

	push	OFFSET ?null@Value@Json@@2V12@B		; Json::Value::null
	lea	ecx, DWORD PTR _defaultValue$[ebp+8]
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	call	??0Value@Json@@QAE@ABV01@@Z		; Json::Value::Value
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 987  :    it = value_.map_->insert( it, defaultValue );

	mov	edi, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1084 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

	lea	eax, DWORD PTR _defaultValue$[ebp]
	push	eax
	mov	ecx, edi
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 986  :    ObjectValues::value_type defaultValue( key, null );

	mov	BYTE PTR __$EHRec$[ebp+8], 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1084 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

	call	??$_Buynode@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Buynode<std::pair<Json::Value::CZString const ,Json::Value> &>

; 1085 : 		return (_Insert_hint(_Where,

	push	eax

; 603  : 		return ((reference)_Pnode->_Myval);

	add	eax, 16					; 00000010H

; 1085 : 		return (_Insert_hint(_Where,

	mov	ecx, edi
	push	eax
	push	esi
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??$_Insert_hint@AAU?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@1@AAU?$pair@$$CBVCZString@Value@Json@@V23@@1@PAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Insert_hint<std::pair<Json::Value::CZString const ,Json::Value> &,std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> *>
	lea	ecx, DWORD PTR _defaultValue$[ebp+8]
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 198  :    if ( cstr_  &&  index_ == duplicate )

	cmp	DWORD PTR _defaultValue$[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	je	SHORT $LN135@operator
	cmp	DWORD PTR _defaultValue$[ebp+4], 1
	jne	SHORT $LN135@operator

; 199  :       valueAllocator()->releaseMemberName( const_cast<char *>( cstr_ ) );

	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	DWORD PTR _defaultValue$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+8]
$LN135@operator:
	mov	esi, DWORD PTR $T4[ebp]
$LN136@operator:

; 197  : {

	lea	eax, DWORD PTR [esi+24]

; 988  :    return (*it).second;
; 989  : #else
; 990  :    return value_.array_->resolveReference( index );
; 991  : #endif
; 992  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??AValue@Json@@QAEAAV01@I@Z$3:
	push	8
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$??AValue@Json@@QAEAAV01@I@Z$0:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1Value@Json@@QAE@XZ			; Json::Value::~Value
__unwindfunclet$??AValue@Json@@QAEAAV01@I@Z$1:
	lea	ecx, DWORD PTR _key$[ebp]
	jmp	??1CZString@Value@Json@@QAE@XZ		; Json::Value::CZString::~CZString
__unwindfunclet$??AValue@Json@@QAEAAV01@I@Z$15:
	lea	ecx, DWORD PTR _defaultValue$[ebp]
	jmp	??1CZString@Value@Json@@QAE@XZ		; Json::Value::CZString::~CZString
__unwindfunclet$??AValue@Json@@QAEAAV01@I@Z$2:
	lea	ecx, DWORD PTR _defaultValue$[ebp]
	jmp	??1?$pair@$$CBVCZString@Value@Json@@V23@@std@@QAE@XZ
__unwindfunclet$??AValue@Json@@QAEAAV01@I@Z$22:
	call	___std_terminate
	ret	0
__unwindfunclet$??AValue@Json@@QAEAAV01@I@Z$23:
	call	___std_terminate
	ret	0
__ehhandler$??AValue@Json@@QAEAAV01@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??AValue@Json@@QAEAAV01@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??AValue@Json@@QAEAAV01@I@Z ENDP			; Json::Value::operator[]
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?resize@Value@Json@@QAEXI@Z
_TEXT	SEGMENT
$T2 = -40						; size = 16
__Ans$3 = -32						; size = 8
$T4 = -24						; size = 8
_oldSize$1$ = -16					; size = 4
$T5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T6 = 8							; size = 4
_newSize$ = 8						; size = 4
?resize@Value@Json@@QAEXI@Z PROC			; Json::Value::resize, COMDAT
; _this$ = ecx

; 952  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?resize@Value@Json@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	ebx, ecx

; 953  :    JSON_ASSERT( type_ == nullValue  ||  type_ == arrayValue );
; 954  :    if ( type_ == nullValue )

	cmp	BYTE PTR [ebx+8], 0
	jne	SHORT $LN5@resize
	mov	eax, DWORD PTR $T2[ebp+8]
	and	eax, -506				; fffffe06H

; 271  :    , comments_( 0 )

	mov	DWORD PTR $T2[ebp+12], 0
	or	eax, 6

; 272  : # ifdef JSON_VALUE_USE_INTERNAL_MAP
; 273  :    , itemIsUsed_( 0 )
; 274  : #endif
; 275  : {
; 276  :    switch ( type )
; 277  :    {
; 278  :    case nullValue:
; 279  :       break;
; 280  :    case intValue:
; 281  :    case uintValue:
; 282  :       value_.int_ = 0;
; 283  :       break;
; 284  :    case realValue:
; 285  :       value_.real_ = 0.0;
; 286  :       break;
; 287  :    case stringValue:
; 288  :       value_.string_ = 0;
; 289  :       break;
; 290  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 291  :    case arrayValue:
; 292  :    case objectValue:
; 293  :       value_.map_ = new ObjectValues();

	push	8
	mov	DWORD PTR $T2[ebp+8], eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	eax, eax
	je	SHORT $LN24@resize
	mov	ecx, eax
	call	??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
	jmp	SHORT $LN25@resize
$LN24@resize:
	xor	eax, eax
$LN25@resize:
	mov	DWORD PTR $T2[ebp], eax

; 955  :       *this = Value( arrayValue );

	lea	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	push	eax
	mov	ecx, ebx
	call	??4Value@Json@@QAEAAV01@ABV01@@Z	; Json::Value::operator=
	lea	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value
$LN5@resize:

; 956  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 957  :    UInt oldSize = size();

	mov	ecx, ebx
	call	?size@Value@Json@@QBEIXZ		; Json::Value::size

; 958  :    if ( newSize == 0 )

	mov	edi, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR _oldSize$1$[ebp], eax
	test	edi, edi
	jne	SHORT $LN6@resize

; 930  :    switch ( type_ )

	movsx	eax, BYTE PTR [ebx+8]
	add	eax, -6					; fffffffaH
	cmp	eax, 1
	ja	$LN3@resize

; 931  :    {
; 932  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 933  :    case arrayValue:
; 934  :    case objectValue:
; 935  :       value_.map_->clear();

	mov	esi, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1472 : 		_Erase(_Root());

	mov	eax, DWORD PTR [esi]
	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	push	DWORD PTR [eax+4]
	call	?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	eax, DWORD PTR [esi]

; 1473 : 		_Root() = this->_Myhead();

	mov	DWORD PTR [eax+4], eax

; 1474 : 		_Lmost() = this->_Myhead();

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [eax], eax

; 598  : 		return ((_Nodepref)_Pnode->_Right);

	mov	eax, DWORD PTR [esi]

; 1475 : 		_Rmost() = this->_Myhead();

	mov	DWORD PTR [eax+8], eax

; 1476 : 		this->_Mysize() = 0;

	mov	DWORD PTR [esi+4], edi
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 971  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN6@resize:

; 959  :       clear();
; 960  :    else if ( newSize > oldSize )

	cmp	edi, eax
	jbe	SHORT $LN218@resize

; 961  :       (*this)[ newSize - 1 ];

	lea	eax, DWORD PTR [edi-1]
	mov	ecx, ebx
	push	eax
	call	??AValue@Json@@QAEAAV01@I@Z		; Json::Value::operator[]

; 971  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN218@resize:

; 964  :       for ( UInt index = newSize; index < oldSize; ++index )

	jae	SHORT $LN3@resize

; 175  :    : cstr_( 0 )

	mov	DWORD PTR $T4[ebp], 0
$LL4@resize:

; 176  :    , index_( index )

	mov	DWORD PTR $T4[ebp+4], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2025 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));

	mov	ecx, DWORD PTR [ebx]
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	lea	eax, DWORD PTR __Ans$3[ebp]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 965  :          value_.map_->erase( index );

	mov	DWORD PTR __$EHRec$[ebp+8], 3
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2025 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));

	push	eax
	call	??$_Eqrange@VCZString@Value@Json@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IBE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@std@@V12@@1@ABVCZString@Value@Json@@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Eqrange<Json::Value::CZString>

; 1462 : 		erase(_Where.first, _Where.second);

	push	DWORD PTR __Ans$3[ebp+4]
	mov	ecx, DWORD PTR [ebx]
	lea	eax, DWORD PTR $T6[ebp]
	push	DWORD PTR __Ans$3[ebp]
	push	eax
	call	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 964  :       for ( UInt index = newSize; index < oldSize; ++index )

	inc	edi

; 200  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 964  :       for ( UInt index = newSize; index < oldSize; ++index )

	cmp	edi, DWORD PTR _oldSize$1$[ebp]
	jb	SHORT $LL4@resize
$LN3@resize:

; 971  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?resize@Value@Json@@QAEXI@Z$2:
	push	8
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?resize@Value@Json@@QAEXI@Z$0:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1Value@Json@@QAE@XZ			; Json::Value::~Value
__unwindfunclet$?resize@Value@Json@@QAEXI@Z$3:
	call	___std_terminate
	ret	0
__unwindfunclet$?resize@Value@Json@@QAEXI@Z$1:
	lea	ecx, DWORD PTR $T4[ebp]
	jmp	??1CZString@Value@Json@@QAE@XZ		; Json::Value::CZString::~CZString
__unwindfunclet$?resize@Value@Json@@QAEXI@Z$45:
	call	___std_terminate
	ret	0
__ehhandler$?resize@Value@Json@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?resize@Value@Json@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?resize@Value@Json@@QAEXI@Z ENDP			; Json::Value::resize
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?clear@Value@Json@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?clear@Value@Json@@QAEXXZ PROC				; Json::Value::clear, COMDAT
; _this$ = ecx

; 927  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?clear@Value@Json@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 928  :    JSON_ASSERT( type_ == nullValue  ||  type_ == arrayValue  || type_ == objectValue );
; 929  : 
; 930  :    switch ( type_ )

	movsx	eax, BYTE PTR [ecx+8]
	add	eax, -6					; fffffffaH
	cmp	eax, 1
	ja	SHORT $LN5@clear

; 931  :    {
; 932  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 933  :    case arrayValue:
; 934  :    case objectValue:
; 935  :       value_.map_->clear();

	mov	esi, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1472 : 		_Erase(_Root());

	mov	eax, DWORD PTR [esi]
	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	DWORD PTR [eax+4]
	call	?_Erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Erase

; 593  : 		return ((_Nodepref)_Pnode->_Parent);

	mov	eax, DWORD PTR [esi]

; 1473 : 		_Root() = this->_Myhead();

	mov	DWORD PTR [eax+4], eax

; 1474 : 		_Lmost() = this->_Myhead();

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [eax], eax

; 598  : 		return ((_Nodepref)_Pnode->_Right);

	mov	eax, DWORD PTR [esi]

; 1475 : 		_Rmost() = this->_Myhead();

	mov	DWORD PTR [eax+8], eax

; 1476 : 		this->_Mysize() = 0;

	mov	DWORD PTR [esi+4], 0
$LN5@clear:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 948  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?clear@Value@Json@@QAEXXZ$0:
	call	___std_terminate
	ret	0
__ehhandler$?clear@Value@Json@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?clear@Value@Json@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?clear@Value@Json@@QAEXXZ ENDP				; Json::Value::clear
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??7Value@Json@@QBE_NXZ
_TEXT	SEGMENT
??7Value@Json@@QBE_NXZ PROC				; Json::Value::operator!, COMDAT
; _this$ = ecx

; 920  : {

	cmp	BYTE PTR [ecx+8], 0
	sete	al

; 921  :    return isNull();
; 922  : }

	ret	0
??7Value@Json@@QBE_NXZ ENDP				; Json::Value::operator!
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?empty@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?empty@Value@Json@@QBE_NXZ PROC				; Json::Value::empty, COMDAT
; _this$ = ecx

; 1257 :    return type_ == nullValue;

	mov	al, BYTE PTR [ecx+8]
	test	al, al

; 911  :    if ( isNull() || isArray() || isObject() )

	je	SHORT $LN4@empty

; 1315 :    return type_ == nullValue  ||  type_ == arrayValue;

	cmp	al, 6
	je	SHORT $LN4@empty

; 1322 :    return type_ == nullValue  ||  type_ == objectValue;

	cmp	al, 7
	je	SHORT $LN4@empty

; 913  :    else
; 914  :       return false;

	xor	al, al

; 915  : }

	ret	0
$LN4@empty:

; 912  :       return size() == 0u;

	call	?size@Value@Json@@QBEIXZ		; Json::Value::size
	test	eax, eax
	sete	al

; 915  : }

	ret	0
?empty@Value@Json@@QBE_NXZ ENDP				; Json::Value::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?size@Value@Json@@QBEIXZ
_TEXT	SEGMENT
_itLast$1 = -4						; size = 4
?size@Value@Json@@QBEIXZ PROC				; Json::Value::size, COMDAT
; _this$ = ecx

; 874  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 875  :    switch ( type_ )

	movsx	eax, BYTE PTR [ecx+8]
	cmp	eax, 7
	ja	SHORT $LN8@size
	jmp	DWORD PTR $LN85@size[eax*4]
$LN5@size:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 945  : 		return (_Get_data()._Mysize);

	mov	eax, DWORD PTR [ecx]

; 1181 : 		return (size() == 0);

	cmp	DWORD PTR [eax+4], 0
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 886  :       if ( !value_.map_->empty() )

	je	SHORT $LN8@size

; 888  :          ObjectValues::const_iterator itLast = value_.map_->end();

	mov	eax, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 310  : 		--static_cast<_Mybase&>(*this);

	lea	ecx, DWORD PTR _itLast$1[ebp]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 888  :          ObjectValues::const_iterator itLast = value_.map_->end();

	mov	DWORD PTR _itLast$1[ebp], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 310  : 		--static_cast<_Mybase&>(*this);

	call	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<Json::Value::CZString const ,Json::Value> > >,std::_Iterator_base0>::operator--
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 890  :          return (*itLast).first.index()+1;

	mov	eax, DWORD PTR _itLast$1[ebp]
	mov	eax, DWORD PTR [eax+20]
	inc	eax

; 905  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@size:

; 891  :       }
; 892  :       return 0;
; 893  :    case objectValue:
; 894  :       return Int( value_.map_->size() );

	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]

; 905  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@size:

; 895  : #else
; 896  :    case arrayValue:
; 897  :       return Int( value_.array_->size() );
; 898  :    case objectValue:
; 899  :       return Int( value_.map_->size() );
; 900  : #endif
; 901  :    default:
; 902  :       JSON_ASSERT_UNREACHABLE;
; 903  :    }
; 904  :    return 0; // unreachable;

	xor	eax, eax

; 905  : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN85@size:
	DD	$LN8@size
	DD	$LN8@size
	DD	$LN8@size
	DD	$LN8@size
	DD	$LN8@size
	DD	$LN8@size
	DD	$LN5@size
	DD	$LN7@size
?size@Value@Json@@QBEIXZ ENDP				; Json::Value::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isConvertibleTo@Value@Json@@QBE_NW4ValueType@2@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
?isConvertibleTo@Value@Json@@QBE_NW4ValueType@2@@Z PROC	; Json::Value::isConvertibleTo, COMDAT
; _this$ = ecx

; 822  : {

	push	ebp
	mov	ebp, esp

; 823  :    switch ( type_ )

	movsx	eax, BYTE PTR [ecx+8]
	cmp	eax, 7
	ja	$LN12@isConverti
	jmp	DWORD PTR $LN90@isConverti[eax*4]
$LN4@isConverti:

; 824  :    {
; 825  :    case nullValue:
; 826  :       return true;

	mov	al, 1

; 868  : }

	pop	ebp
	ret	4
$LN5@isConverti:

; 827  :    case intValue:
; 828  :       return ( other == nullValue  &&  value_.int_ == 0 )

	mov	eax, DWORD PTR _other$[ebp]
	test	eax, eax
	jne	SHORT $LN14@isConverti
	cmp	DWORD PTR [ecx], eax
	jmp	$LN88@isConverti
$LN14@isConverti:
	cmp	eax, 1
	je	SHORT $LN15@isConverti
	cmp	eax, 2
	jne	$LN16@isConverti
	cmp	DWORD PTR [ecx], 0
	jl	$LN73@isConverti
$LN15@isConverti:
	mov	eax, 1

; 868  : }

	pop	ebp
	ret	4
$LN6@isConverti:

; 829  :              || other == intValue
; 830  :              || ( other == uintValue  && value_.int_ >= 0 )
; 831  :              || other == realValue
; 832  :              || other == stringValue
; 833  :              || other == booleanValue;
; 834  :    case uintValue:
; 835  :       return ( other == nullValue  &&  value_.uint_ == 0 )

	mov	eax, DWORD PTR _other$[ebp]
	test	eax, eax
	jne	SHORT $LN18@isConverti
	cmp	DWORD PTR [ecx], eax
	jmp	$LN88@isConverti
$LN18@isConverti:
	cmp	eax, 1
	jne	$LN19@isConverti
	cmp	DWORD PTR [ecx], 2147483647		; 7fffffffH
	jbe	SHORT $LN15@isConverti

; 843  :              || ( other == intValue  &&  value_.real_ >= minInt  &&  value_.real_ <= maxInt )
; 844  :              || ( other == uintValue  &&  value_.real_ >= 0  &&  value_.real_ <= maxUInt )
; 845  :              || other == realValue
; 846  :              || other == stringValue
; 847  :              || other == booleanValue;
; 848  :    case booleanValue:
; 849  :       return ( other == nullValue  &&  value_.bool_ == false )

	xor	eax, eax

; 868  : }

	pop	ebp
	ret	4
$LN7@isConverti:

; 836  :              || ( other == intValue  && value_.uint_ <= (unsigned)maxInt )
; 837  :              || other == uintValue
; 838  :              || other == realValue
; 839  :              || other == stringValue
; 840  :              || other == booleanValue;
; 841  :    case realValue:
; 842  :       return ( other == nullValue  &&  value_.real_ == 0.0 )

	mov	eax, DWORD PTR _other$[ebp]
	test	eax, eax
	jne	SHORT $LN22@isConverti
	movsd	xmm0, QWORD PTR [ecx]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN15@isConverti

; 843  :              || ( other == intValue  &&  value_.real_ >= minInt  &&  value_.real_ <= maxInt )
; 844  :              || ( other == uintValue  &&  value_.real_ >= 0  &&  value_.real_ <= maxUInt )
; 845  :              || other == realValue
; 846  :              || other == stringValue
; 847  :              || other == booleanValue;
; 848  :    case booleanValue:
; 849  :       return ( other == nullValue  &&  value_.bool_ == false )

	xor	eax, eax

; 868  : }

	pop	ebp
	ret	4
$LN22@isConverti:

; 836  :              || ( other == intValue  && value_.uint_ <= (unsigned)maxInt )
; 837  :              || other == uintValue
; 838  :              || other == realValue
; 839  :              || other == stringValue
; 840  :              || other == booleanValue;
; 841  :    case realValue:
; 842  :       return ( other == nullValue  &&  value_.real_ == 0.0 )

	cmp	eax, 1
	jne	SHORT $LN23@isConverti
	movsd	xmm1, QWORD PTR [ecx]
	comisd	xmm1, QWORD PTR __real@c1e0000000000000
	jb	SHORT $LN73@isConverti
	movsd	xmm0, QWORD PTR __real@41dfffffffc00000
	comisd	xmm0, xmm1
	jae	SHORT $LN15@isConverti

; 843  :              || ( other == intValue  &&  value_.real_ >= minInt  &&  value_.real_ <= maxInt )
; 844  :              || ( other == uintValue  &&  value_.real_ >= 0  &&  value_.real_ <= maxUInt )
; 845  :              || other == realValue
; 846  :              || other == stringValue
; 847  :              || other == booleanValue;
; 848  :    case booleanValue:
; 849  :       return ( other == nullValue  &&  value_.bool_ == false )

	xor	eax, eax

; 868  : }

	pop	ebp
	ret	4
$LN23@isConverti:

; 836  :              || ( other == intValue  && value_.uint_ <= (unsigned)maxInt )
; 837  :              || other == uintValue
; 838  :              || other == realValue
; 839  :              || other == stringValue
; 840  :              || other == booleanValue;
; 841  :    case realValue:
; 842  :       return ( other == nullValue  &&  value_.real_ == 0.0 )

	cmp	eax, 2
	jne	SHORT $LN16@isConverti
	movsd	xmm1, QWORD PTR [ecx]
	comisd	xmm1, QWORD PTR __real@0000000000000000
	jb	SHORT $LN73@isConverti
	movsd	xmm0, QWORD PTR __real@41efffffffe00000
	comisd	xmm0, xmm1
	jae	$LN15@isConverti

; 843  :              || ( other == intValue  &&  value_.real_ >= minInt  &&  value_.real_ <= maxInt )
; 844  :              || ( other == uintValue  &&  value_.real_ >= 0  &&  value_.real_ <= maxUInt )
; 845  :              || other == realValue
; 846  :              || other == stringValue
; 847  :              || other == booleanValue;
; 848  :    case booleanValue:
; 849  :       return ( other == nullValue  &&  value_.bool_ == false )

	xor	eax, eax

; 868  : }

	pop	ebp
	ret	4
$LN8@isConverti:

; 843  :              || ( other == intValue  &&  value_.real_ >= minInt  &&  value_.real_ <= maxInt )
; 844  :              || ( other == uintValue  &&  value_.real_ >= 0  &&  value_.real_ <= maxUInt )
; 845  :              || other == realValue
; 846  :              || other == stringValue
; 847  :              || other == booleanValue;
; 848  :    case booleanValue:
; 849  :       return ( other == nullValue  &&  value_.bool_ == false )

	mov	eax, DWORD PTR _other$[ebp]
	test	eax, eax
	jne	SHORT $LN27@isConverti
	cmp	BYTE PTR [ecx], al
	jmp	SHORT $LN88@isConverti
$LN27@isConverti:
	cmp	eax, 1
	je	$LN15@isConverti
$LN19@isConverti:
	cmp	eax, 2
	je	$LN15@isConverti
$LN16@isConverti:
	cmp	eax, 3
	je	$LN15@isConverti
	cmp	eax, 4
	je	$LN15@isConverti
	cmp	eax, 5
$LN88@isConverti:
	je	$LN15@isConverti
$LN73@isConverti:
	xor	eax, eax

; 868  : }

	pop	ebp
	ret	4
$LN9@isConverti:

; 850  :              || other == intValue
; 851  :              || other == uintValue
; 852  :              || other == realValue
; 853  :              || other == stringValue
; 854  :              || other == booleanValue;
; 855  :    case stringValue:
; 856  :       return other == stringValue

	mov	eax, DWORD PTR _other$[ebp]
	cmp	eax, 4
	je	$LN15@isConverti
	test	eax, eax
	jne	SHORT $LN73@isConverti
	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	$LN15@isConverti
	cmp	BYTE PTR [eax], 0
	je	$LN15@isConverti
	xor	eax, eax

; 868  : }

	pop	ebp
	ret	4
$LN10@isConverti:

; 857  :              || ( other == nullValue  &&  (!value_.string_  ||  value_.string_[0] == 0) );
; 858  :    case arrayValue:
; 859  :       return other == arrayValue

	mov	eax, DWORD PTR _other$[ebp]
	cmp	eax, 6
	je	$LN15@isConverti
	test	eax, eax
	jne	SHORT $LN73@isConverti
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN15@isConverti
	xor	eax, eax

; 868  : }

	pop	ebp
	ret	4
$LN11@isConverti:

; 860  :              ||  ( other == nullValue  &&  value_.map_->size() == 0 );
; 861  :    case objectValue:
; 862  :       return other == objectValue

	mov	eax, DWORD PTR _other$[ebp]
	cmp	eax, 7
	je	$LN15@isConverti
	test	eax, eax
	jne	SHORT $LN73@isConverti
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax+4], 0
	je	$LN15@isConverti
	xor	eax, eax

; 868  : }

	pop	ebp
	ret	4
$LN12@isConverti:

; 863  :              ||  ( other == nullValue  &&  value_.map_->size() == 0 );
; 864  :    default:
; 865  :       JSON_ASSERT_UNREACHABLE;
; 866  :    }
; 867  :    return false; // unreachable;

	xor	al, al

; 868  : }

	pop	ebp
	ret	4
	npad	2
$LN90@isConverti:
	DD	$LN4@isConverti
	DD	$LN5@isConverti
	DD	$LN6@isConverti
	DD	$LN7@isConverti
	DD	$LN9@isConverti
	DD	$LN8@isConverti
	DD	$LN10@isConverti
	DD	$LN11@isConverti
?isConvertibleTo@Value@Json@@QBE_NW4ValueType@2@@Z ENDP	; Json::Value::isConvertibleTo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isObject@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?isObject@Value@Json@@QBE_NXZ PROC			; Json::Value::isObject, COMDAT
; _this$ = ecx

; 1322 :    return type_ == nullValue  ||  type_ == objectValue;

	mov	al, BYTE PTR [ecx+8]
	test	al, al
	je	SHORT $LN3@isObject
	cmp	al, 7
	je	SHORT $LN3@isObject
	xor	al, al

; 1323 : }

	ret	0
$LN3@isObject:

; 1322 :    return type_ == nullValue  ||  type_ == objectValue;

	mov	al, 1

; 1323 : }

	ret	0
?isObject@Value@Json@@QBE_NXZ ENDP			; Json::Value::isObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isArray@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?isArray@Value@Json@@QBE_NXZ PROC			; Json::Value::isArray, COMDAT
; _this$ = ecx

; 1315 :    return type_ == nullValue  ||  type_ == arrayValue;

	mov	al, BYTE PTR [ecx+8]
	test	al, al
	je	SHORT $LN3@isArray
	cmp	al, 6
	je	SHORT $LN3@isArray
	xor	al, al

; 1316 : }

	ret	0
$LN3@isArray:

; 1315 :    return type_ == nullValue  ||  type_ == arrayValue;

	mov	al, 1

; 1316 : }

	ret	0
?isArray@Value@Json@@QBE_NXZ ENDP			; Json::Value::isArray
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isString@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?isString@Value@Json@@QBE_NXZ PROC			; Json::Value::isString, COMDAT
; _this$ = ecx

; 1307 : {

	cmp	BYTE PTR [ecx+8], 4
	sete	al

; 1308 :    return type_ == stringValue;
; 1309 : }

	ret	0
?isString@Value@Json@@QBE_NXZ ENDP			; Json::Value::isString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isNumeric@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?isNumeric@Value@Json@@QBE_NXZ PROC			; Json::Value::isNumeric, COMDAT
; _this$ = ecx

; 1285 :    return type_ == intValue  

	mov	al, BYTE PTR [ecx+8]
	cmp	al, 1
	je	SHORT $LN3@isNumeric
	cmp	al, 2
	je	SHORT $LN3@isNumeric
	cmp	al, 5
	je	SHORT $LN3@isNumeric

; 1294 :    return type_ == realValue;

	cmp	al, 3

; 1301 :    return isIntegral() || isDouble();

	je	SHORT $LN3@isNumeric
	xor	al, al

; 1302 : }

	ret	0
$LN3@isNumeric:

; 1301 :    return isIntegral() || isDouble();

	mov	al, 1

; 1302 : }

	ret	0
?isNumeric@Value@Json@@QBE_NXZ ENDP			; Json::Value::isNumeric
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isDouble@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?isDouble@Value@Json@@QBE_NXZ PROC			; Json::Value::isDouble, COMDAT
; _this$ = ecx

; 1293 : {

	cmp	BYTE PTR [ecx+8], 3
	sete	al

; 1294 :    return type_ == realValue;
; 1295 : }

	ret	0
?isDouble@Value@Json@@QBE_NXZ ENDP			; Json::Value::isDouble
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isIntegral@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?isIntegral@Value@Json@@QBE_NXZ PROC			; Json::Value::isIntegral, COMDAT
; _this$ = ecx

; 1285 :    return type_ == intValue  

	mov	al, BYTE PTR [ecx+8]
	cmp	al, 1
	je	SHORT $LN3@isIntegral
	cmp	al, 2
	je	SHORT $LN3@isIntegral
	cmp	al, 5
	je	SHORT $LN3@isIntegral
	xor	al, al

; 1286 :           ||  type_ == uintValue  
; 1287 :           ||  type_ == booleanValue;
; 1288 : }

	ret	0
$LN3@isIntegral:

; 1285 :    return type_ == intValue  

	mov	al, 1

; 1286 :           ||  type_ == uintValue  
; 1287 :           ||  type_ == booleanValue;
; 1288 : }

	ret	0
?isIntegral@Value@Json@@QBE_NXZ ENDP			; Json::Value::isIntegral
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isUInt@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?isUInt@Value@Json@@QBE_NXZ PROC			; Json::Value::isUInt, COMDAT
; _this$ = ecx

; 1277 : {

	cmp	BYTE PTR [ecx+8], 2
	sete	al

; 1278 :    return type_ == uintValue;
; 1279 : }

	ret	0
?isUInt@Value@Json@@QBE_NXZ ENDP			; Json::Value::isUInt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isInt@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?isInt@Value@Json@@QBE_NXZ PROC				; Json::Value::isInt, COMDAT
; _this$ = ecx

; 1270 : {

	cmp	BYTE PTR [ecx+8], 1
	sete	al

; 1271 :    return type_ == intValue;
; 1272 : }

	ret	0
?isInt@Value@Json@@QBE_NXZ ENDP				; Json::Value::isInt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isBool@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?isBool@Value@Json@@QBE_NXZ PROC			; Json::Value::isBool, COMDAT
; _this$ = ecx

; 1263 : {

	cmp	BYTE PTR [ecx+8], 5
	sete	al

; 1264 :    return type_ == booleanValue;
; 1265 : }

	ret	0
?isBool@Value@Json@@QBE_NXZ ENDP			; Json::Value::isBool
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isNull@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?isNull@Value@Json@@QBE_NXZ PROC			; Json::Value::isNull, COMDAT
; _this$ = ecx

; 1256 : {

	cmp	BYTE PTR [ecx+8], 0
	sete	al

; 1257 :    return type_ == nullValue;
; 1258 : }

	ret	0
?isNull@Value@Json@@QBE_NXZ ENDP			; Json::Value::isNull
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?asBool@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?asBool@Value@Json@@QBE_NXZ PROC			; Json::Value::asBool, COMDAT
; _this$ = ecx

; 797  :    switch ( type_ )

	movsx	eax, BYTE PTR [ecx+8]
	cmp	eax, 7
	ja	SHORT $LN10@asBool
	jmp	DWORD PTR $LN33@asBool[eax*4]
$LN5@asBool:
	cmp	DWORD PTR [ecx], 0
	setne	al

; 817  : }

	ret	0
$LN6@asBool:

; 798  :    {
; 799  :    case nullValue:
; 800  :       return false;
; 801  :    case intValue:
; 802  :    case uintValue:
; 803  :       return value_.int_ != 0;
; 804  :    case realValue:
; 805  :       return value_.real_ != 0.0;

	movsd	xmm0, QWORD PTR [ecx]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN31@asBool
$LN12@asBool:
	xor	eax, eax

; 817  : }

	ret	0
$LN7@asBool:

; 806  :    case booleanValue:
; 807  :       return value_.bool_;

	mov	al, BYTE PTR [ecx]

; 817  : }

	ret	0
$LN8@asBool:

; 808  :    case stringValue:
; 809  :       return value_.string_  &&  value_.string_[0] != 0;

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN12@asBool
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN12@asBool
$LN31@asBool:
	mov	eax, 1

; 817  : }

	ret	0
$LN9@asBool:
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax+4], 0
	setne	al
	ret	0
$LN10@asBool:

; 810  :    case arrayValue:
; 811  :    case objectValue:
; 812  :       return value_.map_->size() != 0;
; 813  :    default:
; 814  :       JSON_ASSERT_UNREACHABLE;
; 815  :    }
; 816  :    return false; // unreachable;

	xor	al, al

; 817  : }

	ret	0
	npad	3
$LN33@asBool:
	DD	$LN10@asBool
	DD	$LN5@asBool
	DD	$LN5@asBool
	DD	$LN6@asBool
	DD	$LN8@asBool
	DD	$LN7@asBool
	DD	$LN9@asBool
	DD	$LN9@asBool
?asBool@Value@Json@@QBE_NXZ ENDP			; Json::Value::asBool
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?asDouble@Value@Json@@QBENXZ
_TEXT	SEGMENT
$T1 = -20						; size = 12
tv154 = -8						; size = 8
tv144 = -8						; size = 8
tv80 = -8						; size = 8
?asDouble@Value@Json@@QBENXZ PROC			; Json::Value::asDouble, COMDAT
; _this$ = ecx

; 771  : {

	push	ebp
	mov	ebp, esp

; 772  :    switch ( type_ )

	movsx	eax, BYTE PTR [ecx+8]
	sub	esp, 20					; 00000014H
	cmp	eax, 7
	ja	SHORT $LN10@asDouble
	jmp	DWORD PTR $LN18@asDouble[eax*4]
$LN5@asDouble:

; 773  :    {
; 774  :    case nullValue:
; 775  :       return 0.0;
; 776  :    case intValue:
; 777  :       return value_.int_;

	fild	DWORD PTR [ecx]
	fstp	QWORD PTR tv154[ebp]
	fld	QWORD PTR tv154[ebp]

; 792  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@asDouble:

; 778  :    case uintValue:
; 779  :       return value_.uint_;

	mov	eax, DWORD PTR [ecx]
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv144[ebp], xmm0
	fld	QWORD PTR tv144[ebp]

; 792  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@asDouble:

; 780  :    case realValue:
; 781  :       return value_.real_;

	fld	QWORD PTR [ecx]

; 792  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@asDouble:

; 782  :    case booleanValue:
; 783  :       return value_.bool_ ? 1.0 : 0.0;

	cmp	BYTE PTR [ecx], 0
	je	SHORT $LN13@asDouble
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR tv80[ebp], xmm0
	fld	QWORD PTR tv80[ebp]

; 792  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@asDouble:
	xorps	xmm0, xmm0

; 782  :    case booleanValue:
; 783  :       return value_.bool_ ? 1.0 : 0.0;

	movsd	QWORD PTR tv80[ebp], xmm0
	fld	QWORD PTR tv80[ebp]

; 792  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@asDouble:

; 788  :    default:
; 789  :       JSON_ASSERT_UNREACHABLE;
; 790  :    }
; 791  :    return 0; // unreachable;

	fldz

; 792  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN17@asDouble:

; 784  :    case stringValue:
; 785  :    case arrayValue:
; 786  :    case objectValue:
; 787  :       JSON_ASSERT_MESSAGE( false, "Type is not convertible to double" );

	push	OFFSET ??_C@_0CC@ICOHKFIF@Type?5is?5not?5convertible?5to?5doubl@
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0runtime_error@std@@QAE@PBD@Z		; std::runtime_error::runtime_error
	push	OFFSET __TI2?AVruntime_error@std@@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__CxxThrowException@8
$LN19@asDouble:
$LN15@asDouble:
	npad	1
$LN18@asDouble:

; 792  : }

	DD	$LN10@asDouble
	DD	$LN5@asDouble
	DD	$LN6@asDouble
	DD	$LN7@asDouble
	DD	$LN17@asDouble
	DD	$LN8@asDouble
	DD	$LN17@asDouble
	DD	$LN17@asDouble
?asDouble@Value@Json@@QBENXZ ENDP			; Json::Value::asDouble
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?asUInt@Value@Json@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?asUInt@Value@Json@@QBEIXZ PROC				; Json::Value::asUInt, COMDAT
; _this$ = ecx

; 744  : {

	push	ebp
	mov	ebp, esp

; 745  :    switch ( type_ )

	movsx	eax, BYTE PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	cmp	eax, 7
	ja	SHORT $LN13@asUInt
	jmp	DWORD PTR $LN20@asUInt[eax*4]
$LN5@asUInt:

; 746  :    {
; 747  :    case nullValue:
; 748  :       return 0;
; 749  :    case intValue:
; 750  :       JSON_ASSERT_MESSAGE( value_.int_ >= 0, "Negative integer can not be converted to unsigned integer" );

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	jns	SHORT $LN1@asUInt
	jmp	SHORT $LN18@asUInt
$LN7@asUInt:

; 751  :       return value_.int_;
; 752  :    case uintValue:
; 753  :       return value_.uint_;

	mov	eax, DWORD PTR [ecx]

; 767  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@asUInt:

; 754  :    case realValue:
; 755  :       JSON_ASSERT_MESSAGE( value_.real_ >= 0  &&  value_.real_ <= maxUInt,  "Real out of unsigned integer range" );

	movsd	xmm0, QWORD PTR [ecx]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jb	SHORT $LN10@asUInt
	movsd	xmm1, QWORD PTR __real@41efffffffe00000
	comisd	xmm1, xmm0
	jb	SHORT $LN10@asUInt

; 756  :       return UInt( value_.real_ );

	call	__dtoui3

; 767  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@asUInt:

; 754  :    case realValue:
; 755  :       JSON_ASSERT_MESSAGE( value_.real_ >= 0  &&  value_.real_ <= maxUInt,  "Real out of unsigned integer range" );

	push	OFFSET ??_C@_0CD@PGCLDEBG@Real?5out?5of?5unsigned?5integer?5ran@
	jmp	SHORT $LN17@asUInt
$LN11@asUInt:

; 757  :    case booleanValue:
; 758  :       return value_.bool_ ? 1 : 0;

	xor	eax, eax
	cmp	BYTE PTR [ecx], al
	setne	al

; 767  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@asUInt:

; 759  :    case stringValue:
; 760  :    case arrayValue:
; 761  :    case objectValue:
; 762  :       JSON_ASSERT_MESSAGE( false, "Type is not convertible to uint" );

	push	OFFSET ??_C@_0CA@LEFAEJPN@Type?5is?5not?5convertible?5to?5uint?$AA@
	jmp	SHORT $LN17@asUInt
$LN13@asUInt:

; 763  :    default:
; 764  :       JSON_ASSERT_UNREACHABLE;
; 765  :    }
; 766  :    return 0; // unreachable;

	xor	eax, eax
$LN1@asUInt:

; 767  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@asUInt:

; 746  :    {
; 747  :    case nullValue:
; 748  :       return 0;
; 749  :    case intValue:
; 750  :       JSON_ASSERT_MESSAGE( value_.int_ >= 0, "Negative integer can not be converted to unsigned integer" );

	push	OFFSET ??_C@_0DK@NAHIGMFE@Negative?5integer?5can?5not?5be?5conv@
$LN17@asUInt:
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0runtime_error@std@@QAE@PBD@Z		; std::runtime_error::runtime_error
	push	OFFSET __TI2?AVruntime_error@std@@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__CxxThrowException@8
$LN21@asUInt:
$LN16@asUInt:
	npad	1
$LN20@asUInt:

; 767  : }

	DD	$LN13@asUInt
	DD	$LN5@asUInt
	DD	$LN7@asUInt
	DD	$LN8@asUInt
	DD	$LN12@asUInt
	DD	$LN11@asUInt
	DD	$LN12@asUInt
	DD	$LN12@asUInt
?asUInt@Value@Json@@QBEIXZ ENDP				; Json::Value::asUInt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?asInt@Value@Json@@QBEHXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?asInt@Value@Json@@QBEHXZ PROC				; Json::Value::asInt, COMDAT
; _this$ = ecx

; 717  : {

	push	ebp
	mov	ebp, esp

; 718  :    switch ( type_ )

	movsx	eax, BYTE PTR [ecx+8]
	sub	esp, 12					; 0000000cH
	cmp	eax, 7
	ja	SHORT $LN13@asInt
	jmp	DWORD PTR $LN20@asInt[eax*4]
$LN5@asInt:

; 719  :    {
; 720  :    case nullValue:
; 721  :       return 0;
; 722  :    case intValue:
; 723  :       return value_.int_;

	mov	eax, DWORD PTR [ecx]

; 740  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@asInt:

; 724  :    case uintValue:
; 725  :       JSON_ASSERT_MESSAGE( value_.uint_ < (unsigned)maxInt, "integer out of signed integer range" );

	mov	eax, DWORD PTR [ecx]
	cmp	eax, 2147483647				; 7fffffffH
	jb	SHORT $LN1@asInt
	jmp	SHORT $LN18@asInt
$LN8@asInt:

; 726  :       return value_.uint_;
; 727  :    case realValue:
; 728  :       JSON_ASSERT_MESSAGE( value_.real_ >= minInt  &&  value_.real_ <= maxInt, "Real out of signed integer range" );

	movsd	xmm1, QWORD PTR [ecx]
	comisd	xmm1, QWORD PTR __real@c1e0000000000000
	jb	SHORT $LN10@asInt
	movsd	xmm0, QWORD PTR __real@41dfffffffc00000
	comisd	xmm0, xmm1
	jb	SHORT $LN10@asInt

; 729  :       return Int( value_.real_ );

	cvttsd2si eax, xmm1

; 740  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@asInt:

; 726  :       return value_.uint_;
; 727  :    case realValue:
; 728  :       JSON_ASSERT_MESSAGE( value_.real_ >= minInt  &&  value_.real_ <= maxInt, "Real out of signed integer range" );

	push	OFFSET ??_C@_0CB@PBEICPFN@Real?5out?5of?5signed?5integer?5range@
	jmp	SHORT $LN17@asInt
$LN11@asInt:

; 730  :    case booleanValue:
; 731  :       return value_.bool_ ? 1 : 0;

	xor	eax, eax
	cmp	BYTE PTR [ecx], al
	setne	al

; 740  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@asInt:

; 732  :    case stringValue:
; 733  :    case arrayValue:
; 734  :    case objectValue:
; 735  :       JSON_ASSERT_MESSAGE( false, "Type is not convertible to int" );

	push	OFFSET ??_C@_0BP@KDDCHLKA@Type?5is?5not?5convertible?5to?5int?$AA@
	jmp	SHORT $LN17@asInt
$LN13@asInt:

; 736  :    default:
; 737  :       JSON_ASSERT_UNREACHABLE;
; 738  :    }
; 739  :    return 0; // unreachable;

	xor	eax, eax
$LN1@asInt:

; 740  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@asInt:

; 724  :    case uintValue:
; 725  :       JSON_ASSERT_MESSAGE( value_.uint_ < (unsigned)maxInt, "integer out of signed integer range" );

	push	OFFSET ??_C@_0CE@MKMAPPKF@integer?5out?5of?5signed?5integer?5ra@
$LN17@asInt:
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0runtime_error@std@@QAE@PBD@Z		; std::runtime_error::runtime_error
	push	OFFSET __TI2?AVruntime_error@std@@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__CxxThrowException@8
$LN21@asInt:
$LN16@asInt:
	npad	3
$LN20@asInt:

; 740  : }

	DD	$LN13@asInt
	DD	$LN5@asInt
	DD	$LN6@asInt
	DD	$LN8@asInt
	DD	$LN12@asInt
	DD	$LN11@asInt
	DD	$LN12@asInt
	DD	$LN12@asInt
?asInt@Value@Json@@QBEHXZ ENDP				; Json::Value::asInt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?asString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 12
$T2 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?asString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; Json::Value::asString, COMDAT
; _this$ = ecx

; 686  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 687  :    switch ( type_ )

	movsx	eax, BYTE PTR [ecx+8]
	mov	DWORD PTR $T2[ebp], 0
	push	esi
	cmp	eax, 7
	ja	SHORT $LN8@asString
	jmp	DWORD PTR $LN133@asString[eax*4]
$LN4@asString:

; 688  :    {
; 689  :    case nullValue:
; 690  :       return "";

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	esi

; 705  : }

	mov	esp, ebp
	pop	ebp
	ret	4
$LN5@asString:

; 691  :    case stringValue:
; 692  :       return value_.string_ ? value_.string_ : "";

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	mov	ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	cmovne	ecx, eax
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	esi

; 705  : }

	mov	esp, ebp
	pop	ebp
	ret	4
$LN6@asString:

; 693  :    case booleanValue:
; 694  :       return value_.bool_ ? "true" : "false";

	cmp	BYTE PTR [ecx], 0
	mov	edx, OFFSET ??_C@_05LAPONLG@false?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, OFFSET ??_C@_04LOAJBDKD@true?$AA@
	cmove	eax, edx
	push	eax
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	esi

; 705  : }

	mov	esp, ebp
	pop	ebp
	ret	4
$LN8@asString:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]

; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	ecx, esi
	push	0
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 704  :    return ""; // unreachable

	mov	eax, esi
	pop	esi

; 705  : }

	mov	esp, ebp
	pop	ebp
	ret	4
$LN132@asString:

; 695  :    case intValue:
; 696  :    case uintValue:
; 697  :    case realValue:
; 698  :    case arrayValue:
; 699  :    case objectValue:
; 700  :       JSON_ASSERT_MESSAGE( false, "Type is not convertible to string" );

	push	OFFSET ??_C@_0CC@BNBMBIGA@Type?5is?5not?5convertible?5to?5strin@
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0runtime_error@std@@QAE@PBD@Z		; std::runtime_error::runtime_error
	push	OFFSET __TI2?AVruntime_error@std@@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__CxxThrowException@8
$LN134@asString:
$LN131@asString:
	npad	3
$LN133@asString:

; 705  : }

	DD	$LN4@asString
	DD	$LN132@asString
	DD	$LN132@asString
	DD	$LN132@asString
	DD	$LN5@asString
	DD	$LN6@asString
	DD	$LN132@asString
	DD	$LN132@asString
?asString@Value@Json@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; Json::Value::asString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?asCString@Value@Json@@QBEPBDXZ
_TEXT	SEGMENT
?asCString@Value@Json@@QBEPBDXZ PROC			; Json::Value::asCString, COMDAT
; _this$ = ecx

; 679  :    JSON_ASSERT( type_ == stringValue );
; 680  :    return value_.string_;

	mov	eax, DWORD PTR [ecx]

; 681  : }

	ret	0
?asCString@Value@Json@@QBEPBDXZ ENDP			; Json::Value::asCString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?compare@Value@Json@@QAEHABV12@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
?compare@Value@Json@@QAEHABV12@@Z PROC			; Json::Value::compare, COMDAT
; _this$ = ecx

; 537  :    /*
; 538  :    int typeDelta = other.type_ - type_;
; 539  :    switch ( type_ )
; 540  :    {
; 541  :    case nullValue:
; 542  : 
; 543  :       return other.type_ == type_;
; 544  :    case intValue:
; 545  :       if ( other.type_.isNumeric()
; 546  :    case uintValue:
; 547  :    case realValue:
; 548  :    case booleanValue:
; 549  :       break;
; 550  :    case stringValue,
; 551  :       break;
; 552  :    case arrayValue:
; 553  :       delete value_.array_;
; 554  :       break;
; 555  :    case objectValue:
; 556  :       delete value_.map_;
; 557  :    default:
; 558  :       JSON_ASSERT_UNREACHABLE;
; 559  :    }
; 560  :    */
; 561  :    return 0;  // unreachable

	xor	eax, eax

; 562  : }

	ret	4
?compare@Value@Json@@QAEHABV12@@Z ENDP			; Json::Value::compare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??9Value@Json@@QBE_NABV01@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
??9Value@Json@@QBE_NABV01@@Z PROC			; Json::Value::operator!=, COMDAT
; _this$ = ecx

; 672  : {

	push	ebp
	mov	ebp, esp

; 673  :    return !( *this == other );

	push	DWORD PTR _other$[ebp]
	call	??8Value@Json@@QBE_NABV01@@Z		; Json::Value::operator==
	xor	ecx, ecx
	test	al, al
	sete	cl
	mov	al, cl

; 674  : }

	pop	ebp
	ret	4
??9Value@Json@@QBE_NABV01@@Z ENDP			; Json::Value::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??8Value@Json@@QBE_NABV01@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
??8Value@Json@@QBE_NABV01@@Z PROC			; Json::Value::operator==, COMDAT
; _this$ = ecx

; 628  : {

	push	ebp
	mov	ebp, esp

; 629  :    //if ( type_ != other.type_ )
; 630  :    // GCC 2.95.3 says:
; 631  :    // attempt to take address of bit-field structure member `Json::Value::type_'
; 632  :    // Beats me, but a temp solves the problem.
; 633  :    int temp = other.type_;
; 634  :    if ( type_ != temp )

	mov	edx, DWORD PTR _other$[ebp]
	mov	al, BYTE PTR [ecx+8]
	cmp	al, BYTE PTR [edx+8]
	jne	$LN12@operator

; 635  :       return false;
; 636  :    switch ( type_ )

	movsx	eax, al
	cmp	eax, 7
	ja	$LN12@operator
	jmp	DWORD PTR $LN56@operator[eax*4]
$LN5@operator:

; 637  :    {
; 638  :    case nullValue:
; 639  :       return true;

	mov	al, 1

; 668  : }

	pop	ebp
	ret	4
$LN6@operator:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	sete	al
	pop	ebp
	ret	4
$LN8@operator:

; 640  :    case intValue:
; 641  :       return value_.int_ == other.value_.int_;
; 642  :    case uintValue:
; 643  :       return value_.uint_ == other.value_.uint_;
; 644  :    case realValue:
; 645  :       return value_.real_ == other.value_.real_;

	movsd	xmm0, QWORD PTR [ecx]
	ucomisd	xmm0, QWORD PTR [edx]
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN17@operator
$LN14@operator:
	xor	eax, eax

; 668  : }

	pop	ebp
	ret	4
$LN9@operator:
	mov	al, BYTE PTR [ecx]
	cmp	al, BYTE PTR [edx]
	sete	al
	pop	ebp
	ret	4
$LN10@operator:

; 646  :    case booleanValue:
; 647  :       return value_.bool_ == other.value_.bool_;
; 648  :    case stringValue:
; 649  :       return ( value_.string_ == other.value_.string_ )

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	cmp	eax, ecx
	je	SHORT $LN17@operator
	test	ecx, ecx
	je	SHORT $LN14@operator
	test	eax, eax
	je	SHORT $LN14@operator
$LL51@operator:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN52@operator
	test	dl, dl
	je	SHORT $LN53@operator
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN52@operator
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL51@operator
$LN53@operator:
	xor	eax, eax
	jmp	SHORT $LN54@operator
$LN52@operator:
	sbb	eax, eax
	or	eax, 1
$LN54@operator:
	test	eax, eax
	je	SHORT $LN17@operator

; 640  :    case intValue:
; 641  :       return value_.int_ == other.value_.int_;
; 642  :    case uintValue:
; 643  :       return value_.uint_ == other.value_.uint_;
; 644  :    case realValue:
; 645  :       return value_.real_ == other.value_.real_;

	xor	eax, eax

; 668  : }

	pop	ebp
	ret	4
$LN11@operator:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 945  : 		return (_Get_data()._Mysize);

	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 656  :       return value_.map_->size() == other.value_.map_->size()

	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+4]
	jne	SHORT $LN14@operator
	push	edx
	push	ecx
	call	??$?8V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@YA_NABV?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@0@Z ; std::operator==<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
	add	esp, 8
	test	al, al
	je	SHORT $LN14@operator
$LN17@operator:
	mov	eax, 1

; 668  : }

	pop	ebp
	ret	4
$LN12@operator:

; 657  :              && (*value_.map_) == (*other.value_.map_);
; 658  : #else
; 659  :    case arrayValue:
; 660  :       return value_.array_->compare( *(other.value_.array_) ) == 0;
; 661  :    case objectValue:
; 662  :       return value_.map_->compare( *(other.value_.map_) ) == 0;
; 663  : #endif
; 664  :    default:
; 665  :       JSON_ASSERT_UNREACHABLE;
; 666  :    }
; 667  :    return 0;  // unreachable

	xor	al, al

; 668  : }

	pop	ebp
	ret	4
	npad	3
$LN56@operator:
	DD	$LN5@operator
	DD	$LN6@operator
	DD	$LN6@operator
	DD	$LN8@operator
	DD	$LN10@operator
	DD	$LN9@operator
	DD	$LN11@operator
	DD	$LN11@operator
??8Value@Json@@QBE_NABV01@@Z ENDP			; Json::Value::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??OValue@Json@@QBE_NABV01@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
??OValue@Json@@QBE_NABV01@@Z PROC			; Json::Value::operator>, COMDAT
; _this$ = ecx

; 622  : {

	push	ebp
	mov	ebp, esp

; 623  :    return other < *this;

	push	ecx
	mov	ecx, DWORD PTR _other$[ebp]
	call	??MValue@Json@@QBE_NABV01@@Z		; Json::Value::operator<

; 624  : }

	pop	ebp
	ret	4
??OValue@Json@@QBE_NABV01@@Z ENDP			; Json::Value::operator>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??PValue@Json@@QBE_NABV01@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
??PValue@Json@@QBE_NABV01@@Z PROC			; Json::Value::operator>=, COMDAT
; _this$ = ecx

; 616  : {

	push	ebp
	mov	ebp, esp

; 617  :    return !(*this < other);

	push	DWORD PTR _other$[ebp]
	call	??MValue@Json@@QBE_NABV01@@Z		; Json::Value::operator<
	xor	ecx, ecx
	test	al, al
	sete	cl
	mov	al, cl

; 618  : }

	pop	ebp
	ret	4
??PValue@Json@@QBE_NABV01@@Z ENDP			; Json::Value::operator>=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??NValue@Json@@QBE_NABV01@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
??NValue@Json@@QBE_NABV01@@Z PROC			; Json::Value::operator<=, COMDAT
; _this$ = ecx

; 610  : {

	push	ebp
	mov	ebp, esp

; 623  :    return other < *this;

	push	DWORD PTR _other$[ebp]
	call	??MValue@Json@@QBE_NABV01@@Z		; Json::Value::operator<

; 611  :    return !(other > *this);

	xor	ecx, ecx
	test	al, al
	sete	cl
	mov	al, cl

; 612  : }

	pop	ebp
	ret	4
??NValue@Json@@QBE_NABV01@@Z ENDP			; Json::Value::operator<=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??MValue@Json@@QBE_NABV01@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
??MValue@Json@@QBE_NABV01@@Z PROC			; Json::Value::operator<, COMDAT
; _this$ = ecx

; 566  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 567  :    int typeDelta = type_ - other.type_;

	mov	esi, DWORD PTR _other$[ebp]
	push	edi
	movsx	edi, BYTE PTR [ecx+8]
	mov	eax, edi
	movsx	edx, BYTE PTR [esi+8]
	sub	eax, edx

; 568  :    if ( typeDelta )

	je	SHORT $LN4@operator
$LN53@operator:
	pop	edi

; 569  :       return typeDelta < 0 ? true : false;

	shr	eax, 31					; 0000001fH
	pop	esi

; 606  : }

	pop	ebp
	ret	4
$LN4@operator:

; 570  :    switch ( type_ )

	cmp	edi, 7
	ja	$LN13@operator
	jmp	DWORD PTR $LN55@operator[edi*4]
$LN6@operator:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [esi]
	pop	edi
	setl	al
	pop	esi

; 606  : }

	pop	ebp
	ret	4
$LN7@operator:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [esi]
	pop	edi
	setb	al
	pop	esi
	pop	ebp
	ret	4
$LN8@operator:

; 571  :    {
; 572  :    case nullValue:
; 573  :       return false;
; 574  :    case intValue:
; 575  :       return value_.int_ < other.value_.int_;
; 576  :    case uintValue:
; 577  :       return value_.uint_ < other.value_.uint_;
; 578  :    case realValue:
; 579  :       return value_.real_ < other.value_.real_;

	movsd	xmm0, QWORD PTR [esi]
	xor	eax, eax
	comisd	xmm0, QWORD PTR [ecx]
	pop	edi
	pop	esi
	seta	al

; 606  : }

	pop	ebp
	ret	4
$LN9@operator:
	mov	al, BYTE PTR [ecx]
	cmp	al, BYTE PTR [esi]
	pop	edi
	setb	al
	pop	esi
	pop	ebp
	ret	4
$LN10@operator:

; 580  :    case booleanValue:
; 581  :       return value_.bool_ < other.value_.bool_;
; 582  :    case stringValue:
; 583  :       return ( value_.string_ == 0  &&  other.value_.string_ )

	mov	ecx, DWORD PTR [ecx]
	test	ecx, ecx
	jne	SHORT $LN15@operator
	cmp	DWORD PTR [esi], ecx
	jne	SHORT $LN17@operator
$LN16@operator:
	pop	edi
	xor	eax, eax
	pop	esi

; 606  : }

	pop	ebp
	ret	4
$LN15@operator:

; 580  :    case booleanValue:
; 581  :       return value_.bool_ < other.value_.bool_;
; 582  :    case stringValue:
; 583  :       return ( value_.string_ == 0  &&  other.value_.string_ )

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN16@operator
$LL49@operator:
	mov	dl, BYTE PTR [ecx]
	cmp	dl, BYTE PTR [eax]
	jne	SHORT $LN50@operator
	test	dl, dl
	je	SHORT $LN51@operator
	mov	dl, BYTE PTR [ecx+1]
	cmp	dl, BYTE PTR [eax+1]
	jne	SHORT $LN50@operator
	add	ecx, 2
	add	eax, 2
	test	dl, dl
	jne	SHORT $LL49@operator
$LN51@operator:
	xor	eax, eax
	jmp	SHORT $LN52@operator
$LN50@operator:
	sbb	eax, eax
	or	eax, 1
$LN52@operator:
	test	eax, eax
	jns	SHORT $LN16@operator
$LN17@operator:
	pop	edi
	mov	eax, 1
	pop	esi

; 606  : }

	pop	ebp
	ret	4
$LN11@operator:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 945  : 		return (_Get_data()._Mysize);

	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [esi]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 591  :          int delta = int( value_.map_->size() - other.value_.map_->size() );

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [edx+4]

; 592  :          if ( delta )

	jne	$LN53@operator

; 593  :             return delta < 0;
; 594  :          return (*value_.map_) < (*other.value_.map_);

	push	edx
	push	ecx
	call	??$?MV?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@YA_NABV?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@0@0@Z ; std::operator<<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >
	add	esp, 8
	pop	edi
	pop	esi

; 606  : }

	pop	ebp
	ret	4
$LN13@operator:
	pop	edi

; 595  :       }
; 596  : #else
; 597  :    case arrayValue:
; 598  :       return value_.array_->compare( *(other.value_.array_) ) < 0;
; 599  :    case objectValue:
; 600  :       return value_.map_->compare( *(other.value_.map_) ) < 0;
; 601  : #endif
; 602  :    default:
; 603  :       JSON_ASSERT_UNREACHABLE;
; 604  :    }
; 605  :    return 0;  // unreachable

	xor	al, al
	pop	esi

; 606  : }

	pop	ebp
	ret	4
	npad	3
$LN55@operator:
	DD	$LN13@operator
	DD	$LN6@operator
	DD	$LN7@operator
	DD	$LN8@operator
	DD	$LN10@operator
	DD	$LN9@operator
	DD	$LN11@operator
	DD	$LN11@operator
??MValue@Json@@QBE_NABV01@@Z ENDP			; Json::Value::operator<
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?type@Value@Json@@QBE?AW4ValueType@2@XZ
_TEXT	SEGMENT
?type@Value@Json@@QBE?AW4ValueType@2@XZ PROC		; Json::Value::type, COMDAT
; _this$ = ecx

; 530  :    return type_;

	movsx	eax, BYTE PTR [ecx+8]

; 531  : }

	ret	0
?type@Value@Json@@QBE?AW4ValueType@2@XZ ENDP		; Json::Value::type
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?swap@Value@Json@@QAEXAAV12@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
?swap@Value@Json@@QAEXAAV12@@Z PROC			; Json::Value::swap, COMDAT
; _this$ = ecx

; 517  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	push	edi

; 518  :    ValueType temp = type_;
; 519  :    type_ = other.type_;

	mov	edi, DWORD PTR _other$[ebp]
	movsx	edx, BYTE PTR [esi+8]
	mov	al, BYTE PTR [edi+8]
	mov	BYTE PTR [esi+8], al

; 520  :    other.type_ = temp;

	mov	BYTE PTR [edi+8], dl
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 49   : 	_Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]

; 50   : 	_Left = _STD move(_Right);

	mov	eax, DWORD PTR [edi]
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax

; 51   : 	_Right = _STD move(_Tmp);

	mov	DWORD PTR [edi+4], edx
	mov	DWORD PTR [edi], ecx
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 522  :    int temp2 = allocated_;

	mov	ecx, DWORD PTR [esi+8]
	mov	edx, ecx

; 523  :    allocated_ = other.allocated_;

	mov	eax, DWORD PTR [edi+8]
	shl	edx, 23					; 00000017H
	xor	eax, ecx
	sar	edx, 31					; 0000001fH
	and	eax, 256				; 00000100H
	xor	eax, ecx

; 524  :    other.allocated_ = temp2;

	shl	edx, 8
	mov	DWORD PTR [esi+8], eax
	xor	edx, DWORD PTR [edi+8]
	and	edx, 256				; 00000100H
	xor	DWORD PTR [edi+8], edx
	pop	edi
	pop	esi

; 525  : }

	pop	ebp
	ret	4
?swap@Value@Json@@QAEXAAV12@@Z ENDP			; Json::Value::swap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??4Value@Json@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_temp$ = -16						; size = 16
_other$ = 8						; size = 4
??4Value@Json@@QAEAAV01@ABV01@@Z PROC			; Json::Value::operator=, COMDAT
; _this$ = ecx

; 509  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi

; 510  :    Value temp( other );

	push	DWORD PTR _other$[ebp]
	mov	esi, ecx
	lea	ecx, DWORD PTR _temp$[ebp]
	call	??0Value@Json@@QAE@ABV01@@Z		; Json::Value::Value

; 518  :    ValueType temp = type_;

	movsx	eax, BYTE PTR [esi+8]

; 519  :    type_ = other.type_;

	mov	ebx, DWORD PTR _temp$[ebp+8]

; 520  :    other.type_ = temp;

	xor	eax, ebx
	mov	BYTE PTR [esi+8], bl
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 49   : 	_Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [esi+4]
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 520  :    other.type_ = temp;

	movzx	eax, al
	xor	ebx, eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 50   : 	_Left = _STD move(_Right);

	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR _temp$[ebp+4]
	mov	DWORD PTR [esi+4], eax

; 51   : 	_Right = _STD move(_Tmp);

	mov	DWORD PTR _temp$[ebp+4], edx
	mov	DWORD PTR _temp$[ebp], ecx
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 522  :    int temp2 = allocated_;

	mov	ecx, DWORD PTR [esi+8]
	mov	edx, ecx
	shl	edx, 23					; 00000017H

; 523  :    allocated_ = other.allocated_;

	mov	eax, ecx
	sar	edx, 31					; 0000001fH
	xor	eax, ebx

; 524  :    other.allocated_ = temp2;

	shl	edx, 8
	and	eax, 256				; 00000100H
	xor	edx, ebx
	xor	eax, ecx
	and	edx, 256				; 00000100H
	mov	DWORD PTR [esi+8], eax
	xor	ebx, edx

; 511  :    swap( temp );
; 512  :    return *this;

	lea	ecx, DWORD PTR _temp$[ebp]

; 524  :    other.allocated_ = temp2;

	mov	DWORD PTR _temp$[ebp+8], ebx

; 511  :    swap( temp );
; 512  :    return *this;

	call	??1Value@Json@@QAE@XZ			; Json::Value::~Value
	mov	eax, esi
	pop	esi
	pop	ebx

; 513  : }

	mov	esp, ebp
	pop	ebp
	ret	4
??4Value@Json@@QAEAAV01@ABV01@@Z ENDP			; Json::Value::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??1Value@Json@@QAE@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Value@Json@@QAE@XZ PROC				; Json::Value::~Value, COMDAT
; _this$ = ecx

; 473  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1Value@Json@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx

; 474  :    switch ( type_ )

	movsx	eax, BYTE PTR [esi+8]
	cmp	eax, 4
	je	SHORT $LN5@Value
	add	eax, -6					; fffffffaH
	cmp	eax, 1
	ja	SHORT $LN6@Value

; 485  :       break;
; 486  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 487  :    case arrayValue:
; 488  :    case objectValue:
; 489  :       delete value_.map_;

	mov	edi, DWORD PTR [esi]
	test	edi, edi
	je	SHORT $LN6@Value
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

	mov	eax, DWORD PTR [edi]

; 2168 : 		erase(begin(), end());

	mov	ecx, edi
	push	eax

; 1090 : 		{	// destroy tree

	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2168 : 		erase(begin(), end());

	push	DWORD PTR [eax]
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	?erase@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	40					; 00000028H
	push	1
	push	DWORD PTR [edi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	push	8
	push	edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1092 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 20					; 00000014H
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 490  :       break;

	jmp	SHORT $LN6@Value
$LN5@Value:

; 475  :    {
; 476  :    case nullValue:
; 477  :    case intValue:
; 478  :    case uintValue:
; 479  :    case realValue:
; 480  :    case booleanValue:
; 481  :       break;
; 482  :    case stringValue:
; 483  :       if ( allocated_ )

	test	DWORD PTR [esi+8], 256			; 00000100H
	je	SHORT $LN6@Value

; 484  :          valueAllocator()->releaseStringValue( value_.string_ );

	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+16]
$LN6@Value:

; 491  : #else
; 492  :    case arrayValue:
; 493  :       arrayAllocator()->destructArray( value_.array_ );
; 494  :       break;
; 495  :    case objectValue:
; 496  :       mapAllocator()->destructMap( value_.map_ );
; 497  :       break;
; 498  : #endif
; 499  :    default:
; 500  :       JSON_ASSERT_UNREACHABLE;
; 501  :    }
; 502  : 
; 503  :    if ( comments_ )

	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	je	SHORT $LN178@Value
	push	OFFSET ??1CommentInfo@Value@Json@@QAE@XZ ; Json::Value::CommentInfo::~CommentInfo
	push	DWORD PTR [eax-4]
	lea	esi, DWORD PTR [eax-4]
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	push	4
	push	eax
	call	??_M@YGXPAXIIP6EX0@Z@Z
	mov	eax, DWORD PTR [esi]
	lea	eax, DWORD PTR [eax*4+4]
	push	eax
	push	esi
	call	??_V@YAXPAXI@Z				; operator delete[]
	add	esp, 8
$LN178@Value:

; 504  :       delete[] comments_;
; 505  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Value@Json@@QAE@XZ$2:
	call	___std_terminate
	ret	0
__unwindfunclet$??1Value@Json@@QAE@XZ$39:
	call	___std_terminate
	ret	0
__ehhandler$??1Value@Json@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1Value@Json@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1Value@Json@@QAE@XZ ENDP				; Json::Value::~Value
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0Value@Json@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T3 = 8							; size = 4
_other$ = 8						; size = 4
$T4 = 11						; size = 1
??0Value@Json@@QAE@ABV01@@Z PROC			; Json::Value::Value, COMDAT
; _this$ = ecx

; 424  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Value@Json@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	edi, ecx

; 419  :    : type_( other.type_ )

	mov	ebx, DWORD PTR _other$[ebp]
	mov	al, BYTE PTR [ebx+8]
	mov	BYTE PTR [edi+8], al

; 425  :    switch ( type_ )

	movsx	eax, al
	mov	DWORD PTR [edi+12], 0
	cmp	eax, 7
	ja	SHORT $LN12@Value
	jmp	DWORD PTR $LN47@Value[eax*4]
$LN7@Value:

; 426  :    {
; 427  :    case nullValue:
; 428  :    case intValue:
; 429  :    case uintValue:
; 430  :    case realValue:
; 431  :    case booleanValue:
; 432  :       value_ = other.value_;

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [edi], eax
	mov	eax, DWORD PTR [ebx+4]
	mov	DWORD PTR [edi+4], eax

; 433  :       break;

	jmp	SHORT $LN12@Value
$LN8@Value:

; 434  :    case stringValue:
; 435  :       if ( other.value_.string_ )

	cmp	DWORD PTR [ebx], 0
	je	SHORT $LN9@Value

; 436  :       {
; 437  :          value_.string_ = valueAllocator()->duplicateStringValue( other.value_.string_ );

	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	-1
	push	DWORD PTR [ebx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+12]

; 438  :          allocated_ = true;

	or	DWORD PTR [edi+8], 256			; 00000100H
	mov	DWORD PTR [edi], eax

; 439  :       }
; 440  :       else

	jmp	SHORT $LN12@Value
$LN9@Value:

; 441  :          value_.string_ = 0;

	mov	DWORD PTR [edi], 0

; 442  :       break;

	jmp	SHORT $LN12@Value
$LN11@Value:

; 446  :       value_.map_ = new ObjectValues( *other.value_.map_ );

	push	8
	call	??2@YAPAXI@Z				; operator new
	mov	esi, eax
	add	esp, 4
	mov	DWORD PTR $T2[ebp], esi
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	esi, esi
	je	SHORT $LN16@Value
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 109  : 		: _Mybase(_Right,

	lea	eax, DWORD PTR $T4[ebp]
	mov	ecx, esi
	push	eax
	push	DWORD PTR [ebx]
	call	??$?0U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@$0A@@std@@@std@@QAE@ABV01@$$QAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@PAX@std@@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> >::_Tree<std::_Tmap_traits<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> >,0> ><std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<Json::Value::CZString const ,Json::Value>,void *> > > >
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 446  :       value_.map_ = new ObjectValues( *other.value_.map_ );

	jmp	SHORT $LN17@Value
$LN16@Value:
	xor	esi, esi
$LN17@Value:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	DWORD PTR [edi], esi
$LN12@Value:

; 447  :       break;
; 448  : #else
; 449  :    case arrayValue:
; 450  :       value_.array_ = arrayAllocator()->newArrayCopy( *other.value_.array_ );
; 451  :       break;
; 452  :    case objectValue:
; 453  :       value_.map_ = mapAllocator()->newMapCopy( *other.value_.map_ );
; 454  :       break;
; 455  : #endif
; 456  :    default:
; 457  :       JSON_ASSERT_UNREACHABLE;
; 458  :    }
; 459  :    if ( other.comments_ )

	cmp	DWORD PTR [ebx+12], 0
	je	SHORT $LN45@Value

; 460  :    {
; 461  :       comments_ = new CommentInfo[numberOfCommentPlacement];

	push	16					; 00000010H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	test	eax, eax
	je	SHORT $LN18@Value
	push	OFFSET ??1CommentInfo@Value@Json@@QAE@XZ ; Json::Value::CommentInfo::~CommentInfo
	push	OFFSET ??0CommentInfo@Value@Json@@QAE@XZ ; Json::Value::CommentInfo::CommentInfo
	push	3
	lea	esi, DWORD PTR [eax+4]
	mov	DWORD PTR [eax], 3
	push	4
	push	esi
	call	??_L@YGXPAXIIP6EX0@Z1@Z
	jmp	SHORT $LN19@Value
$LN18@Value:
	xor	esi, esi
$LN19@Value:
	mov	DWORD PTR [edi+12], esi
	xor	esi, esi
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	npad	6
$LL6@Value:

; 463  :       {
; 464  :          const CommentInfo &otherComment = other.comments_[comment];

	mov	eax, DWORD PTR [ebx+12]

; 465  :          if ( otherComment.comment_ )

	mov	eax, DWORD PTR [eax+esi]
	test	eax, eax
	je	SHORT $LN4@Value

; 466  :             comments_[comment].setComment( otherComment.comment_ );

	mov	ecx, DWORD PTR [edi+12]
	push	eax
	add	ecx, esi
	call	?setComment@CommentInfo@Value@Json@@QAEXPBD@Z ; Json::Value::CommentInfo::setComment
$LN4@Value:

; 462  :       for ( int comment =0; comment < numberOfCommentPlacement; ++comment )

	add	esi, 4
	cmp	esi, 12					; 0000000cH
	jl	SHORT $LL6@Value
$LN45@Value:

; 467  :       }
; 468  :    }
; 469  : }

	mov	eax, edi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN47@Value:
	DD	$LN7@Value
	DD	$LN7@Value
	DD	$LN7@Value
	DD	$LN7@Value
	DD	$LN8@Value
	DD	$LN7@Value
	DD	$LN11@Value
	DD	$LN11@Value
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Value@Json@@QAE@ABV01@@Z$0:
	push	8
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$??0Value@Json@@QAE@ABV01@@Z$1:
	push	16					; 00000010H
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??_V@YAXPAXI@Z				; operator delete[]
	add	esp, 8
	ret	0
__ehhandler$??0Value@Json@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Value@Json@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Value@Json@@QAE@ABV01@@Z ENDP			; Json::Value::Value
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0Value@Json@@QAE@_N@Z
_TEXT	SEGMENT
_value$ = 8						; size = 1
??0Value@Json@@QAE@_N@Z PROC				; Json::Value::Value, COMDAT
; _this$ = ecx

; 413  : {

	push	ebp
	mov	ebp, esp

; 414  :    value_.bool_ = value;

	mov	al, BYTE PTR _value$[ebp]
	mov	BYTE PTR [ecx], al

; 415  : }

	mov	eax, ecx
	mov	BYTE PTR [ecx+8], 5
	mov	DWORD PTR [ecx+12], 0
	pop	ebp
	ret	4
??0Value@Json@@QAE@_N@Z ENDP				; Json::Value::Value
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0Value@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
??0Value@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Json::Value::Value, COMDAT
; _this$ = ecx

; 376  : {

	push	ebp
	mov	ebp, esp

; 100  :    static DefaultValueAllocator defaultAllocator;

	mov	eax, DWORD PTR fs:__tls_array
	mov	edx, DWORD PTR __tls_index
	push	esi

; 376  : {

	mov	esi, ecx
	push	edi

; 100  :    static DefaultValueAllocator defaultAllocator;

	mov	edx, DWORD PTR [eax+edx*4]

; 101  :    static ValueAllocator *valueAllocator = &defaultAllocator;
; 102  :    return valueAllocator;
; 103  : }
; 104  : 
; 105  : static struct DummyValueAllocatorInitializer {
; 106  :    DummyValueAllocatorInitializer() 
; 107  :    {
; 108  :       valueAllocator();      // ensure valueAllocator() statics are initialized before main().
; 109  :    }
; 110  : } dummyValueAllocatorInitializer;
; 111  : 
; 112  : 
; 113  : 
; 114  : // //////////////////////////////////////////////////////////////////
; 115  : // //////////////////////////////////////////////////////////////////
; 116  : // //////////////////////////////////////////////////////////////////
; 117  : // ValueInternals...
; 118  : // //////////////////////////////////////////////////////////////////
; 119  : // //////////////////////////////////////////////////////////////////
; 120  : // //////////////////////////////////////////////////////////////////
; 121  : #ifdef JSON_VALUE_USE_INTERNAL_MAP
; 122  : # include "json_internalarray.inl"
; 123  : # include "json_internalmap.inl"
; 124  : #endif // JSON_VALUE_USE_INTERNAL_MAP
; 125  : 
; 126  : # include "json_valueiterator.inl"
; 127  : 
; 128  : 
; 129  : // //////////////////////////////////////////////////////////////////
; 130  : // //////////////////////////////////////////////////////////////////
; 131  : // //////////////////////////////////////////////////////////////////
; 132  : // class Value::CommentInfo
; 133  : // //////////////////////////////////////////////////////////////////
; 134  : // //////////////////////////////////////////////////////////////////
; 135  : // //////////////////////////////////////////////////////////////////
; 136  : 
; 137  : 
; 138  : Value::CommentInfo::CommentInfo()
; 139  :    : comment_( 0 )
; 140  : {
; 141  : }
; 142  : 
; 143  : Value::CommentInfo::~CommentInfo()
; 144  : {
; 145  :    if ( comment_ )
; 146  :       valueAllocator()->releaseStringValue( comment_ );
; 147  : }
; 148  : 
; 149  : 
; 150  : void 
; 151  : Value::CommentInfo::setComment( const char *text )
; 152  : {
; 153  :    if ( comment_ )
; 154  :       valueAllocator()->releaseStringValue( comment_ );
; 155  :    JSON_ASSERT( text );
; 156  :    JSON_ASSERT_MESSAGE( text[0]=='\0' || text[0]=='/', "Comments must start with /");
; 157  :    // It seems that /**/ style comments are acceptable as well.
; 158  :    comment_ = valueAllocator()->duplicateStringValue( text );
; 159  : }
; 160  : 
; 161  : 
; 162  : // //////////////////////////////////////////////////////////////////
; 163  : // //////////////////////////////////////////////////////////////////
; 164  : // //////////////////////////////////////////////////////////////////
; 165  : // class Value::CZString
; 166  : // //////////////////////////////////////////////////////////////////
; 167  : // //////////////////////////////////////////////////////////////////
; 168  : // //////////////////////////////////////////////////////////////////
; 169  : # ifndef JSON_VALUE_USE_INTERNAL_MAP
; 170  : 
; 171  : // Notes: index_ indicates if the string was allocated when
; 172  : // a string is stored.
; 173  : 
; 174  : Value::CZString::CZString( int index )
; 175  :    : cstr_( 0 )
; 176  :    , index_( index )
; 177  : {
; 178  : }
; 179  : 
; 180  : Value::CZString::CZString( const char *cstr, DuplicationPolicy allocate )
; 181  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 
; 182  :                                   : cstr )
; 183  :    , index_( allocate )
; 184  : {
; 185  : }
; 186  : 
; 187  : Value::CZString::CZString( const CZString &other )
; 188  : : cstr_( other.index_ != noDuplication &&  other.cstr_ != 0
; 189  :                 ?  valueAllocator()->makeMemberName( other.cstr_ )
; 190  :                 : other.cstr_ )
; 191  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)
; 192  :                          : other.index_ )
; 193  : {
; 194  : }
; 195  : 
; 196  : Value::CZString::~CZString()
; 197  : {
; 198  :    if ( cstr_  &&  index_ == duplicate )
; 199  :       valueAllocator()->releaseMemberName( const_cast<char *>( cstr_ ) );
; 200  : }
; 201  : 
; 202  : void 
; 203  : Value::CZString::swap( CZString &other )
; 204  : {
; 205  :    std::swap( cstr_, other.cstr_ );
; 206  :    std::swap( index_, other.index_ );
; 207  : }
; 208  : 
; 209  : Value::CZString &
; 210  : Value::CZString::operator =( const CZString &other )
; 211  : {
; 212  :    CZString temp( other );
; 213  :    swap( temp );
; 214  :    return *this;
; 215  : }
; 216  : 
; 217  : bool 
; 218  : Value::CZString::operator<( const CZString &other ) const 
; 219  : {
; 220  :    if ( cstr_ )
; 221  :       return strcmp( cstr_, other.cstr_ ) < 0;
; 222  :    return index_ < other.index_;
; 223  : }
; 224  : 
; 225  : bool 
; 226  : Value::CZString::operator==( const CZString &other ) const 
; 227  : {
; 228  :    if ( cstr_ )
; 229  :       return strcmp( cstr_, other.cstr_ ) == 0;
; 230  :    return index_ == other.index_;
; 231  : }
; 232  : 
; 233  : 
; 234  : int 
; 235  : Value::CZString::index() const
; 236  : {
; 237  :    return index_;
; 238  : }
; 239  : 
; 240  : 
; 241  : const char *
; 242  : Value::CZString::c_str() const
; 243  : {
; 244  :    return cstr_;
; 245  : }
; 246  : 
; 247  : bool 
; 248  : Value::CZString::isStaticString() const
; 249  : {
; 250  :    return index_ == noDuplication;
; 251  : }
; 252  : 
; 253  : #endif // ifndef JSON_VALUE_USE_INTERNAL_MAP
; 254  : 
; 255  : 
; 256  : // //////////////////////////////////////////////////////////////////
; 257  : // //////////////////////////////////////////////////////////////////
; 258  : // //////////////////////////////////////////////////////////////////
; 259  : // class Value::Value
; 260  : // //////////////////////////////////////////////////////////////////
; 261  : // //////////////////////////////////////////////////////////////////
; 262  : // //////////////////////////////////////////////////////////////////
; 263  : 
; 264  : /*! \internal Default constructor initialization must be equivalent to:
; 265  :  * memset( this, 0, sizeof(Value) )
; 266  :  * This optimization is used in ValueInternalMap fast allocator.
; 267  :  */
; 268  : Value::Value( ValueType type )
; 269  :    : type_( type )
; 270  :    , allocated_( 0 )
; 271  :    , comments_( 0 )
; 272  : # ifdef JSON_VALUE_USE_INTERNAL_MAP
; 273  :    , itemIsUsed_( 0 )
; 274  : #endif
; 275  : {
; 276  :    switch ( type )
; 277  :    {
; 278  :    case nullValue:
; 279  :       break;
; 280  :    case intValue:
; 281  :    case uintValue:
; 282  :       value_.int_ = 0;
; 283  :       break;
; 284  :    case realValue:
; 285  :       value_.real_ = 0.0;
; 286  :       break;
; 287  :    case stringValue:
; 288  :       value_.string_ = 0;
; 289  :       break;
; 290  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 291  :    case arrayValue:
; 292  :    case objectValue:
; 293  :       value_.map_ = new ObjectValues();
; 294  :       break;
; 295  : #else
; 296  :    case arrayValue:
; 297  :       value_.array_ = arrayAllocator()->newArray();
; 298  :       break;
; 299  :    case objectValue:
; 300  :       value_.map_ = mapAllocator()->newMap();
; 301  :       break;
; 302  : #endif
; 303  :    case booleanValue:
; 304  :       value_.bool_ = false;
; 305  :       break;
; 306  :    default:
; 307  :       JSON_ASSERT_UNREACHABLE;
; 308  :    }
; 309  : }
; 310  : 
; 311  : 
; 312  : Value::Value( Int value )
; 313  :    : type_( intValue )
; 314  :    , comments_( 0 )
; 315  : # ifdef JSON_VALUE_USE_INTERNAL_MAP
; 316  :    , itemIsUsed_( 0 )
; 317  : #endif
; 318  : {
; 319  :    value_.int_ = value;
; 320  : }
; 321  : 
; 322  : 
; 323  : Value::Value( UInt value )
; 324  :    : type_( uintValue )
; 325  :    , comments_( 0 )
; 326  : # ifdef JSON_VALUE_USE_INTERNAL_MAP
; 327  :    , itemIsUsed_( 0 )
; 328  : #endif
; 329  : {
; 330  :    value_.uint_ = value;
; 331  : }
; 332  : 
; 333  : Value::Value( double value )
; 334  :    : type_( realValue )
; 335  :    , comments_( 0 )
; 336  : # ifdef JSON_VALUE_USE_INTERNAL_MAP
; 337  :    , itemIsUsed_( 0 )
; 338  : #endif
; 339  : {
; 340  :    value_.real_ = value;
; 341  : }
; 342  : 
; 343  : Value::Value( const char *value )
; 344  :    : type_( stringValue )
; 345  :    , allocated_( true )
; 346  :    , comments_( 0 )
; 347  : # ifdef JSON_VALUE_USE_INTERNAL_MAP
; 348  :    , itemIsUsed_( 0 )
; 349  : #endif
; 350  : {
; 351  :    value_.string_ = valueAllocator()->duplicateStringValue( value );
; 352  : }
; 353  : 
; 354  : 
; 355  : Value::Value( const char *beginValue, 
; 356  :               const char *endValue )
; 357  :    : type_( stringValue )
; 358  :    , allocated_( true )
; 359  :    , comments_( 0 )
; 360  : # ifdef JSON_VALUE_USE_INTERNAL_MAP
; 361  :    , itemIsUsed_( 0 )
; 362  : #endif
; 363  : {
; 364  :    value_.string_ = valueAllocator()->duplicateStringValue( beginValue, 
; 365  :                                                             UInt(endValue - beginValue) );
; 366  : }
; 367  : 
; 368  : 
; 369  : Value::Value( const std::string &value )
; 370  :    : type_( stringValue )

	mov	BYTE PTR [esi+8], 4

; 371  :    , allocated_( true )

	or	DWORD PTR [esi+8], 256			; 00000100H

; 372  :    , comments_( 0 )

	mov	DWORD PTR [esi+12], 0

; 100  :    static DefaultValueAllocator defaultAllocator;

	mov	eax, DWORD PTR ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA
	cmp	eax, DWORD PTR __Init_thread_epoch[edx]
	jg	SHORT $LN41@Value
$LN4@Value:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1760 : 		return (this->_Mysize());

	mov	edx, DWORD PTR _value$[ebp]

; 521  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [edx+20], 16			; 00000010H

; 1760 : 		return (this->_Mysize());

	mov	edi, DWORD PTR [edx+16]

; 521  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN37@Value
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	edx, DWORD PTR [edx]
$LN37@Value:
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 377  :    value_.string_ = valueAllocator()->duplicateStringValue( value.c_str(), 

	mov	ecx, DWORD PTR ?valueAllocator@?1??0Json@@YAAAPAVValueAllocator@1@XZ@4PAV21@A
	push	edi
	push	edx
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+12]
	mov	DWORD PTR [esi], eax

; 378  :                                                             (unsigned int)value.length() );
; 379  : 
; 380  : }

	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebp
	ret	4
$LN41@Value:

; 100  :    static DefaultValueAllocator defaultAllocator;

	push	OFFSET ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA
	call	__Init_thread_header
	add	esp, 4
	cmp	DWORD PTR ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA, -1
	jne	SHORT $LN4@Value
	push	OFFSET ??__FdefaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ@YAXXZ ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator''
	mov	DWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, OFFSET ??_7DefaultValueAllocator@Json@@6B@
	call	_atexit
	push	OFFSET ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA
	call	__Init_thread_footer
	add	esp, 8
	jmp	SHORT $LN4@Value
??0Value@Json@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Json::Value::Value
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0Value@Json@@QAE@ABVStaticString@1@@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
??0Value@Json@@QAE@ABVStaticString@1@@Z PROC		; Json::Value::Value, COMDAT
; _this$ = ecx

; 389  : {

	push	ebp
	mov	ebp, esp

; 390  :    value_.string_ = const_cast<char *>( value.c_str() );

	mov	eax, DWORD PTR _value$[ebp]
	mov	BYTE PTR [ecx+8], 4
	and	DWORD PTR [ecx+8], -257			; fffffeffH
	mov	DWORD PTR [ecx+12], 0
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax

; 391  : }

	mov	eax, ecx
	pop	ebp
	ret	4
??0Value@Json@@QAE@ABVStaticString@1@@Z ENDP		; Json::Value::Value
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0Value@Json@@QAE@PBD0@Z
_TEXT	SEGMENT
_beginValue$ = 8					; size = 4
_endValue$ = 12						; size = 4
??0Value@Json@@QAE@PBD0@Z PROC				; Json::Value::Value, COMDAT
; _this$ = ecx

; 363  : {

	push	ebp
	mov	ebp, esp

; 100  :    static DefaultValueAllocator defaultAllocator;

	mov	eax, DWORD PTR fs:__tls_array
	mov	edx, DWORD PTR __tls_index
	push	esi
	push	edi

; 363  : {

	mov	edi, ecx

; 100  :    static DefaultValueAllocator defaultAllocator;

	mov	edx, DWORD PTR [eax+edx*4]

; 101  :    static ValueAllocator *valueAllocator = &defaultAllocator;
; 102  :    return valueAllocator;
; 103  : }
; 104  : 
; 105  : static struct DummyValueAllocatorInitializer {
; 106  :    DummyValueAllocatorInitializer() 
; 107  :    {
; 108  :       valueAllocator();      // ensure valueAllocator() statics are initialized before main().
; 109  :    }
; 110  : } dummyValueAllocatorInitializer;
; 111  : 
; 112  : 
; 113  : 
; 114  : // //////////////////////////////////////////////////////////////////
; 115  : // //////////////////////////////////////////////////////////////////
; 116  : // //////////////////////////////////////////////////////////////////
; 117  : // ValueInternals...
; 118  : // //////////////////////////////////////////////////////////////////
; 119  : // //////////////////////////////////////////////////////////////////
; 120  : // //////////////////////////////////////////////////////////////////
; 121  : #ifdef JSON_VALUE_USE_INTERNAL_MAP
; 122  : # include "json_internalarray.inl"
; 123  : # include "json_internalmap.inl"
; 124  : #endif // JSON_VALUE_USE_INTERNAL_MAP
; 125  : 
; 126  : # include "json_valueiterator.inl"
; 127  : 
; 128  : 
; 129  : // //////////////////////////////////////////////////////////////////
; 130  : // //////////////////////////////////////////////////////////////////
; 131  : // //////////////////////////////////////////////////////////////////
; 132  : // class Value::CommentInfo
; 133  : // //////////////////////////////////////////////////////////////////
; 134  : // //////////////////////////////////////////////////////////////////
; 135  : // //////////////////////////////////////////////////////////////////
; 136  : 
; 137  : 
; 138  : Value::CommentInfo::CommentInfo()
; 139  :    : comment_( 0 )
; 140  : {
; 141  : }
; 142  : 
; 143  : Value::CommentInfo::~CommentInfo()
; 144  : {
; 145  :    if ( comment_ )
; 146  :       valueAllocator()->releaseStringValue( comment_ );
; 147  : }
; 148  : 
; 149  : 
; 150  : void 
; 151  : Value::CommentInfo::setComment( const char *text )
; 152  : {
; 153  :    if ( comment_ )
; 154  :       valueAllocator()->releaseStringValue( comment_ );
; 155  :    JSON_ASSERT( text );
; 156  :    JSON_ASSERT_MESSAGE( text[0]=='\0' || text[0]=='/', "Comments must start with /");
; 157  :    // It seems that /**/ style comments are acceptable as well.
; 158  :    comment_ = valueAllocator()->duplicateStringValue( text );
; 159  : }
; 160  : 
; 161  : 
; 162  : // //////////////////////////////////////////////////////////////////
; 163  : // //////////////////////////////////////////////////////////////////
; 164  : // //////////////////////////////////////////////////////////////////
; 165  : // class Value::CZString
; 166  : // //////////////////////////////////////////////////////////////////
; 167  : // //////////////////////////////////////////////////////////////////
; 168  : // //////////////////////////////////////////////////////////////////
; 169  : # ifndef JSON_VALUE_USE_INTERNAL_MAP
; 170  : 
; 171  : // Notes: index_ indicates if the string was allocated when
; 172  : // a string is stored.
; 173  : 
; 174  : Value::CZString::CZString( int index )
; 175  :    : cstr_( 0 )
; 176  :    , index_( index )
; 177  : {
; 178  : }
; 179  : 
; 180  : Value::CZString::CZString( const char *cstr, DuplicationPolicy allocate )
; 181  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 
; 182  :                                   : cstr )
; 183  :    , index_( allocate )
; 184  : {
; 185  : }
; 186  : 
; 187  : Value::CZString::CZString( const CZString &other )
; 188  : : cstr_( other.index_ != noDuplication &&  other.cstr_ != 0
; 189  :                 ?  valueAllocator()->makeMemberName( other.cstr_ )
; 190  :                 : other.cstr_ )
; 191  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)
; 192  :                          : other.index_ )
; 193  : {
; 194  : }
; 195  : 
; 196  : Value::CZString::~CZString()
; 197  : {
; 198  :    if ( cstr_  &&  index_ == duplicate )
; 199  :       valueAllocator()->releaseMemberName( const_cast<char *>( cstr_ ) );
; 200  : }
; 201  : 
; 202  : void 
; 203  : Value::CZString::swap( CZString &other )
; 204  : {
; 205  :    std::swap( cstr_, other.cstr_ );
; 206  :    std::swap( index_, other.index_ );
; 207  : }
; 208  : 
; 209  : Value::CZString &
; 210  : Value::CZString::operator =( const CZString &other )
; 211  : {
; 212  :    CZString temp( other );
; 213  :    swap( temp );
; 214  :    return *this;
; 215  : }
; 216  : 
; 217  : bool 
; 218  : Value::CZString::operator<( const CZString &other ) const 
; 219  : {
; 220  :    if ( cstr_ )
; 221  :       return strcmp( cstr_, other.cstr_ ) < 0;
; 222  :    return index_ < other.index_;
; 223  : }
; 224  : 
; 225  : bool 
; 226  : Value::CZString::operator==( const CZString &other ) const 
; 227  : {
; 228  :    if ( cstr_ )
; 229  :       return strcmp( cstr_, other.cstr_ ) == 0;
; 230  :    return index_ == other.index_;
; 231  : }
; 232  : 
; 233  : 
; 234  : int 
; 235  : Value::CZString::index() const
; 236  : {
; 237  :    return index_;
; 238  : }
; 239  : 
; 240  : 
; 241  : const char *
; 242  : Value::CZString::c_str() const
; 243  : {
; 244  :    return cstr_;
; 245  : }
; 246  : 
; 247  : bool 
; 248  : Value::CZString::isStaticString() const
; 249  : {
; 250  :    return index_ == noDuplication;
; 251  : }
; 252  : 
; 253  : #endif // ifndef JSON_VALUE_USE_INTERNAL_MAP
; 254  : 
; 255  : 
; 256  : // //////////////////////////////////////////////////////////////////
; 257  : // //////////////////////////////////////////////////////////////////
; 258  : // //////////////////////////////////////////////////////////////////
; 259  : // class Value::Value
; 260  : // //////////////////////////////////////////////////////////////////
; 261  : // //////////////////////////////////////////////////////////////////
; 262  : // //////////////////////////////////////////////////////////////////
; 263  : 
; 264  : /*! \internal Default constructor initialization must be equivalent to:
; 265  :  * memset( this, 0, sizeof(Value) )
; 266  :  * This optimization is used in ValueInternalMap fast allocator.
; 267  :  */
; 268  : Value::Value( ValueType type )
; 269  :    : type_( type )
; 270  :    , allocated_( 0 )
; 271  :    , comments_( 0 )
; 272  : # ifdef JSON_VALUE_USE_INTERNAL_MAP
; 273  :    , itemIsUsed_( 0 )
; 274  : #endif
; 275  : {
; 276  :    switch ( type )
; 277  :    {
; 278  :    case nullValue:
; 279  :       break;
; 280  :    case intValue:
; 281  :    case uintValue:
; 282  :       value_.int_ = 0;
; 283  :       break;
; 284  :    case realValue:
; 285  :       value_.real_ = 0.0;
; 286  :       break;
; 287  :    case stringValue:
; 288  :       value_.string_ = 0;
; 289  :       break;
; 290  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 291  :    case arrayValue:
; 292  :    case objectValue:
; 293  :       value_.map_ = new ObjectValues();
; 294  :       break;
; 295  : #else
; 296  :    case arrayValue:
; 297  :       value_.array_ = arrayAllocator()->newArray();
; 298  :       break;
; 299  :    case objectValue:
; 300  :       value_.map_ = mapAllocator()->newMap();
; 301  :       break;
; 302  : #endif
; 303  :    case booleanValue:
; 304  :       value_.bool_ = false;
; 305  :       break;
; 306  :    default:
; 307  :       JSON_ASSERT_UNREACHABLE;
; 308  :    }
; 309  : }
; 310  : 
; 311  : 
; 312  : Value::Value( Int value )
; 313  :    : type_( intValue )
; 314  :    , comments_( 0 )
; 315  : # ifdef JSON_VALUE_USE_INTERNAL_MAP
; 316  :    , itemIsUsed_( 0 )
; 317  : #endif
; 318  : {
; 319  :    value_.int_ = value;
; 320  : }
; 321  : 
; 322  : 
; 323  : Value::Value( UInt value )
; 324  :    : type_( uintValue )
; 325  :    , comments_( 0 )
; 326  : # ifdef JSON_VALUE_USE_INTERNAL_MAP
; 327  :    , itemIsUsed_( 0 )
; 328  : #endif
; 329  : {
; 330  :    value_.uint_ = value;
; 331  : }
; 332  : 
; 333  : Value::Value( double value )
; 334  :    : type_( realValue )
; 335  :    , comments_( 0 )
; 336  : # ifdef JSON_VALUE_USE_INTERNAL_MAP
; 337  :    , itemIsUsed_( 0 )
; 338  : #endif
; 339  : {
; 340  :    value_.real_ = value;
; 341  : }
; 342  : 
; 343  : Value::Value( const char *value )
; 344  :    : type_( stringValue )
; 345  :    , allocated_( true )
; 346  :    , comments_( 0 )
; 347  : # ifdef JSON_VALUE_USE_INTERNAL_MAP
; 348  :    , itemIsUsed_( 0 )
; 349  : #endif
; 350  : {
; 351  :    value_.string_ = valueAllocator()->duplicateStringValue( value );
; 352  : }
; 353  : 
; 354  : 
; 355  : Value::Value( const char *beginValue, 
; 356  :               const char *endValue )
; 357  :    : type_( stringValue )

	mov	BYTE PTR [edi+8], 4

; 358  :    , allocated_( true )

	or	DWORD PTR [edi+8], 256			; 00000100H

; 359  :    , comments_( 0 )

	mov	DWORD PTR [edi+12], 0

; 100  :    static DefaultValueAllocator defaultAllocator;

	mov	eax, DWORD PTR ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA
	cmp	eax, DWORD PTR __Init_thread_epoch[edx]
	jg	SHORT $LN12@Value
$LN4@Value:

; 364  :    value_.string_ = valueAllocator()->duplicateStringValue( beginValue, 

	mov	ecx, DWORD PTR ?valueAllocator@?1??0Json@@YAAAPAVValueAllocator@1@XZ@4PAV21@A
	mov	edx, DWORD PTR _beginValue$[ebp]
	mov	eax, DWORD PTR _endValue$[ebp]
	sub	eax, edx
	mov	esi, DWORD PTR [ecx]
	push	eax
	push	edx
	call	DWORD PTR [esi+12]
	mov	DWORD PTR [edi], eax

; 365  :                                                             UInt(endValue - beginValue) );
; 366  : }

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	ret	8
$LN12@Value:

; 100  :    static DefaultValueAllocator defaultAllocator;

	push	OFFSET ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA
	call	__Init_thread_header
	add	esp, 4
	cmp	DWORD PTR ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA, -1
	jne	SHORT $LN4@Value
	push	OFFSET ??__FdefaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ@YAXXZ ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator''
	mov	DWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, OFFSET ??_7DefaultValueAllocator@Json@@6B@
	call	_atexit
	push	OFFSET ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA
	call	__Init_thread_footer
	add	esp, 8
	jmp	SHORT $LN4@Value
??0Value@Json@@QAE@PBD0@Z ENDP				; Json::Value::Value
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0Value@Json@@QAE@PBD@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
??0Value@Json@@QAE@PBD@Z PROC				; Json::Value::Value, COMDAT
; _this$ = ecx

; 350  : {

	push	ebp
	mov	ebp, esp

; 100  :    static DefaultValueAllocator defaultAllocator;

	mov	eax, DWORD PTR fs:__tls_array
	mov	edx, DWORD PTR __tls_index
	push	esi

; 350  : {

	mov	esi, ecx

; 100  :    static DefaultValueAllocator defaultAllocator;

	mov	edx, DWORD PTR [eax+edx*4]

; 101  :    static ValueAllocator *valueAllocator = &defaultAllocator;
; 102  :    return valueAllocator;
; 103  : }
; 104  : 
; 105  : static struct DummyValueAllocatorInitializer {
; 106  :    DummyValueAllocatorInitializer() 
; 107  :    {
; 108  :       valueAllocator();      // ensure valueAllocator() statics are initialized before main().
; 109  :    }
; 110  : } dummyValueAllocatorInitializer;
; 111  : 
; 112  : 
; 113  : 
; 114  : // //////////////////////////////////////////////////////////////////
; 115  : // //////////////////////////////////////////////////////////////////
; 116  : // //////////////////////////////////////////////////////////////////
; 117  : // ValueInternals...
; 118  : // //////////////////////////////////////////////////////////////////
; 119  : // //////////////////////////////////////////////////////////////////
; 120  : // //////////////////////////////////////////////////////////////////
; 121  : #ifdef JSON_VALUE_USE_INTERNAL_MAP
; 122  : # include "json_internalarray.inl"
; 123  : # include "json_internalmap.inl"
; 124  : #endif // JSON_VALUE_USE_INTERNAL_MAP
; 125  : 
; 126  : # include "json_valueiterator.inl"
; 127  : 
; 128  : 
; 129  : // //////////////////////////////////////////////////////////////////
; 130  : // //////////////////////////////////////////////////////////////////
; 131  : // //////////////////////////////////////////////////////////////////
; 132  : // class Value::CommentInfo
; 133  : // //////////////////////////////////////////////////////////////////
; 134  : // //////////////////////////////////////////////////////////////////
; 135  : // //////////////////////////////////////////////////////////////////
; 136  : 
; 137  : 
; 138  : Value::CommentInfo::CommentInfo()
; 139  :    : comment_( 0 )
; 140  : {
; 141  : }
; 142  : 
; 143  : Value::CommentInfo::~CommentInfo()
; 144  : {
; 145  :    if ( comment_ )
; 146  :       valueAllocator()->releaseStringValue( comment_ );
; 147  : }
; 148  : 
; 149  : 
; 150  : void 
; 151  : Value::CommentInfo::setComment( const char *text )
; 152  : {
; 153  :    if ( comment_ )
; 154  :       valueAllocator()->releaseStringValue( comment_ );
; 155  :    JSON_ASSERT( text );
; 156  :    JSON_ASSERT_MESSAGE( text[0]=='\0' || text[0]=='/', "Comments must start with /");
; 157  :    // It seems that /**/ style comments are acceptable as well.
; 158  :    comment_ = valueAllocator()->duplicateStringValue( text );
; 159  : }
; 160  : 
; 161  : 
; 162  : // //////////////////////////////////////////////////////////////////
; 163  : // //////////////////////////////////////////////////////////////////
; 164  : // //////////////////////////////////////////////////////////////////
; 165  : // class Value::CZString
; 166  : // //////////////////////////////////////////////////////////////////
; 167  : // //////////////////////////////////////////////////////////////////
; 168  : // //////////////////////////////////////////////////////////////////
; 169  : # ifndef JSON_VALUE_USE_INTERNAL_MAP
; 170  : 
; 171  : // Notes: index_ indicates if the string was allocated when
; 172  : // a string is stored.
; 173  : 
; 174  : Value::CZString::CZString( int index )
; 175  :    : cstr_( 0 )
; 176  :    , index_( index )
; 177  : {
; 178  : }
; 179  : 
; 180  : Value::CZString::CZString( const char *cstr, DuplicationPolicy allocate )
; 181  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 
; 182  :                                   : cstr )
; 183  :    , index_( allocate )
; 184  : {
; 185  : }
; 186  : 
; 187  : Value::CZString::CZString( const CZString &other )
; 188  : : cstr_( other.index_ != noDuplication &&  other.cstr_ != 0
; 189  :                 ?  valueAllocator()->makeMemberName( other.cstr_ )
; 190  :                 : other.cstr_ )
; 191  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)
; 192  :                          : other.index_ )
; 193  : {
; 194  : }
; 195  : 
; 196  : Value::CZString::~CZString()
; 197  : {
; 198  :    if ( cstr_  &&  index_ == duplicate )
; 199  :       valueAllocator()->releaseMemberName( const_cast<char *>( cstr_ ) );
; 200  : }
; 201  : 
; 202  : void 
; 203  : Value::CZString::swap( CZString &other )
; 204  : {
; 205  :    std::swap( cstr_, other.cstr_ );
; 206  :    std::swap( index_, other.index_ );
; 207  : }
; 208  : 
; 209  : Value::CZString &
; 210  : Value::CZString::operator =( const CZString &other )
; 211  : {
; 212  :    CZString temp( other );
; 213  :    swap( temp );
; 214  :    return *this;
; 215  : }
; 216  : 
; 217  : bool 
; 218  : Value::CZString::operator<( const CZString &other ) const 
; 219  : {
; 220  :    if ( cstr_ )
; 221  :       return strcmp( cstr_, other.cstr_ ) < 0;
; 222  :    return index_ < other.index_;
; 223  : }
; 224  : 
; 225  : bool 
; 226  : Value::CZString::operator==( const CZString &other ) const 
; 227  : {
; 228  :    if ( cstr_ )
; 229  :       return strcmp( cstr_, other.cstr_ ) == 0;
; 230  :    return index_ == other.index_;
; 231  : }
; 232  : 
; 233  : 
; 234  : int 
; 235  : Value::CZString::index() const
; 236  : {
; 237  :    return index_;
; 238  : }
; 239  : 
; 240  : 
; 241  : const char *
; 242  : Value::CZString::c_str() const
; 243  : {
; 244  :    return cstr_;
; 245  : }
; 246  : 
; 247  : bool 
; 248  : Value::CZString::isStaticString() const
; 249  : {
; 250  :    return index_ == noDuplication;
; 251  : }
; 252  : 
; 253  : #endif // ifndef JSON_VALUE_USE_INTERNAL_MAP
; 254  : 
; 255  : 
; 256  : // //////////////////////////////////////////////////////////////////
; 257  : // //////////////////////////////////////////////////////////////////
; 258  : // //////////////////////////////////////////////////////////////////
; 259  : // class Value::Value
; 260  : // //////////////////////////////////////////////////////////////////
; 261  : // //////////////////////////////////////////////////////////////////
; 262  : // //////////////////////////////////////////////////////////////////
; 263  : 
; 264  : /*! \internal Default constructor initialization must be equivalent to:
; 265  :  * memset( this, 0, sizeof(Value) )
; 266  :  * This optimization is used in ValueInternalMap fast allocator.
; 267  :  */
; 268  : Value::Value( ValueType type )
; 269  :    : type_( type )
; 270  :    , allocated_( 0 )
; 271  :    , comments_( 0 )
; 272  : # ifdef JSON_VALUE_USE_INTERNAL_MAP
; 273  :    , itemIsUsed_( 0 )
; 274  : #endif
; 275  : {
; 276  :    switch ( type )
; 277  :    {
; 278  :    case nullValue:
; 279  :       break;
; 280  :    case intValue:
; 281  :    case uintValue:
; 282  :       value_.int_ = 0;
; 283  :       break;
; 284  :    case realValue:
; 285  :       value_.real_ = 0.0;
; 286  :       break;
; 287  :    case stringValue:
; 288  :       value_.string_ = 0;
; 289  :       break;
; 290  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 291  :    case arrayValue:
; 292  :    case objectValue:
; 293  :       value_.map_ = new ObjectValues();
; 294  :       break;
; 295  : #else
; 296  :    case arrayValue:
; 297  :       value_.array_ = arrayAllocator()->newArray();
; 298  :       break;
; 299  :    case objectValue:
; 300  :       value_.map_ = mapAllocator()->newMap();
; 301  :       break;
; 302  : #endif
; 303  :    case booleanValue:
; 304  :       value_.bool_ = false;
; 305  :       break;
; 306  :    default:
; 307  :       JSON_ASSERT_UNREACHABLE;
; 308  :    }
; 309  : }
; 310  : 
; 311  : 
; 312  : Value::Value( Int value )
; 313  :    : type_( intValue )
; 314  :    , comments_( 0 )
; 315  : # ifdef JSON_VALUE_USE_INTERNAL_MAP
; 316  :    , itemIsUsed_( 0 )
; 317  : #endif
; 318  : {
; 319  :    value_.int_ = value;
; 320  : }
; 321  : 
; 322  : 
; 323  : Value::Value( UInt value )
; 324  :    : type_( uintValue )
; 325  :    , comments_( 0 )
; 326  : # ifdef JSON_VALUE_USE_INTERNAL_MAP
; 327  :    , itemIsUsed_( 0 )
; 328  : #endif
; 329  : {
; 330  :    value_.uint_ = value;
; 331  : }
; 332  : 
; 333  : Value::Value( double value )
; 334  :    : type_( realValue )
; 335  :    , comments_( 0 )
; 336  : # ifdef JSON_VALUE_USE_INTERNAL_MAP
; 337  :    , itemIsUsed_( 0 )
; 338  : #endif
; 339  : {
; 340  :    value_.real_ = value;
; 341  : }
; 342  : 
; 343  : Value::Value( const char *value )
; 344  :    : type_( stringValue )

	mov	BYTE PTR [esi+8], 4

; 345  :    , allocated_( true )

	or	DWORD PTR [esi+8], 256			; 00000100H

; 346  :    , comments_( 0 )

	mov	DWORD PTR [esi+12], 0

; 100  :    static DefaultValueAllocator defaultAllocator;

	mov	eax, DWORD PTR ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA
	cmp	eax, DWORD PTR __Init_thread_epoch[edx]
	jg	SHORT $LN12@Value
$LN4@Value:

; 351  :    value_.string_ = valueAllocator()->duplicateStringValue( value );

	mov	ecx, DWORD PTR ?valueAllocator@?1??0Json@@YAAAPAVValueAllocator@1@XZ@4PAV21@A
	push	-1
	push	DWORD PTR _value$[ebp]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+12]
	mov	DWORD PTR [esi], eax

; 352  : }

	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
$LN12@Value:

; 100  :    static DefaultValueAllocator defaultAllocator;

	push	OFFSET ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA
	call	__Init_thread_header
	add	esp, 4
	cmp	DWORD PTR ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA, -1
	jne	SHORT $LN4@Value
	push	OFFSET ??__FdefaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ@YAXXZ ; `Json::valueAllocator'::`2'::`dynamic atexit destructor for 'defaultAllocator''
	mov	DWORD PTR ?defaultAllocator@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4VDefaultValueAllocator@2@A, OFFSET ??_7DefaultValueAllocator@Json@@6B@
	call	_atexit
	push	OFFSET ?$TSS0@?1??valueAllocator@Json@@YAAAPAVValueAllocator@2@XZ@4HA
	call	__Init_thread_footer
	add	esp, 8
	jmp	SHORT $LN4@Value
??0Value@Json@@QAE@PBD@Z ENDP				; Json::Value::Value
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0Value@Json@@QAE@N@Z
_TEXT	SEGMENT
_value$ = 8						; size = 8
??0Value@Json@@QAE@N@Z PROC				; Json::Value::Value, COMDAT
; _this$ = ecx

; 339  : {

	push	ebp
	mov	ebp, esp

; 340  :    value_.real_ = value;

	movsd	xmm0, QWORD PTR _value$[ebp]

; 341  : }

	mov	eax, ecx
	mov	BYTE PTR [ecx+8], 3
	mov	DWORD PTR [ecx+12], 0
	movsd	QWORD PTR [ecx], xmm0
	pop	ebp
	ret	8
??0Value@Json@@QAE@N@Z ENDP				; Json::Value::Value
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0Value@Json@@QAE@I@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
??0Value@Json@@QAE@I@Z PROC				; Json::Value::Value, COMDAT
; _this$ = ecx

; 329  : {

	push	ebp
	mov	ebp, esp

; 330  :    value_.uint_ = value;

	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR [ecx], eax

; 331  : }

	mov	eax, ecx
	mov	BYTE PTR [ecx+8], 2
	mov	DWORD PTR [ecx+12], 0
	pop	ebp
	ret	4
??0Value@Json@@QAE@I@Z ENDP				; Json::Value::Value
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0Value@Json@@QAE@H@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
??0Value@Json@@QAE@H@Z PROC				; Json::Value::Value, COMDAT
; _this$ = ecx

; 318  : {

	push	ebp
	mov	ebp, esp

; 319  :    value_.int_ = value;

	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR [ecx], eax

; 320  : }

	mov	eax, ecx
	mov	BYTE PTR [ecx+8], 1
	mov	DWORD PTR [ecx+12], 0
	pop	ebp
	ret	4
??0Value@Json@@QAE@H@Z ENDP				; Json::Value::Value
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0Value@Json@@QAE@W4ValueType@1@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
$T2 = 8							; size = 4
_type$ = 8						; size = 4
??0Value@Json@@QAE@W4ValueType@1@@Z PROC		; Json::Value::Value, COMDAT
; _this$ = ecx

; 275  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Value@Json@@QAE@W4ValueType@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx

; 269  :    : type_( type )

	mov	eax, DWORD PTR _type$[ebp]
	mov	BYTE PTR [esi+8], al

; 276  :    switch ( type )

	dec	eax
	and	DWORD PTR [esi+8], -257			; fffffeffH
	mov	DWORD PTR [esi+12], 0
	cmp	eax, 6
	ja	$LN10@Value
	jmp	DWORD PTR $LN16@Value[eax*4]
$LN5@Value:

; 277  :    {
; 278  :    case nullValue:
; 279  :       break;
; 280  :    case intValue:
; 281  :    case uintValue:
; 282  :       value_.int_ = 0;

	mov	DWORD PTR [esi], 0

; 305  :       break;
; 306  :    default:
; 307  :       JSON_ASSERT_UNREACHABLE;
; 308  :    }
; 309  : }

	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
$LN6@Value:
	xorps	xmm0, xmm0
	mov	eax, esi
	movsd	QWORD PTR [esi], xmm0
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
$LN8@Value:

; 283  :       break;
; 284  :    case realValue:
; 285  :       value_.real_ = 0.0;
; 286  :       break;
; 287  :    case stringValue:
; 288  :       value_.string_ = 0;
; 289  :       break;
; 290  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 291  :    case arrayValue:
; 292  :    case objectValue:
; 293  :       value_.map_ = new ObjectValues();

	push	8
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	eax, eax
	je	SHORT $LN12@Value
	mov	ecx, eax
	call	??0?$map@VCZString@Value@Json@@V23@U?$less@VCZString@Value@Json@@@std@@V?$allocator@U?$pair@$$CBVCZString@Value@Json@@V23@@std@@@5@@std@@QAE@XZ ; std::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >::map<Json::Value::CZString,Json::Value,std::less<Json::Value::CZString>,std::allocator<std::pair<Json::Value::CZString const ,Json::Value> > >
	mov	DWORD PTR [esi], eax

; 305  :       break;
; 306  :    default:
; 307  :       JSON_ASSERT_UNREACHABLE;
; 308  :    }
; 309  : }

	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
$LN12@Value:

; 283  :       break;
; 284  :    case realValue:
; 285  :       value_.real_ = 0.0;
; 286  :       break;
; 287  :    case stringValue:
; 288  :       value_.string_ = 0;
; 289  :       break;
; 290  : #ifndef JSON_VALUE_USE_INTERNAL_MAP
; 291  :    case arrayValue:
; 292  :    case objectValue:
; 293  :       value_.map_ = new ObjectValues();

	xor	eax, eax
	mov	DWORD PTR [esi], eax

; 305  :       break;
; 306  :    default:
; 307  :       JSON_ASSERT_UNREACHABLE;
; 308  :    }
; 309  : }

	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
$LN9@Value:

; 294  :       break;
; 295  : #else
; 296  :    case arrayValue:
; 297  :       value_.array_ = arrayAllocator()->newArray();
; 298  :       break;
; 299  :    case objectValue:
; 300  :       value_.map_ = mapAllocator()->newMap();
; 301  :       break;
; 302  : #endif
; 303  :    case booleanValue:
; 304  :       value_.bool_ = false;

	mov	BYTE PTR [esi], 0
$LN10@Value:

; 305  :       break;
; 306  :    default:
; 307  :       JSON_ASSERT_UNREACHABLE;
; 308  :    }
; 309  : }

	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN16@Value:
	DD	$LN5@Value
	DD	$LN5@Value
	DD	$LN6@Value
	DD	$LN5@Value
	DD	$LN9@Value
	DD	$LN8@Value
	DD	$LN8@Value
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Value@Json@@QAE@W4ValueType@1@@Z$0:
	push	8
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??0Value@Json@@QAE@W4ValueType@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Value@Json@@QAE@W4ValueType@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Value@Json@@QAE@W4ValueType@1@@Z ENDP		; Json::Value::Value
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?swap@CZString@Value@Json@@AAEXAAV123@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
?swap@CZString@Value@Json@@AAEXAAV123@@Z PROC		; Json::Value::CZString::swap, COMDAT
; _this$ = ecx

; 204  : {

	push	ebp
	mov	ebp, esp
	push	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 50   : 	_Left = _STD move(_Right);

	mov	esi, DWORD PTR _other$[ebp]
	push	edi
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 204  : {

	mov	edi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 50   : 	_Left = _STD move(_Right);

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [edi]
	mov	DWORD PTR [edi], eax

; 51   : 	_Right = _STD move(_Tmp);

	mov	DWORD PTR [esi], edx

; 49   : 	_Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [edi+4]

; 50   : 	_Left = _STD move(_Right);

	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], eax
	pop	edi

; 51   : 	_Right = _STD move(_Tmp);

	mov	DWORD PTR [esi+4], ecx
	pop	esi
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 207  : }

	pop	ebp
	ret	4
?swap@CZString@Value@Json@@AAEXAAV123@@Z ENDP		; Json::Value::CZString::swap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?isStaticString@CZString@Value@Json@@QBE_NXZ
_TEXT	SEGMENT
?isStaticString@CZString@Value@Json@@QBE_NXZ PROC	; Json::Value::CZString::isStaticString, COMDAT
; _this$ = ecx

; 249  : {

	cmp	DWORD PTR [ecx+4], 0
	sete	al

; 250  :    return index_ == noDuplication;
; 251  : }

	ret	0
?isStaticString@CZString@Value@Json@@QBE_NXZ ENDP	; Json::Value::CZString::isStaticString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?c_str@CZString@Value@Json@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@CZString@Value@Json@@QBEPBDXZ PROC		; Json::Value::CZString::c_str, COMDAT
; _this$ = ecx

; 244  :    return cstr_;

	mov	eax, DWORD PTR [ecx]

; 245  : }

	ret	0
?c_str@CZString@Value@Json@@QBEPBDXZ ENDP		; Json::Value::CZString::c_str
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ?index@CZString@Value@Json@@QBEHXZ
_TEXT	SEGMENT
?index@CZString@Value@Json@@QBEHXZ PROC			; Json::Value::CZString::index, COMDAT
; _this$ = ecx

; 237  :    return index_;

	mov	eax, DWORD PTR [ecx+4]

; 238  : }

	ret	0
?index@CZString@Value@Json@@QBEHXZ ENDP			; Json::Value::CZString::index
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??8CZString@Value@Json@@QBE_NABV012@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
??8CZString@Value@Json@@QBE_NABV012@@Z PROC		; Json::Value::CZString::operator==, COMDAT
; _this$ = ecx

; 227  : {

	push	ebp
	mov	ebp, esp

; 228  :    if ( cstr_ )

	mov	edx, DWORD PTR [ecx]

; 229  :       return strcmp( cstr_, other.cstr_ ) == 0;

	mov	eax, DWORD PTR _other$[ebp]
	test	edx, edx
	je	SHORT $LN2@operator
	mov	eax, DWORD PTR [eax]
	npad	2
$LL4@operator:
	mov	cl, BYTE PTR [edx]
	cmp	cl, BYTE PTR [eax]
	jne	SHORT $LN5@operator
	test	cl, cl
	je	SHORT $LN6@operator
	mov	cl, BYTE PTR [edx+1]
	cmp	cl, BYTE PTR [eax+1]
	jne	SHORT $LN5@operator
	add	edx, 2
	add	eax, 2
	test	cl, cl
	jne	SHORT $LL4@operator
$LN6@operator:
	xor	ecx, ecx
	xor	eax, eax
	test	ecx, ecx
	sete	al

; 230  :    return index_ == other.index_;
; 231  : }

	pop	ebp
	ret	4
$LN5@operator:

; 229  :       return strcmp( cstr_, other.cstr_ ) == 0;

	sbb	ecx, ecx
	xor	eax, eax
	or	ecx, 1
	test	ecx, ecx
	sete	al

; 230  :    return index_ == other.index_;
; 231  : }

	pop	ebp
	ret	4
$LN2@operator:
	mov	ecx, DWORD PTR [ecx+4]
	cmp	ecx, DWORD PTR [eax+4]
	sete	al
	pop	ebp
	ret	4
??8CZString@Value@Json@@QBE_NABV012@@Z ENDP		; Json::Value::CZString::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??MCZString@Value@Json@@QBE_NABV012@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
??MCZString@Value@Json@@QBE_NABV012@@Z PROC		; Json::Value::CZString::operator<, COMDAT
; _this$ = ecx

; 219  : {

	push	ebp
	mov	ebp, esp

; 220  :    if ( cstr_ )

	mov	edx, DWORD PTR [ecx]

; 221  :       return strcmp( cstr_, other.cstr_ ) < 0;

	mov	eax, DWORD PTR _other$[ebp]
	test	edx, edx
	je	SHORT $LN2@operator
	mov	eax, DWORD PTR [eax]
	npad	2
$LL4@operator:
	mov	cl, BYTE PTR [edx]
	cmp	cl, BYTE PTR [eax]
	jne	SHORT $LN5@operator
	test	cl, cl
	je	SHORT $LN6@operator
	mov	cl, BYTE PTR [edx+1]
	cmp	cl, BYTE PTR [eax+1]
	jne	SHORT $LN5@operator
	add	edx, 2
	add	eax, 2
	test	cl, cl
	jne	SHORT $LL4@operator
$LN6@operator:
	xor	ecx, ecx
	xor	eax, eax
	test	ecx, ecx
	sets	al

; 222  :    return index_ < other.index_;
; 223  : }

	pop	ebp
	ret	4
$LN5@operator:

; 221  :       return strcmp( cstr_, other.cstr_ ) < 0;

	sbb	ecx, ecx
	xor	eax, eax
	or	ecx, 1
	test	ecx, ecx
	sets	al

; 222  :    return index_ < other.index_;
; 223  : }

	pop	ebp
	ret	4
$LN2@operator:
	mov	ecx, DWORD PTR [ecx+4]
	cmp	ecx, DWORD PTR [eax+4]
	setl	al
	pop	ebp
	ret	4
??MCZString@Value@Json@@QBE_NABV012@@Z ENDP		; Json::Value::CZString::operator<
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??4CZString@Value@Json@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_other$ = 8						; size = 4
??4CZString@Value@Json@@QAEAAV012@ABV012@@Z PROC	; Json::Value::CZString::operator=, COMDAT
; _this$ = ecx

; 211  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4CZString@Value@Json@@QAEAAV012@ABV012@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	edi, ecx

; 188  : : cstr_( other.index_ != noDuplication &&  other.cstr_ != 0

	mov	esi, DWORD PTR _other$[ebp]
	cmp	DWORD PTR [esi+4], 0
	je	SHORT $LN6@operator
	cmp	DWORD PTR [esi], 0
	je	SHORT $LN6@operator
	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+4]
	mov	ecx, eax
	jmp	SHORT $LN7@operator
$LN6@operator:
	mov	ecx, DWORD PTR [esi]
$LN7@operator:

; 189  :                 ?  valueAllocator()->makeMemberName( other.cstr_ )
; 190  :                 : other.cstr_ )
; 191  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	DWORD PTR [esi], 0
	je	SHORT $LN8@operator
	xor	eax, eax
	cmp	DWORD PTR [esi+4], eax
	setne	al
	jmp	SHORT $LN9@operator
$LN8@operator:
	mov	eax, DWORD PTR [esi+4]
$LN9@operator:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 49   : 	_Ty _Tmp = _STD move(_Left);

	mov	esi, DWORD PTR [edi]

; 50   : 	_Left = _STD move(_Right);

	mov	DWORD PTR [edi], ecx

; 49   : 	_Ty _Tmp = _STD move(_Left);

	mov	ecx, DWORD PTR [edi+4]

; 50   : 	_Left = _STD move(_Right);

	mov	DWORD PTR [edi+4], eax
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp

; 197  : {

	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 198  :    if ( cstr_  &&  index_ == duplicate )

	test	esi, esi
	je	SHORT $LN40@operator
	cmp	ecx, 1
	jne	SHORT $LN40@operator

; 199  :       valueAllocator()->releaseMemberName( const_cast<char *>( cstr_ ) );

	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	esi
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+8]
$LN40@operator:

; 212  :    CZString temp( other );
; 213  :    swap( temp );
; 214  :    return *this;

	mov	eax, edi

; 215  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4CZString@Value@Json@@QAEAAV012@ABV012@@Z$9:
	call	___std_terminate
	ret	0
__ehhandler$??4CZString@Value@Json@@QAEAAV012@ABV012@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4CZString@Value@Json@@QAEAAV012@ABV012@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4CZString@Value@Json@@QAEAAV012@ABV012@@Z ENDP	; Json::Value::CZString::operator=
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??1CZString@Value@Json@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CZString@Value@Json@@QAE@XZ PROC			; Json::Value::CZString::~CZString, COMDAT
; _this$ = ecx

; 197  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CZString@Value@Json@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx

; 198  :    if ( cstr_  &&  index_ == duplicate )

	cmp	DWORD PTR [esi], 0
	je	SHORT $LN2@CZString
	cmp	DWORD PTR [esi+4], 1
	jne	SHORT $LN2@CZString

; 199  :       valueAllocator()->releaseMemberName( const_cast<char *>( cstr_ ) );

	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+8]
$LN2@CZString:

; 200  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CZString@Value@Json@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CZString@Value@Json@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CZString@Value@Json@@QAE@XZ ENDP			; Json::Value::CZString::~CZString
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0CZString@Value@Json@@QAE@ABV012@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
??0CZString@Value@Json@@QAE@ABV012@@Z PROC		; Json::Value::CZString::CZString, COMDAT
; _this$ = ecx

; 193  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 188  : : cstr_( other.index_ != noDuplication &&  other.cstr_ != 0

	mov	esi, DWORD PTR _other$[ebp]
	push	edi
	mov	edi, ecx
	cmp	DWORD PTR [esi+4], 0
	je	SHORT $LN3@CZString
	cmp	DWORD PTR [esi], 0
	je	SHORT $LN3@CZString
	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+4]
	jmp	SHORT $LN4@CZString
$LN3@CZString:
	mov	eax, DWORD PTR [esi]
$LN4@CZString:
	mov	DWORD PTR [edi], eax

; 189  :                 ?  valueAllocator()->makeMemberName( other.cstr_ )
; 190  :                 : other.cstr_ )
; 191  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	cmp	DWORD PTR [esi], 0
	je	SHORT $LN5@CZString
	xor	eax, eax
	cmp	DWORD PTR [esi+4], eax
	setne	al
	mov	DWORD PTR [edi+4], eax

; 194  : }

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	ret	4
$LN5@CZString:

; 189  :                 ?  valueAllocator()->makeMemberName( other.cstr_ )
; 190  :                 : other.cstr_ )
; 191  :    , index_( other.cstr_ ? (other.index_ == noDuplication ? noDuplication : duplicate)

	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], eax

; 194  : }

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??0CZString@Value@Json@@QAE@ABV012@@Z ENDP		; Json::Value::CZString::CZString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0CZString@Value@Json@@QAE@PBDW4DuplicationPolicy@012@@Z
_TEXT	SEGMENT
_cstr$ = 8						; size = 4
_allocate$ = 12						; size = 4
??0CZString@Value@Json@@QAE@PBDW4DuplicationPolicy@012@@Z PROC ; Json::Value::CZString::CZString, COMDAT
; _this$ = ecx

; 184  : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 181  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 

	mov	edi, DWORD PTR _allocate$[ebp]
	mov	esi, ecx
	cmp	edi, 1
	jne	SHORT $LN3@CZString
	call	?valueAllocator@Json@@YAAAPAVValueAllocator@1@XZ ; Json::valueAllocator
	push	DWORD PTR _cstr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+4]

; 182  :                                   : cstr )
; 183  :    , index_( allocate )

	mov	DWORD PTR [esi+4], edi
	mov	DWORD PTR [esi], eax

; 185  : }

	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebp
	ret	8
$LN3@CZString:

; 181  :    : cstr_( allocate == duplicate ? valueAllocator()->makeMemberName(cstr) 

	mov	eax, DWORD PTR _cstr$[ebp]

; 182  :                                   : cstr )
; 183  :    , index_( allocate )

	mov	DWORD PTR [esi+4], edi
	mov	DWORD PTR [esi], eax

; 185  : }

	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebp
	ret	8
??0CZString@Value@Json@@QAE@PBDW4DuplicationPolicy@012@@Z ENDP ; Json::Value::CZString::CZString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\src\lib_json\json_value.cpp
;	COMDAT ??0CZString@Value@Json@@QAE@H@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
??0CZString@Value@Json@@QAE@H@Z PROC			; Json::Value::CZString::CZString, COMDAT
; _this$ = ecx

; 177  : {

	push	ebp
	mov	ebp, esp

; 176  :    , index_( index )

	mov	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 178  : }

	mov	eax, ecx
	mov	DWORD PTR [ecx], 0
	pop	ebp
	ret	4
??0CZString@Value@Json@@QAE@H@Z ENDP			; Json::Value::CZString::CZString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\include\json\value.h
;	COMDAT ?c_str@StaticString@Json@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@StaticString@Json@@QBEPBDXZ PROC			; Json::StaticString::c_str, COMDAT
; _this$ = ecx

; 77   :          return str_;

	mov	eax, DWORD PTR [ecx]

; 78   :       }

	ret	0
?c_str@StaticString@Json@@QBEPBDXZ ENDP			; Json::StaticString::c_str
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\include\json\value.h
;	COMDAT ??BStaticString@Json@@QBEPBDXZ
_TEXT	SEGMENT
??BStaticString@Json@@QBEPBDXZ PROC			; Json::StaticString::operator char const *, COMDAT
; _this$ = ecx

; 72   :          return str_;

	mov	eax, DWORD PTR [ecx]

; 73   :       }

	ret	0
??BStaticString@Json@@QBEPBDXZ ENDP			; Json::StaticString::operator char const *
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\lonycell\downloads\jsoncpp-src-0.5.0.tar\dist\jsoncpp-src-0.5.0\include\json\value.h
;	COMDAT ??0StaticString@Json@@QAE@PBD@Z
_TEXT	SEGMENT
_czstring$ = 8						; size = 4
??0StaticString@Json@@QAE@PBD@Z PROC			; Json::StaticString::StaticString, COMDAT
; _this$ = ecx

; 67   :       {

	push	ebp
	mov	ebp, esp

; 66   :          : str_( czstring )

	mov	eax, DWORD PTR _czstring$[ebp]
	mov	DWORD PTR [ecx], eax

; 68   :       }

	mov	eax, ecx
	pop	ebp
	ret	4
??0StaticString@Json@@QAE@PBD@Z ENDP			; Json::StaticString::StaticString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$swap@HX@std@@YAXAAH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@HX@std@@YAXAAH0@Z PROC				; std::swap<int,void>, COMDAT

; 48   : 	{	// exchange values stored at _Left and _Right

	push	ebp
	mov	ebp, esp

; 49   : 	_Ty _Tmp = _STD move(_Left);

	mov	edx, DWORD PTR __Left$[ebp]

; 50   : 	_Left = _STD move(_Right);

	mov	ecx, DWORD PTR __Right$[ebp]
	push	esi
	mov	esi, DWORD PTR [edx]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 51   : 	_Right = _STD move(_Tmp);

	mov	DWORD PTR [ecx], esi
	pop	esi

; 52   : 	}

	pop	ebp
	ret	0
??$swap@HX@std@@YAXAAH0@Z ENDP				; std::swap<int,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_exception.h
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gruntime_error@std@@UAEPAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx

; 84   :         __std_exception_destroy(&_Data);

	lea	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
	push	eax
	call	DWORD PTR __imp____std_exception_destroy
	add	esp, 4
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN9@scalar
	push	12					; 0000000cH
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN9@scalar:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_Gruntime_error@std@@UAEPAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_exception.h
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV01@@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	xorps	xmm0, xmm0

; 65   :         : _Data()

	lea	eax, DWORD PTR [esi+4]

; 66   :     {
; 67   :         __std_exception_copy(&_Other._Data, &_Data);

	push	eax
	mov	DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
	movq	QWORD PTR [eax], xmm0
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	push	eax
	call	DWORD PTR __imp____std_exception_copy
	add	esp, 8
	mov	DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0runtime_error@std@@QAE@ABV01@@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_exception.h
;	COMDAT ??1runtime_error@std@@UAE@XZ
_TEXT	SEGMENT
??1runtime_error@std@@UAE@XZ PROC			; std::runtime_error::~runtime_error, COMDAT
; _this$ = ecx

; 84   :         __std_exception_destroy(&_Data);

	lea	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
	push	eax
	call	DWORD PTR __imp____std_exception_destroy
	pop	ecx
	ret	0
??1runtime_error@std@@UAE@XZ ENDP			; std::runtime_error::~runtime_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\stdexcept
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_exception.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\stdexcept
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_exception.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\stdexcept
;	COMDAT ??0runtime_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
__InitData$1 = -8					; size = 8
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@PBD@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 168  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_exception.h

; 54   :         __std_exception_data _InitData = { _Message, true };

	mov	eax, DWORD PTR __Message$[ebp]
	xorps	xmm0, xmm0
	push	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\stdexcept

; 168  : 		{	// construct from message string

	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_exception.h

; 52   :         : _Data()

	lea	edx, DWORD PTR [esi+4]

; 54   :         __std_exception_data _InitData = { _Message, true };

	mov	DWORD PTR __InitData$1[ebp], eax

; 55   :         __std_exception_copy(&_InitData, &_Data);

	lea	eax, DWORD PTR __InitData$1[ebp]
	push	edx
	mov	DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
	push	eax
	movq	QWORD PTR [edx], xmm0
	mov	BYTE PTR __InitData$1[ebp+4], 1
	call	DWORD PTR __imp____std_exception_copy
	add	esp, 8
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\stdexcept

; 168  : 		{	// construct from message string

	mov	DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@

; 169  : 		}

	mov	eax, esi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0runtime_error@std@@QAE@PBD@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN10@scalar
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN10@scalar:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 15			; 0000000fH

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], 0

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN102@scalar
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jmp	SHORT $LN103@scalar
$LN102@scalar:
	mov	eax, esi
$LN103@scalar:
	test	BYTE PTR ___flags$[ebp], 1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
	je	SHORT $LN109@scalar
	push	24					; 00000018H
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN109@scalar:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2283 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN4@Xran:
$LN3@Xran:
	int	3
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Check_offset, COMDAT
; _this$ = ecx

; 2270 : 		{	// checks whether _Off is in the bounds of [0, this->size()]

	push	ebp
	mov	ebp, esp

; 2271 : 		if (this->_Mysize() < _Off)

	mov	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Off$[ebp]
	jae	SHORT $LN2@Check_offs

; 2283 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN18@Check_offs:
$LN2@Check_offs:

; 2272 : 			_Xran();
; 2273 : 		}

	pop	ebp
	ret	4
$LN17@Check_offs:
?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2266 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
	int	3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2248 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp

; 2249 : 		if (!_Built)

	cmp	BYTE PTR __Built$[ebp], 0
	push	esi
	push	edi
	mov	edi, DWORD PTR __Newsize$[ebp]
	mov	esi, ecx
	je	SHORT $LN4@Tidy

; 2250 : 			;
; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN4@Tidy

; 2252 : 			{	// copy any leftovers to small buffer and deallocate
; 2253 : 			pointer _Ptr = this->_Bx()._Ptr;

	push	ebx
	mov	ebx, DWORD PTR [esi]

; 2254 : 			this->_Getal().destroy(_STD addressof(this->_Bx()._Ptr));
; 2255 : 			if (0 < _Newsize)

	test	edi, edi
	je	SHORT $LN57@Tidy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 530  : 		return (_Count == 0 ? _First1

	push	edi
	push	ebx
	push	esi
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN57@Tidy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

	mov	eax, DWORD PTR [esi+20]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	ebx
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
	pop	ebx
$LN4@Tidy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 15			; 0000000fH

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], edi

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN96@Tidy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax+edi], 0
	pop	edi
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2262 : 		}

	pop	ebp
	ret	8
$LN96@Tidy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [esi+edi], 0
	pop	edi
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2262 : 		}

	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2238 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp

; 2239 : 		if (_Ptr == nullptr_t{} || _Ptr < this->_Myptr()
; 2240 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)

	mov	edx, DWORD PTR __Ptr$[ebp]
	push	esi
	test	edx, edx
	je	SHORT $LN4@Inside

; 514  : 		return (this->_BUF_SIZE <= _Myres

	mov	eax, DWORD PTR [ecx+20]
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN16@Inside
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	esi, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jmp	SHORT $LN17@Inside
$LN16@Inside:
	mov	esi, ecx
$LN17@Inside:

; 2239 : 		if (_Ptr == nullptr_t{} || _Ptr < this->_Myptr()
; 2240 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)

	cmp	edx, esi
	jb	SHORT $LN4@Inside

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	eax, 16					; 00000010H
	jb	SHORT $LN30@Inside
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	esi, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jmp	SHORT $LN31@Inside
$LN30@Inside:
	mov	esi, ecx
$LN31@Inside:

; 2239 : 		if (_Ptr == nullptr_t{} || _Ptr < this->_Myptr()
; 2240 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)

	mov	eax, DWORD PTR [ecx+16]
	add	eax, esi
	cmp	eax, edx
	jbe	SHORT $LN4@Inside

; 2242 : 		else
; 2243 : 			return (true);

	mov	al, 1
	pop	esi

; 2244 : 		}

	pop	ebp
	ret	4
$LN4@Inside:

; 2241 : 			return (false);	// don't ask

	xor	al, al
	pop	esi

; 2244 : 		}

	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2224 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	push	esi

; 2225 : 		if (max_size() < _Newsize)

	mov	esi, DWORD PTR __Newsize$[ebp]
	cmp	esi, -2					; fffffffeH
	jbe	SHORT $LN2@Grow

; 2266 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN90@Grow:
$LN2@Grow:

; 2226 : 			_Xlen();	// result too long
; 2227 : 		if (this->_Myres() < _Newsize)

	cmp	DWORD PTR [ecx+20], esi
	jae	SHORT $LN3@Grow

; 2228 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow

	push	DWORD PTR [ecx+16]
	push	esi
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	test	esi, esi
	pop	esi
	setne	al

; 2235 : 		}

	pop	ebp
	ret	8
$LN3@Grow:

; 2229 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	cmp	BYTE PTR __Trim$[ebp], 0
	je	SHORT $LN5@Grow
	cmp	esi, 16					; 00000010H
	jae	SHORT $LN5@Grow

; 2230 : 			_Tidy(true,	// copy and deallocate if trimming to small string

	mov	eax, DWORD PTR [ecx+16]
	cmp	esi, eax
	cmovb	eax, esi
	push	eax
	push	1
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	test	esi, esi
	pop	esi
	setne	al

; 2235 : 		}

	pop	ebp
	ret	8
$LN5@Grow:

; 2231 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2232 : 		else if (_Newsize == 0)

	test	esi, esi
	jne	SHORT $LN88@Grow

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [ecx+20], 16			; 00000010H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [ecx+16], esi

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN80@Grow
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	ecx, DWORD PTR [ecx]
$LN80@Grow:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [ecx], 0
	test	esi, esi
$LN88@Grow:
	setne	al
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2235 : 		}

	pop	ebp
	ret	8
$LN89@Grow:
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [ecx+20], 16			; 00000010H

; 2218 : 		auto& _Dx = this->_Get_data();
; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN11@Eos
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax+edx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2220 : 		}

	pop	ebp
	ret	4
$LN11@Eos:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [ecx+edx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2220 : 		}

	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
__Ptr$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newres$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	mov	edi, eax
	or	edi, 15					; 0000000fH

; 2184 : 		if (max_size() < _Newres)

	cmp	edi, -2					; fffffffeH
	jbe	SHORT $LN2@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	edi, eax

; 2186 : 		else if (this->_Myres() / 2 <= _Newres / 3)

	jmp	SHORT $LN108@Copy
$LN2@Copy:
	mov	ebx, DWORD PTR [esi+20]
	mov	eax, -1431655765			; aaaaaaabH
	mul	edi
	mov	ecx, ebx
	shr	ecx, 1
	shr	edx, 1
	cmp	ecx, edx
	jbe	SHORT $LN108@Copy

; 2187 : 			;
; 2188 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)

	mov	eax, -2					; fffffffeH

; 2189 : 			_Newres = this->_Myres()

	lea	edi, DWORD PTR [ecx+ebx]
	sub	eax, ecx
	cmp	ebx, eax
	jbe	SHORT $LN108@Copy

; 1771 : 		return (_Num <= 1 ? 1 : _Num - 1);

	mov	edi, -2					; fffffffeH
$LN108@Copy:

; 2190 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		pointer _Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR [edi+1]
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 51   : 	if (_Count == 0)

	test	eax, eax
	jne	SHORT $LN136@Copy

; 52   : 		return (_Ptr);

	xor	ebx, ebx
	jmp	SHORT $LN19@Copy
$LN136@Copy:

; 53   : 
; 54   : 	// check overflow of multiply
; 55   : 	if ((size_t)(-1) / _Sz < _Count)
; 56   : 		_Xbad_alloc();	// report no memory
; 57   : 	const size_t _User_size = _Count * _Sz;
; 58   : 
; 59   :  #if defined(_M_IX86) || defined(_M_X64)
; 60   : 	if (_Try_aligned_allocation
; 61   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN138@Copy

; 62   : 		{	// allocate large block
; 63   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 64   : 			"Big allocations should at least match vector register size");
; 65   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

	lea	ecx, DWORD PTR [eax+35]

; 66   : 		if (_Block_size <= _User_size)

	cmp	ecx, eax
	ja	SHORT $LN140@Copy

; 67   : 			_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN443@Copy:
$LN140@Copy:

; 68   : 		const uintptr_t _Ptr_container =
; 69   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 70   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

	test	eax, eax
	jne	SHORT $LN141@Copy
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN444@Copy:
$LN141@Copy:

; 71   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

	lea	ebx, DWORD PTR [eax+35]
	and	ebx, -32				; ffffffe0H

; 72   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 73   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

	mov	DWORD PTR [ebx-4], eax

; 74   : 
; 75   :  #ifdef _DEBUG
; 76   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 77   :  #endif /* _DEBUG */
; 78   : 		}
; 79   : 	else

	jmp	SHORT $LN19@Copy
$LN138@Copy:

; 80   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 81   : 
; 82   : 		{	// allocate normal block
; 83   : 		_Ptr = ::operator new(_User_size);

	push	eax
	call	??2@YAPAXI@Z				; operator new
	mov	ebx, eax
	add	esp, 4

; 84   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	ebx, ebx
	jne	SHORT $LN19@Copy
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN445@Copy:
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	eax, DWORD PTR __Newsize$[ebp]

; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR __Newres$[ebp], eax
	inc	eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	push	eax
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax

; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END

	mov	eax, $LN440@Copy
	ret	0
$LN440@Copy:
	mov	esi, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR __Newres$[ebp]
	mov	ebx, DWORD PTR __Ptr$[ebp]
$LN19@Copy:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	mov	eax, DWORD PTR __Oldlen$[ebp]
	test	eax, eax
	je	SHORT $LN274@Copy

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN265@Copy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	ecx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jmp	SHORT $LN266@Copy
$LN265@Copy:
	mov	ecx, esi
$LN266@Copy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 530  : 		return (_Count == 0 ? _First1

	test	eax, eax
	je	SHORT $LN274@Copy
	push	eax
	push	ecx
	push	ebx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN274@Copy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN278@Copy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN278@Copy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 15			; 0000000fH

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], 0

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN370@Copy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jmp	SHORT $LN371@Copy
$LN370@Copy:
	mov	eax, esi
$LN371@Copy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	eax, DWORD PTR __Oldlen$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR [esi], ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2212 : 		this->_Myres() = _Newres;

	mov	DWORD PTR [esi+20], edi

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], eax

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN434@Copy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	esi, ebx
$LN434@Copy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [esi+eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2214 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 734  : 		return (_Get_data()._Myres);

	mov	esi, DWORD PTR _this$[ebp]

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN156@Copy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN156@Copy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 15			; 0000000fH

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], 0

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN249@Copy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	esi, DWORD PTR [esi]
$LN249@Copy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2203 : 			_RERAISE;

	push	0
	push	0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2203 : 			_RERAISE;

	call	__CxxThrowException@8
$LN446@Copy:
$LN442@Copy:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIII@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Size$ = 12						; size = 4
?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Clamp_suffix_size, COMDAT
; _this$ = ecx

; 2111 : 		{	// trims _Size to the longest it can be assuming a string starting at _Off

	push	ebp
	mov	ebp, esp

; 2112 : 		const size_type _Max_effective_size = this->_Mysize() - _Off;

	mov	eax, DWORD PTR [ecx+16]
	sub	eax, DWORD PTR __Off$[ebp]

; 2113 : 		if (_Size <= _Max_effective_size)

	cmp	DWORD PTR __Size$[ebp], eax
	cmovbe	eax, DWORD PTR __Size$[ebp]

; 2114 : 			return (_Size);
; 2115 : 		else
; 2116 : 			return (_Max_effective_size);
; 2117 : 		}

	pop	ebp
	ret	8
?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Clamp_suffix_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1770 : 		const size_type _Num = this->_Getal().max_size();
; 1771 : 		return (_Num <= 1 ? 1 : _Num - 1);

	mov	eax, -2					; fffffffeH

; 1772 : 		}

	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length, COMDAT
; _this$ = ecx

; 1760 : 		return (this->_Mysize());

	mov	eax, DWORD PTR [ecx+16]

; 1761 : 		}

	ret	0
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 521  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN13@c_str

; 1743 : 		return (this->_Myptr());

	mov	eax, DWORD PTR [ecx]

; 1744 : 		}

	ret	0
$LN13@c_str:

; 1743 : 		return (this->_Myptr());

	mov	eax, ecx

; 1744 : 		}

	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1347 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx

; 2271 : 		if (this->_Mysize() < _Off)

	mov	ecx, DWORD PTR __Off$[ebp]
	push	edi
	mov	edi, DWORD PTR [esi+16]
	cmp	edi, ecx
	jae	SHORT $LN7@erase

; 2283 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN94@erase:
$LN7@erase:

; 1348 : 		_Check_offset(_Off);
; 1349 : 		if (this->_Mysize() - _Off <= _Count)

	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, edi
	sub	eax, ecx
	cmp	eax, edx
	ja	SHORT $LN2@erase

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], ecx

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN41@erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
	pop	edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax+ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1358 : 		return (*this);

	mov	eax, esi
	pop	esi

; 1359 : 		}

	pop	ebp
	ret	8
$LN41@erase:

; 514  : 		return (this->_BUF_SIZE <= _Myres

	mov	eax, esi
	pop	edi
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax+ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1359 : 		}

	pop	ebp
	ret	8
$LN2@erase:

; 1350 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1351 : 		else if (0 < _Count)

	test	edx, edx
	je	SHORT $LN90@erase

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN58@erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jmp	SHORT $LN59@erase
$LN58@erase:
	mov	eax, esi
$LN59@erase:

; 1352 : 			{	// move elements down
; 1353 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1354 : 			size_type _Newsize = this->_Mysize() - _Count;

	sub	edi, edx
	push	ebx
	lea	ebx, DWORD PTR [eax+ecx]

; 1355 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	eax, edi
	sub	eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 553  : 		return (_Count == 0 ? _First1

	je	SHORT $LN74@erase
	push	eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1355 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	lea	eax, DWORD PTR [ebx+edx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 553  : 		return (_Count == 0 ? _First1

	push	eax
	push	ebx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
$LN74@erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], edi
	pop	ebx

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN85@erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax+edi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1358 : 		return (*this);

	mov	eax, esi
	pop	edi
	pop	esi

; 1359 : 		}

	pop	ebp
	ret	8
$LN85@erase:

; 514  : 		return (this->_BUF_SIZE <= _Myres

	mov	eax, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax+edi], 0
$LN90@erase:
	pop	edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1358 : 		return (*this);

	mov	eax, esi
	pop	esi

; 1359 : 		}

	pop	ebp
	ret	8
$LN93@erase:
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1340 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp

; 2271 : 		if (this->_Mysize() < _Off)

	mov	eax, DWORD PTR __Off$[ebp]
	cmp	DWORD PTR [ecx+16], eax
	jae	SHORT $LN4@erase

; 2283 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN38@erase:
$LN4@erase:

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [ecx+16], eax

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN29@erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	edx, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [edx+eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1343 : 		return (*this);

	mov	eax, ecx

; 1344 : 		}

	pop	ebp
	ret	4
$LN29@erase:

; 514  : 		return (this->_BUF_SIZE <= _Myres

	mov	edx, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [edx+eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1343 : 		return (*this);

	mov	eax, ecx

; 1344 : 		}

	pop	ebp
	ret	4
$LN37@erase:
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1180 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 523  : 		return (*_First == 0 ? 0

	mov	esi, DWORD PTR __Ptr$[ebp]
	cmp	BYTE PTR [esi], 0
	jne	SHORT $LN5@assign
	xor	edx, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	edx
	push	esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	pop	esi

; 1183 : 		}

	pop	ebp
	ret	4
$LN5@assign:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 523  : 		return (*_First == 0 ? 0

	mov	edx, esi
	push	edi
	lea	edi, DWORD PTR [edx+1]
$LL7@assign:
	mov	al, BYTE PTR [edx]
	inc	edx
	test	al, al
	jne	SHORT $LL7@assign
	sub	edx, edi
	pop	edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	edx
	push	esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	pop	esi

; 1183 : 		}

	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1165 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	push	ebx

; 2240 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)

	mov	ebx, DWORD PTR __Ptr$[ebp]
	push	esi

; 1165 : 		{	// assign [_Ptr, _Ptr + _Count)

	mov	esi, ecx

; 2240 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)

	test	ebx, ebx
	je	SHORT $LN2@assign

; 514  : 		return (this->_BUF_SIZE <= _Myres

	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, 16					; 00000010H
	jb	SHORT $LN20@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jmp	SHORT $LN21@assign
$LN20@assign:
	mov	eax, esi
$LN21@assign:

; 2240 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)

	cmp	ebx, eax
	jb	SHORT $LN2@assign

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	ecx, 16					; 00000010H
	jb	SHORT $LN34@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	edx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jmp	SHORT $LN35@assign
$LN34@assign:
	mov	edx, esi
$LN35@assign:

; 2240 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)

	mov	eax, DWORD PTR [esi+16]
	add	eax, edx
	cmp	eax, ebx
	jbe	SHORT $LN2@assign

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	ecx, 16					; 00000010H
	jb	SHORT $LN57@assign

; 1168 : 			return (assign(*this,

	push	DWORD PTR __Count$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1168 : 			return (assign(*this,

	mov	ecx, esi
	sub	ebx, eax
	push	ebx
	push	esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	pop	esi
	pop	ebx

; 1177 : 		}

	pop	ebp
	ret	8
$LN57@assign:

; 1168 : 			return (assign(*this,

	push	DWORD PTR __Count$[ebp]

; 514  : 		return (this->_BUF_SIZE <= _Myres

	mov	eax, esi

; 1168 : 			return (assign(*this,

	mov	ecx, esi
	sub	ebx, eax
	push	ebx
	push	esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	pop	esi
	pop	ebx

; 1177 : 		}

	pop	ebp
	ret	8
$LN2@assign:
	push	edi

; 2225 : 		if (max_size() < _Newsize)

	mov	edi, DWORD PTR __Count$[ebp]
	cmp	edi, -2					; fffffffeH
	jbe	SHORT $LN62@assign

; 2266 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN188@assign:
$LN62@assign:

; 2227 : 		if (this->_Myres() < _Newsize)

	cmp	DWORD PTR [esi+20], edi
	jae	SHORT $LN63@assign

; 2228 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow

	push	DWORD PTR [esi+16]
	mov	ecx, esi
	push	edi
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 2233 : 			_Eos(0);	// new size is zero, just null terminate
; 2234 : 		return (0 < _Newsize);	// return true only if more work to do

	test	edi, edi

; 1169 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1170 : 
; 1171 : 		if (_Grow(_Count))

	je	SHORT $LN181@assign
$LN186@assign:

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN158@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jmp	SHORT $LN159@assign
$LN63@assign:

; 2232 : 		else if (_Newsize == 0)

	test	edi, edi
	jne	SHORT $LN186@assign

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], edi

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN140@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
	pop	edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1176 : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebx

; 1177 : 		}

	pop	ebp
	ret	8
$LN140@assign:

; 514  : 		return (this->_BUF_SIZE <= _Myres

	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1177 : 		}

	pop	ebp
	ret	8
$LN158@assign:

; 514  : 		return (this->_BUF_SIZE <= _Myres

	mov	eax, esi
$LN159@assign:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 530  : 		return (_Count == 0 ? _First1

	test	edi, edi
	je	SHORT $LN165@assign
	push	edi
	push	ebx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN165@assign:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], edi

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN176@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax+edi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1176 : 		return (*this);

	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx

; 1177 : 		}

	pop	ebp
	ret	8
$LN176@assign:

; 514  : 		return (this->_BUF_SIZE <= _Myres

	mov	eax, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax+edi], 0
$LN181@assign:
	pop	edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1176 : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebx

; 1177 : 		}

	pop	ebp
	ret	8
$LN187@assign:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1149 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	push	ebx

; 2271 : 		if (this->_Mysize() < _Off)

	mov	ebx, DWORD PTR __Right$[ebp]
	push	esi

; 1149 : 		{	// assign _Right [_Roff, _Roff + _Count)

	mov	esi, ecx

; 2271 : 		if (this->_Mysize() < _Off)

	mov	ecx, DWORD PTR __Roff$[ebp]
	push	edi
	mov	eax, DWORD PTR [ebx+16]
	cmp	eax, ecx
	jae	SHORT $LN7@assign

; 2283 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN209@assign:
$LN7@assign:

; 2113 : 		if (_Size <= _Max_effective_size)

	mov	edi, DWORD PTR __Count$[ebp]
	sub	eax, ecx
	cmp	edi, eax
	cmova	edi, eax

; 1150 : 		_Right._Check_offset(_Roff);
; 1151 : 		_Count = _Right._Clamp_suffix_size(_Roff, _Count);
; 1152 : 
; 1153 : 		if (this == &_Right)

	cmp	esi, ebx
	jne	SHORT $LN2@assign

; 1154 : 			erase((size_type)(_Roff + _Count)), erase(0, _Roff);	// substring

	lea	eax, DWORD PTR [ecx+edi]

; 2271 : 		if (this->_Mysize() < _Off)

	cmp	DWORD PTR [esi+16], eax
	jae	SHORT $LN38@assign

; 2283 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN210@assign:
$LN38@assign:

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], eax

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN63@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	edx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1154 : 			erase((size_type)(_Roff + _Count)), erase(0, _Roff);	// substring

	push	ecx
	push	0
	mov	ecx, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [edx+eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1154 : 			erase((size_type)(_Roff + _Count)), erase(0, _Roff);	// substring

	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	pop	edi

; 1161 : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebx

; 1162 : 		}

	pop	ebp
	ret	12					; 0000000cH
$LN63@assign:

; 514  : 		return (this->_BUF_SIZE <= _Myres

	mov	edx, esi

; 1154 : 			erase((size_type)(_Roff + _Count)), erase(0, _Roff);	// substring

	push	ecx
	push	0
	mov	ecx, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [edx+eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1154 : 			erase((size_type)(_Roff + _Count)), erase(0, _Roff);	// substring

	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	pop	edi

; 1161 : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebx

; 1162 : 		}

	pop	ebp
	ret	12					; 0000000cH
$LN2@assign:

; 2225 : 		if (max_size() < _Newsize)

	cmp	edi, -2					; fffffffeH
	jbe	SHORT $LN71@assign

; 2266 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN211@assign:
$LN71@assign:

; 2227 : 		if (this->_Myres() < _Newsize)

	cmp	DWORD PTR [esi+20], edi
	jae	SHORT $LN72@assign

; 2228 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow

	push	DWORD PTR [esi+16]
	mov	ecx, esi
	push	edi
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	mov	ecx, DWORD PTR __Roff$[ebp]

; 2233 : 			_Eos(0);	// new size is zero, just null terminate
; 2234 : 		return (0 < _Newsize);	// return true only if more work to do

	test	edi, edi

; 1155 : 		else if (_Grow(_Count))

	je	SHORT $LN203@assign
$LN207@assign:

; 521  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [ebx+20], 16			; 00000010H
	jb	SHORT $LN166@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	ebx, DWORD PTR [ebx]
$LN166@assign:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN180@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	edx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jmp	SHORT $LN181@assign
$LN72@assign:

; 2232 : 		else if (_Newsize == 0)

	test	edi, edi
	jne	SHORT $LN207@assign

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], edi

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN149@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
	pop	edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1161 : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebx

; 1162 : 		}

	pop	ebp
	ret	12					; 0000000cH
$LN149@assign:

; 514  : 		return (this->_BUF_SIZE <= _Myres

	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1162 : 		}

	pop	ebp
	ret	12					; 0000000cH
$LN180@assign:

; 514  : 		return (this->_BUF_SIZE <= _Myres

	mov	edx, esi
$LN181@assign:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 530  : 		return (_Count == 0 ? _First1

	test	edi, edi
	je	SHORT $LN187@assign
	push	edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1157 : 			_Traits::copy(this->_Myptr(),

	lea	eax, DWORD PTR [ebx+ecx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 530  : 		return (_Count == 0 ? _First1

	push	eax
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN187@assign:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], edi

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN198@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax+edi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1161 : 		return (*this);

	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx

; 1162 : 		}

	pop	ebp
	ret	12					; 0000000cH
$LN198@assign:

; 514  : 		return (this->_BUF_SIZE <= _Myres

	mov	eax, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax+edi], 0
$LN203@assign:
	pop	edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1161 : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebx

; 1162 : 		}

	pop	ebp
	ret	12					; 0000000cH
$LN208@assign:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1016 : 		{	// destroy the string

	push	esi
	mov	esi, ecx

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN6@basic_stri
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN6@basic_stri:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 15			; 0000000fH

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], 0

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN98@basic_stri
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1018 : 		}

	ret	0
$LN98@basic_stri:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [esi], 0
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1018 : 		}

	ret	0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv, COMDAT
; _this$ = ecx

; 961  : 		{	// assign by moving _Right

	push	ebp
	mov	ebp, esp
	push	esi

; 734  : 		return (_Get_data()._Myres);

	mov	esi, DWORD PTR __Right$[ebp]
	push	edi

; 961  : 		{	// assign by moving _Right

	mov	edi, ecx

; 962  : 		if (_Right._Myres() < this->_BUF_SIZE)

	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jae	SHORT $LN2@Assign_rv

; 963  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,

	mov	eax, DWORD PTR [esi+16]
	add	eax, 1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 553  : 		return (_Count == 0 ? _First1

	je	SHORT $LN3@Assign_rv
	push	eax
	push	esi
	push	edi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 965  : 		else

	jmp	SHORT $LN3@Assign_rv
$LN2@Assign_rv:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	edi, edi
	je	SHORT $LN84@Assign_rv
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edi], eax
$LN84@Assign_rv:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 968  : 			_Right._Bx()._Ptr = pointer();

	mov	DWORD PTR [esi], 0
$LN3@Assign_rv:

; 969  : 			}
; 970  : 		this->_Mysize() = _Right._Mysize();

	mov	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [edi+16], eax

; 971  : 		this->_Myres() = _Right._Myres();

	mov	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [edi+20], eax

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 15			; 0000000fH

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], 0

; 514  : 		return (this->_BUF_SIZE <= _Myres

	jb	SHORT $LN231@Assign_rv
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
	pop	edi
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 973  : 		}

	pop	ebp
	ret	4
$LN231@Assign_rv:
	pop	edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [esi], 0
	pop	esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 973  : 		}

	pop	ebp
	ret	4
?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 911  : 		{	// construct by moving _Right

	push	ebp
	mov	ebp, esp
	push	esi

; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	push	DWORD PTR __Right$[ebp]
	mov	esi, ecx

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

	call	?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv

; 914  : 		}

	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Construct@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXPBD0Urandom_access_iterator_tag@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
?_Construct@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXPBD0Urandom_access_iterator_tag@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct, COMDAT
; _this$ = ecx

; 904  : 		{	// initialize from [_First, _Last), const pointers

	push	ebp
	mov	ebp, esp

; 905  : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Last$[ebp]
	cmp	edx, eax
	je	SHORT $LN2@Construct

; 906  : 			assign(_First, _Last - _First);

	sub	eax, edx
	push	eax
	push	edx
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN2@Construct:

; 907  : 		}

	pop	ebp
	ret	12					; 0000000cH
?_Construct@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXPBD0Urandom_access_iterator_tag@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 836  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 523  : 		return (*_First == 0 ? 0

	mov	ecx, DWORD PTR __Ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [esi], 0

; 523  : 		return (*_First == 0 ? 0

	cmp	BYTE PTR [ecx], 0
	jne	SHORT $LN115@basic_stri
	xor	edx, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	edx
	push	ecx
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 837  : 		_Tidy();
; 838  : 		assign(_Ptr);
; 839  : 		}

	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
$LN115@basic_stri:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 523  : 		return (*_First == 0 ? 0

	mov	edx, ecx
	push	edi
	lea	edi, DWORD PTR [edx+1]
$LL117@basic_stri:
	mov	al, BYTE PTR [edx]
	inc	edx
	test	al, al
	jne	SHORT $LL117@basic_stri
	sub	edx, edi
	pop	edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	edx
	push	ecx
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 837  : 		_Tidy();
; 838  : 		assign(_Ptr);
; 839  : 		}

	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [ecx+20], 15			; 0000000fH

; 796  : 		}

	mov	eax, ecx

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 796  : 		}

	ret	0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 780  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx

; 782  : 		assign(_Right, 0, npos);

	push	-1
	push	0
	push	DWORD PTR __Right$[ebp]

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 15			; 0000000fH

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

	mov	BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 782  : 		assign(_Right, 0, npos);

	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 783  : 		}

	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx
	ret	0
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
; _this$ = ecx
	ret	0
??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 320  : 		return (_Myval2);

	mov	eax, ecx

; 321  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 315  : 		return (_Myval2);

	mov	eax, ecx

; 316  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 300  : 		return (*this);

	mov	eax, ecx

; 301  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 295  : 		return (*this);

	mov	eax, ecx

; 296  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres, COMDAT
; _this$ = ecx

; 734  : 		return (_Get_data()._Myres);

	lea	eax, DWORD PTR [ecx+20]

; 735  : 		}

	ret	0
?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABIXZ
_TEXT	SEGMENT
?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABIXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize, COMDAT
; _this$ = ecx

; 729  : 		return (_Get_data()._Mysize);

	lea	eax, DWORD PTR [ecx+16]

; 730  : 		}

	ret	0
?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABIXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize, COMDAT
; _this$ = ecx

; 724  : 		return (_Get_data()._Mysize);

	lea	eax, DWORD PTR [ecx+16]

; 725  : 		}

	ret	0
?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Bx, COMDAT
; _this$ = ecx

; 714  : 		return (_Get_data()._Bx);

	mov	eax, ecx

; 715  : 		}

	ret	0
?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Bx
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 707  : 		return (_Mypair._Get_second());

	mov	eax, ecx

; 708  : 		}

	ret	0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 702  : 		return (_Mypair._Get_second());

	mov	eax, ecx

; 703  : 		}

	ret	0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 697  : 		return (_Mypair._Get_first());

	mov	eax, ecx

; 698  : 		}

	ret	0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 692  : 		return (_Mypair._Get_first());

	mov	eax, ecx

; 693  : 		}

	ret	0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 496  : 		_Mysize(0),

	mov	DWORD PTR [ecx+16], 0

; 590  : 		}

	mov	eax, ecx

; 497  : 		_Myres(0)

	mov	DWORD PTR [ecx+20], 0

; 590  : 		}

	ret	0
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEPBDXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN11@Myptr

; 583  : 		return (_Get_data()._Myptr());

	mov	eax, DWORD PTR [ecx]

; 584  : 		}

	ret	0
$LN11@Myptr:

; 583  : 		return (_Get_data()._Myptr());

	mov	eax, ecx

; 584  : 		}

	ret	0
?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEPBDXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEPADXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN11@Myptr

; 578  : 		return (_Get_data()._Myptr());

	mov	eax, DWORD PTR [ecx]

; 579  : 		}

	ret	0
$LN11@Myptr:

; 578  : 		return (_Get_data()._Myptr());

	mov	eax, ecx

; 579  : 		}

	ret	0
?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEPADXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
	ret	0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 534  : 			}

	ret	0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 529  : 			{	// user-provided, for fancy pointers
; 530  : 			}

	mov	eax, ecx
	ret	0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	eax, DWORD PTR [ecx]

; 522  : 			? _Unfancy(_Bx._Ptr)
; 523  : 			: _Bx._Buf);
; 524  : 		}

	ret	0
$LN3@Myptr:

; 521  : 		return (this->_BUF_SIZE <= _Myres

	mov	eax, ecx

; 522  : 			? _Unfancy(_Bx._Ptr)
; 523  : 			: _Bx._Buf);
; 524  : 		}

	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		return (this->_BUF_SIZE <= _Myres

	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	eax, DWORD PTR [ecx]

; 515  : 			? _Unfancy(_Bx._Ptr)
; 516  : 			: _Bx._Buf);
; 517  : 		}

	ret	0
$LN3@Myptr:

; 514  : 		return (this->_BUF_SIZE <= _Myres

	mov	eax, ecx

; 515  : 			? _Unfancy(_Bx._Ptr)
; 516  : 			: _Bx._Buf);
; 517  : 		}

	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 		_Mysize(0),

	mov	DWORD PTR [ecx+16], 0

; 499  : 		}

	mov	eax, ecx
	mov	DWORD PTR [ecx+20], 0
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1008 : 		return (_Mytraits::max_size(*this));

	or	eax, -1

; 1009 : 		}

	ret	4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 986  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	1
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH

; 987  : 		_Mybase::deallocate(_Ptr, _Count);
; 988  : 		}

	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 975  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp

; 51   : 	if (_Count == 0)

	mov	eax, DWORD PTR __Count$[ebp]
	test	eax, eax
	jne	SHORT $LN6@allocate
$LN15@allocate:

; 976  : 		return (_Mybase::allocate(_Count));
; 977  : 		}

	pop	ebp
	ret	4
$LN6@allocate:

; 61   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN8@allocate

; 62   : 		{	// allocate large block
; 63   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 64   : 			"Big allocations should at least match vector register size");
; 65   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

	lea	ecx, DWORD PTR [eax+35]

; 66   : 		if (_Block_size <= _User_size)

	cmp	ecx, eax
	ja	SHORT $LN10@allocate

; 67   : 			_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN18@allocate:
$LN10@allocate:

; 68   : 		const uintptr_t _Ptr_container =
; 69   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

	push	ecx
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4

; 70   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

	test	ecx, ecx
	jne	SHORT $LN11@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN19@allocate:
$LN11@allocate:

; 71   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

	lea	eax, DWORD PTR [ecx+35]
	and	eax, -32				; ffffffe0H

; 72   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 73   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

	mov	DWORD PTR [eax-4], ecx

; 976  : 		return (_Mybase::allocate(_Count));
; 977  : 		}

	pop	ebp
	ret	4
$LN8@allocate:

; 83   : 		_Ptr = ::operator new(_User_size);

	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 84   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	eax, eax
	jne	SHORT $LN15@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN20@allocate:
$LN17@allocate:
	int	3
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@$$QAU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@$$QAU01@@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 947  : 		}

	mov	eax, ecx
	ret	4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@$$QAU01@@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 937  : 		}

	mov	eax, ecx
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@U_Nil@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 1
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@U_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::select_on_container_copy_construction, COMDAT
; _this$ = ecx

; 912  : 		{	// get allocator to use

	push	ebp
	mov	ebp, esp

; 913  : 		return (_Mytraits::select_on_container_copy_construction(*this));

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 914  : 		}

	pop	ebp
	ret	8
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@U_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z PROC ; std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction, COMDAT

; 874  : 		{	// get allocator to use

	push	ebp
	mov	ebp, esp

; 875  : 		return (_Al);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 876  : 		}

	pop	ebp
	ret	0
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ENDP ; std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 869  : 		return (_Al.max_size());

	or	eax, -1

; 870  : 		}

	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 749  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 750  : 		}

	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 724  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp

; 51   : 	if (_Count == 0)

	mov	eax, DWORD PTR __Count$[ebp]
	test	eax, eax
	jne	SHORT $LN4@allocate
$LN12@allocate:

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 726  : 		}

	pop	ebp
	ret	4
$LN4@allocate:

; 61   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN6@allocate

; 62   : 		{	// allocate large block
; 63   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 64   : 			"Big allocations should at least match vector register size");
; 65   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

	lea	ecx, DWORD PTR [eax+35]

; 66   : 		if (_Block_size <= _User_size)

	cmp	ecx, eax
	ja	SHORT $LN8@allocate

; 67   : 			_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN15@allocate:
$LN8@allocate:

; 68   : 		const uintptr_t _Ptr_container =
; 69   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

	push	ecx
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4

; 70   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

	test	ecx, ecx
	jne	SHORT $LN9@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN16@allocate:
$LN9@allocate:

; 71   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

	lea	eax, DWORD PTR [ecx+35]
	and	eax, -32				; ffffffe0H

; 72   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 73   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

	mov	DWORD PTR [eax-4], ecx

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 726  : 		}

	pop	ebp
	ret	4
$LN6@allocate:

; 83   : 		_Ptr = ::operator new(_User_size);

	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 84   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	eax, eax
	jne	SHORT $LN12@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN17@allocate:
$LN14@allocate:
	int	3
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 719  : 		{	// deallocate object at _Ptr

	push	ebp
	mov	ebp, esp

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	1
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH

; 721  : 		}

	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 704  : 		{	// construct by copying (do nothing)
; 705  : 		}

	mov	eax, ecx
	ret	4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 700  : 		{	// construct default allocator (do nothing)
; 701  : 		}

	mov	eax, ecx
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 92   : 	{	// deallocate storage for _Count elements of size _Sz

	push	ebp
	mov	ebp, esp

; 93   :  #if defined(_M_IX86) || defined(_M_X64)
; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

	or	eax, -1
	mov	ecx, DWORD PTR __Count$[ebp]
	xor	edx, edx
	div	DWORD PTR __Sz$[ebp]
	cmp	ecx, eax
	jbe	SHORT $LN2@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN2@Deallocate:

; 95   : 	const size_t _User_size = _Count * _Sz;

	imul	ecx, DWORD PTR __Sz$[ebp]

; 96   : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	ecx, 4096				; 00001000H
	jb	SHORT $LN9@Deallocate

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

	mov	eax, DWORD PTR __Ptr$[ebp]
	test	al, 31					; 0000001fH
	je	SHORT $LN4@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN4@Deallocate:

; 100  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 101  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 102  : 		const uintptr_t _Ptr_container =
; 103  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

	mov	ecx, DWORD PTR [eax-4]

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

	cmp	ecx, eax
	jb	SHORT $LN5@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN5@Deallocate:

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

	sub	eax, ecx
	cmp	eax, 4
	jae	SHORT $LN6@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN6@Deallocate:

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

	cmp	eax, 35					; 00000023H
	jbe	SHORT $LN3@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN9@Deallocate:

; 126  : 			<= _NON_USER_SIZE);
; 127  : 
; 128  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

	mov	ecx, DWORD PTR __Ptr$[ebp]
$LN3@Deallocate:

; 129  : 		}
; 130  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 131  : 
; 132  : 	::operator delete(_Ptr);

	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 133  : 	}

	pop	ebp
	ret	0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPAXII_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
?_Allocate@std@@YAPAXII_N@Z PROC			; std::_Allocate, COMDAT

; 48   : 	{	// allocate storage for _Count elements of size _Sz

	push	ebp
	mov	ebp, esp

; 49   : 	void *_Ptr = 0;
; 50   : 
; 51   : 	if (_Count == 0)

	mov	ecx, DWORD PTR __Count$[ebp]
	test	ecx, ecx
	jne	SHORT $LN2@Allocate

; 52   : 		return (_Ptr);

	xor	eax, eax
$LN1@Allocate:

; 85   : 		}
; 86   : 	return (_Ptr);
; 87   : 	}

	pop	ebp
	ret	0
$LN2@Allocate:

; 53   : 
; 54   : 	// check overflow of multiply
; 55   : 	if ((size_t)(-1) / _Sz < _Count)

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Sz$[ebp]
	cmp	eax, ecx
	jae	SHORT $LN3@Allocate

; 56   : 		_Xbad_alloc();	// report no memory

	jmp	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN3@Allocate:

; 57   : 	const size_t _User_size = _Count * _Sz;

	imul	ecx, DWORD PTR __Sz$[ebp]

; 58   : 
; 59   :  #if defined(_M_IX86) || defined(_M_X64)
; 60   : 	if (_Try_aligned_allocation
; 61   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	BYTE PTR __Try_aligned_allocation$[ebp], 0
	je	SHORT $LN4@Allocate
	cmp	ecx, 4096				; 00001000H
	jb	SHORT $LN4@Allocate

; 62   : 		{	// allocate large block
; 63   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 64   : 			"Big allocations should at least match vector register size");
; 65   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

	lea	eax, DWORD PTR [ecx+35]

; 66   : 		if (_Block_size <= _User_size)

	cmp	eax, ecx
	ja	SHORT $LN6@Allocate

; 67   : 			_Xbad_alloc();	// report no memory

	jmp	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN6@Allocate:

; 68   : 		const uintptr_t _Ptr_container =
; 69   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

	push	eax
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4

; 70   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

	test	ecx, ecx
	jne	SHORT $LN7@Allocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN7@Allocate:

; 71   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

	lea	eax, DWORD PTR [ecx+35]
	and	eax, -32				; ffffffe0H

; 72   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 73   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

	mov	DWORD PTR [eax-4], ecx

; 85   : 		}
; 86   : 	return (_Ptr);
; 87   : 	}

	pop	ebp
	ret	0
$LN4@Allocate:

; 74   : 
; 75   :  #ifdef _DEBUG
; 76   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 77   :  #endif /* _DEBUG */
; 78   : 		}
; 79   : 	else
; 80   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 81   : 
; 82   : 		{	// allocate normal block
; 83   : 		_Ptr = ::operator new(_User_size);

	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 84   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	eax, eax
	jne	SHORT $LN1@Allocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
?_Allocate@std@@YAPAXII_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ
_TEXT	SEGMENT
?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ PROC ; std::_Iterator_base0::_Getcont, COMDAT
; _this$ = ecx

; 59   : 		return (0);

	xor	eax, eax

; 60   : 		}

	ret	0
?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ ENDP ; std::_Iterator_base0::_Getcont
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 55   : 		}

	ret	4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z PROC	; std::_Container_base0::_Swap_all, COMDAT
; _this$ = ecx

; 48   : 		}

	ret	4
?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z ENDP	; std::_Container_base0::_Swap_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 44   : 		}

	ret	0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 564  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 565  : 		_Left = _Right;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	eax, DWORD PTR __Left$[ebp]
	mov	BYTE PTR [eax], cl

; 566  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 552  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp

; 553  : 		return (_Count == 0 ? _First1

	mov	eax, DWORD PTR __Count$[ebp]
	test	eax, eax
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]

; 554  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));
; 555  : 		}

	pop	ebp
	ret	0
$LN3@move:

; 553  : 		return (_Count == 0 ? _First1

	mov	DWORD PTR __Count$[ebp], eax

; 554  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));
; 555  : 		}

	pop	ebp

; 553  : 		return (_Count == 0 ? _First1

	jmp	DWORD PTR __imp__memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 529  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp

; 530  : 		return (_Count == 0 ? _First1

	mov	eax, DWORD PTR __Count$[ebp]
	test	eax, eax
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]

; 531  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));
; 532  : 		}

	pop	ebp
	ret	0
$LN3@copy:

; 530  : 		return (_Count == 0 ? _First1

	mov	DWORD PTR __Count$[ebp], eax

; 531  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));
; 532  : 		}

	pop	ebp

; 530  : 		return (_Count == 0 ? _First1

	jmp	_memcpy
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 522  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp

; 523  : 		return (*_First == 0 ? 0

	mov	eax, DWORD PTR __First$[ebp]
	cmp	BYTE PTR [eax], 0
	jne	SHORT $LN3@length
	xor	eax, eax

; 524  : 			: _CSTD strlen(_First));
; 525  : 		}

	pop	ebp
	ret	0
$LN3@length:

; 523  : 		return (*_First == 0 ? 0

	lea	edx, DWORD PTR [eax+1]
$LL5@length:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL5@length
	sub	eax, edx

; 524  : 			: _CSTD strlen(_First));
; 525  : 		}

	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 94   :         return;
; 95   :     }

	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 87   :     {

	push	ebp
	mov	ebp, esp

; 88   :         (void)_Size;
; 89   :         return _Where;

	mov	eax, DWORD PTR __Where$[ebp]

; 90   :     }

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx

; 84   :         __std_exception_destroy(&_Data);

	lea	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
	push	eax
	call	DWORD PTR __imp____std_exception_destroy
	add	esp, 4
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN6@scalar
	push	12					; 0000000cH
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN6@scalar:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 89   :         return _Data._What ? _Data._What : "Unknown exception";

	mov	ecx, DWORD PTR [ecx+4]
	mov	eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception?$AA@
	test	ecx, ecx
	cmovne	eax, ecx

; 90   :     }

	ret	0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 84   :         __std_exception_destroy(&_Data);

	lea	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
	push	eax
	call	DWORD PTR __imp____std_exception_destroy
	pop	ecx

; 85   :     }

	ret	0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 66   :     {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	xorps	xmm0, xmm0
	lea	eax, DWORD PTR [esi+4]

; 67   :         __std_exception_copy(&_Other._Data, &_Data);

	push	eax
	mov	DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
	movq	QWORD PTR [eax], xmm0
	mov	eax, DWORD PTR __Other$[ebp]
	add	eax, 4
	push	eax
	call	DWORD PTR __imp____std_exception_copy
	add	esp, 8

; 68   :     }

	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBD@Z
_TEXT	SEGMENT
__InitData$ = -8					; size = 8
__Message$ = 8						; size = 4
??0exception@std@@QAE@QBD@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 53   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 54   :         __std_exception_data _InitData = { _Message, true };

	mov	eax, DWORD PTR __Message$[ebp]
	xorps	xmm0, xmm0
	push	esi
	mov	esi, ecx
	mov	DWORD PTR __InitData$[ebp], eax
	lea	edx, DWORD PTR [esi+4]
	mov	BYTE PTR __InitData$[ebp+4], 1

; 55   :         __std_exception_copy(&_InitData, &_Data);

	push	edx
	lea	eax, DWORD PTR __InitData$[ebp]
	mov	DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
	push	eax
	movq	QWORD PTR [edx], xmm0
	call	DWORD PTR __imp____std_exception_copy
	add	esp, 8

; 56   :     }

	mov	eax, esi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0exception@std@@QAE@QBD@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
